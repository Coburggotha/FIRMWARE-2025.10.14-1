
LCD-SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  080037f4  080037f4  000047f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c54  08003c54  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003c54  08003c54  00005068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003c54  08003c54  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c54  08003c54  00004c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c58  08003c58  00004c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003c5c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000068  08003cc4  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08003cc4  00005284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bbb  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001839  00000000  00000000  0000dc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0000f488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000070b  00000000  00000000  0000fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e62  00000000  00000000  000104cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a07d  00000000  00000000  0002832d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085f89  00000000  00000000  000323aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8333  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cc4  00000000  00000000  000b8378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000bb03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080037dc 	.word	0x080037dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080037dc 	.word	0x080037dc

0800014c <__io_putchar>:
* @brief Retargets the C library printf function to the USART.
* @param None
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  if (ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	@ (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	@ (8000184 <__io_putchar+0x38>)
 8000164:	f002 f9cf 	bl	8002506 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	@ (8000184 <__io_putchar+0x38>)
 8000172:	f002 f9c8 	bl	8002506 <HAL_UART_Transmit>

  return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	080037f4 	.word	0x080037f4
 8000184:	200000dc 	.word	0x200000dc

08000188 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief GPIO 외부 인터럽트 콜백 함수 (그레이 코드 방식)
 * 안정적인 로터리 인코더 감지
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	80fb      	strh	r3, [r7, #6]
  uint32_t current_time = HAL_GetTick();
 8000192:	f000 ffcf 	bl	8001134 <HAL_GetTick>
 8000196:	60f8      	str	r0, [r7, #12]

  // 디바운스 처리
  if (current_time - last_interrupt_time < DEBOUNCE_DELAY) {
 8000198:	4b2c      	ldr	r3, [pc, #176]	@ (800024c <HAL_GPIO_EXTI_Callback+0xc4>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	68fa      	ldr	r2, [r7, #12]
 800019e:	1ad3      	subs	r3, r2, r3
 80001a0:	2b04      	cmp	r3, #4
 80001a2:	d94e      	bls.n	8000242 <HAL_GPIO_EXTI_Callback+0xba>
    return;
  }
  last_interrupt_time = current_time;
 80001a4:	4a29      	ldr	r2, [pc, #164]	@ (800024c <HAL_GPIO_EXTI_Callback+0xc4>)
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	6013      	str	r3, [r2, #0]

  // 인코더 핀들 처리 (PA0, PA1)
  if (GPIO_Pin == GPIO_PIN_0 || GPIO_Pin == GPIO_PIN_1)
 80001aa:	88fb      	ldrh	r3, [r7, #6]
 80001ac:	2b01      	cmp	r3, #1
 80001ae:	d002      	beq.n	80001b6 <HAL_GPIO_EXTI_Callback+0x2e>
 80001b0:	88fb      	ldrh	r3, [r7, #6]
 80001b2:	2b02      	cmp	r3, #2
 80001b4:	d146      	bne.n	8000244 <HAL_GPIO_EXTI_Callback+0xbc>
  {
    // 현재 상태 읽기
    uint8_t clk = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80001b6:	2101      	movs	r1, #1
 80001b8:	4825      	ldr	r0, [pc, #148]	@ (8000250 <HAL_GPIO_EXTI_Callback+0xc8>)
 80001ba:	f001 fa7b 	bl	80016b4 <HAL_GPIO_ReadPin>
 80001be:	4603      	mov	r3, r0
 80001c0:	72fb      	strb	r3, [r7, #11]
    uint8_t dt = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 80001c2:	2102      	movs	r1, #2
 80001c4:	4822      	ldr	r0, [pc, #136]	@ (8000250 <HAL_GPIO_EXTI_Callback+0xc8>)
 80001c6:	f001 fa75 	bl	80016b4 <HAL_GPIO_ReadPin>
 80001ca:	4603      	mov	r3, r0
 80001cc:	72bb      	strb	r3, [r7, #10]
    uint8_t encoded = (clk << 1) | dt;  // 2비트 상태 생성
 80001ce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80001d2:	005b      	lsls	r3, r3, #1
 80001d4:	b25a      	sxtb	r2, r3
 80001d6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80001da:	4313      	orrs	r3, r2
 80001dc:	b25b      	sxtb	r3, r3
 80001de:	727b      	strb	r3, [r7, #9]

    uint8_t sum = (encoder_last_encoded << 2) | encoded;  // 이전 상태와 현재 상태 결합
 80001e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000254 <HAL_GPIO_EXTI_Callback+0xcc>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	b25b      	sxtb	r3, r3
 80001e8:	009b      	lsls	r3, r3, #2
 80001ea:	b25a      	sxtb	r2, r3
 80001ec:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80001f0:	4313      	orrs	r3, r2
 80001f2:	b25b      	sxtb	r3, r3
 80001f4:	723b      	strb	r3, [r7, #8]

    // 회전 방향 결정 (그레이 코드 기반)
    if(sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) {
 80001f6:	7a3b      	ldrb	r3, [r7, #8]
 80001f8:	2b0d      	cmp	r3, #13
 80001fa:	d008      	beq.n	800020e <HAL_GPIO_EXTI_Callback+0x86>
 80001fc:	7a3b      	ldrb	r3, [r7, #8]
 80001fe:	2b04      	cmp	r3, #4
 8000200:	d005      	beq.n	800020e <HAL_GPIO_EXTI_Callback+0x86>
 8000202:	7a3b      	ldrb	r3, [r7, #8]
 8000204:	2b02      	cmp	r3, #2
 8000206:	d002      	beq.n	800020e <HAL_GPIO_EXTI_Callback+0x86>
 8000208:	7a3b      	ldrb	r3, [r7, #8]
 800020a:	2b0b      	cmp	r3, #11
 800020c:	d104      	bne.n	8000218 <HAL_GPIO_EXTI_Callback+0x90>
      encoder_count++;  // 시계방향
 800020e:	4b12      	ldr	r3, [pc, #72]	@ (8000258 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	3301      	adds	r3, #1
 8000214:	4a10      	ldr	r2, [pc, #64]	@ (8000258 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000216:	6013      	str	r3, [r2, #0]
    }
    if(sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) {
 8000218:	7a3b      	ldrb	r3, [r7, #8]
 800021a:	2b0e      	cmp	r3, #14
 800021c:	d008      	beq.n	8000230 <HAL_GPIO_EXTI_Callback+0xa8>
 800021e:	7a3b      	ldrb	r3, [r7, #8]
 8000220:	2b07      	cmp	r3, #7
 8000222:	d005      	beq.n	8000230 <HAL_GPIO_EXTI_Callback+0xa8>
 8000224:	7a3b      	ldrb	r3, [r7, #8]
 8000226:	2b01      	cmp	r3, #1
 8000228:	d002      	beq.n	8000230 <HAL_GPIO_EXTI_Callback+0xa8>
 800022a:	7a3b      	ldrb	r3, [r7, #8]
 800022c:	2b08      	cmp	r3, #8
 800022e:	d104      	bne.n	800023a <HAL_GPIO_EXTI_Callback+0xb2>
      encoder_count--;  // 반시계방향
 8000230:	4b09      	ldr	r3, [pc, #36]	@ (8000258 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	3b01      	subs	r3, #1
 8000236:	4a08      	ldr	r2, [pc, #32]	@ (8000258 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000238:	6013      	str	r3, [r2, #0]
    }

    encoder_last_encoded = encoded;
 800023a:	4a06      	ldr	r2, [pc, #24]	@ (8000254 <HAL_GPIO_EXTI_Callback+0xcc>)
 800023c:	7a7b      	ldrb	r3, [r7, #9]
 800023e:	7013      	strb	r3, [r2, #0]
 8000240:	e000      	b.n	8000244 <HAL_GPIO_EXTI_Callback+0xbc>
    return;
 8000242:	bf00      	nop
  }
}
 8000244:	3710      	adds	r7, #16
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	2000012c 	.word	0x2000012c
 8000250:	40010800 	.word	0x40010800
 8000254:	20000128 	.word	0x20000128
 8000258:	20000124 	.word	0x20000124

0800025c <LCD_WriteCommand>:
void LCD_WriteCommand(uint8_t cmd) {
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
	LCD_CS_LOW();
 8000266:	2200      	movs	r2, #0
 8000268:	2140      	movs	r1, #64	@ 0x40
 800026a:	480c      	ldr	r0, [pc, #48]	@ (800029c <LCD_WriteCommand+0x40>)
 800026c:	f001 fa39 	bl	80016e2 <HAL_GPIO_WritePin>
	LCD_DC_LOW();
 8000270:	2200      	movs	r2, #0
 8000272:	2140      	movs	r1, #64	@ 0x40
 8000274:	480a      	ldr	r0, [pc, #40]	@ (80002a0 <LCD_WriteCommand+0x44>)
 8000276:	f001 fa34 	bl	80016e2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 800027a:	1df9      	adds	r1, r7, #7
 800027c:	f04f 33ff 	mov.w	r3, #4294967295
 8000280:	2201      	movs	r2, #1
 8000282:	4808      	ldr	r0, [pc, #32]	@ (80002a4 <LCD_WriteCommand+0x48>)
 8000284:	f001 fef2 	bl	800206c <HAL_SPI_Transmit>
	LCD_CS_HIGH();
 8000288:	2201      	movs	r2, #1
 800028a:	2140      	movs	r1, #64	@ 0x40
 800028c:	4803      	ldr	r0, [pc, #12]	@ (800029c <LCD_WriteCommand+0x40>)
 800028e:	f001 fa28 	bl	80016e2 <HAL_GPIO_WritePin>
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40010c00 	.word	0x40010c00
 80002a0:	40010800 	.word	0x40010800
 80002a4:	20000084 	.word	0x20000084

080002a8 <LCD_WriteData>:

void LCD_WriteData(uint8_t data) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
	LCD_CS_LOW();
 80002b2:	2200      	movs	r2, #0
 80002b4:	2140      	movs	r1, #64	@ 0x40
 80002b6:	480c      	ldr	r0, [pc, #48]	@ (80002e8 <LCD_WriteData+0x40>)
 80002b8:	f001 fa13 	bl	80016e2 <HAL_GPIO_WritePin>
	LCD_DC_HIGH();
 80002bc:	2201      	movs	r2, #1
 80002be:	2140      	movs	r1, #64	@ 0x40
 80002c0:	480a      	ldr	r0, [pc, #40]	@ (80002ec <LCD_WriteData+0x44>)
 80002c2:	f001 fa0e 	bl	80016e2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80002c6:	1df9      	adds	r1, r7, #7
 80002c8:	f04f 33ff 	mov.w	r3, #4294967295
 80002cc:	2201      	movs	r2, #1
 80002ce:	4808      	ldr	r0, [pc, #32]	@ (80002f0 <LCD_WriteData+0x48>)
 80002d0:	f001 fecc 	bl	800206c <HAL_SPI_Transmit>
	LCD_CS_HIGH();
 80002d4:	2201      	movs	r2, #1
 80002d6:	2140      	movs	r1, #64	@ 0x40
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <LCD_WriteData+0x40>)
 80002da:	f001 fa02 	bl	80016e2 <HAL_GPIO_WritePin>
}
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40010c00 	.word	0x40010c00
 80002ec:	40010800 	.word	0x40010800
 80002f0:	20000084 	.word	0x20000084

080002f4 <LCD_WriteData16>:

void LCD_WriteData16(uint16_t data) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = (data >> 8) & 0xFF;
 80002fe:	88fb      	ldrh	r3, [r7, #6]
 8000300:	0a1b      	lsrs	r3, r3, #8
 8000302:	b29b      	uxth	r3, r3
 8000304:	b2db      	uxtb	r3, r3
 8000306:	733b      	strb	r3, [r7, #12]
	buffer[1] = data & 0xFF;
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	b2db      	uxtb	r3, r3
 800030c:	737b      	strb	r3, [r7, #13]

	LCD_CS_LOW();
 800030e:	2200      	movs	r2, #0
 8000310:	2140      	movs	r1, #64	@ 0x40
 8000312:	480c      	ldr	r0, [pc, #48]	@ (8000344 <LCD_WriteData16+0x50>)
 8000314:	f001 f9e5 	bl	80016e2 <HAL_GPIO_WritePin>
	LCD_DC_HIGH();
 8000318:	2201      	movs	r2, #1
 800031a:	2140      	movs	r1, #64	@ 0x40
 800031c:	480a      	ldr	r0, [pc, #40]	@ (8000348 <LCD_WriteData16+0x54>)
 800031e:	f001 f9e0 	bl	80016e2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, buffer, 2, HAL_MAX_DELAY);
 8000322:	f107 010c 	add.w	r1, r7, #12
 8000326:	f04f 33ff 	mov.w	r3, #4294967295
 800032a:	2202      	movs	r2, #2
 800032c:	4807      	ldr	r0, [pc, #28]	@ (800034c <LCD_WriteData16+0x58>)
 800032e:	f001 fe9d 	bl	800206c <HAL_SPI_Transmit>
	LCD_CS_HIGH();
 8000332:	2201      	movs	r2, #1
 8000334:	2140      	movs	r1, #64	@ 0x40
 8000336:	4803      	ldr	r0, [pc, #12]	@ (8000344 <LCD_WriteData16+0x50>)
 8000338:	f001 f9d3 	bl	80016e2 <HAL_GPIO_WritePin>
}
 800033c:	bf00      	nop
 800033e:	3710      	adds	r7, #16
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40010c00 	.word	0x40010c00
 8000348:	40010800 	.word	0x40010800
 800034c:	20000084 	.word	0x20000084

08000350 <LCD_Init>:

void LCD_Init(void) {
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	// Hardware reset
	LCD_RES_LOW();
 8000354:	2200      	movs	r2, #0
 8000356:	2102      	movs	r1, #2
 8000358:	4890      	ldr	r0, [pc, #576]	@ (800059c <LCD_Init+0x24c>)
 800035a:	f001 f9c2 	bl	80016e2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800035e:	2064      	movs	r0, #100	@ 0x64
 8000360:	f000 fef2 	bl	8001148 <HAL_Delay>
	LCD_RES_HIGH();
 8000364:	2201      	movs	r2, #1
 8000366:	2102      	movs	r1, #2
 8000368:	488c      	ldr	r0, [pc, #560]	@ (800059c <LCD_Init+0x24c>)
 800036a:	f001 f9ba 	bl	80016e2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800036e:	2064      	movs	r0, #100	@ 0x64
 8000370:	f000 feea 	bl	8001148 <HAL_Delay>

	// Software reset
	LCD_WriteCommand(ST7735_SWRESET);
 8000374:	2001      	movs	r0, #1
 8000376:	f7ff ff71 	bl	800025c <LCD_WriteCommand>
	HAL_Delay(150);
 800037a:	2096      	movs	r0, #150	@ 0x96
 800037c:	f000 fee4 	bl	8001148 <HAL_Delay>

	// Out of sleep mode
	LCD_WriteCommand(ST7735_SLPOUT);
 8000380:	2011      	movs	r0, #17
 8000382:	f7ff ff6b 	bl	800025c <LCD_WriteCommand>
	HAL_Delay(500);
 8000386:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800038a:	f000 fedd 	bl	8001148 <HAL_Delay>

	// Frame rate control - normal mode
	LCD_WriteCommand(ST7735_FRMCTR1);
 800038e:	20b1      	movs	r0, #177	@ 0xb1
 8000390:	f7ff ff64 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8000394:	2001      	movs	r0, #1
 8000396:	f7ff ff87 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x2C);
 800039a:	202c      	movs	r0, #44	@ 0x2c
 800039c:	f7ff ff84 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x2D);
 80003a0:	202d      	movs	r0, #45	@ 0x2d
 80003a2:	f7ff ff81 	bl	80002a8 <LCD_WriteData>

	// Frame rate control - idle mode
	LCD_WriteCommand(ST7735_FRMCTR2);
 80003a6:	20b2      	movs	r0, #178	@ 0xb2
 80003a8:	f7ff ff58 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0x01);
 80003ac:	2001      	movs	r0, #1
 80003ae:	f7ff ff7b 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x2C);
 80003b2:	202c      	movs	r0, #44	@ 0x2c
 80003b4:	f7ff ff78 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x2D);
 80003b8:	202d      	movs	r0, #45	@ 0x2d
 80003ba:	f7ff ff75 	bl	80002a8 <LCD_WriteData>

	// Frame rate control - partial mode
	LCD_WriteCommand(ST7735_FRMCTR3);
 80003be:	20b3      	movs	r0, #179	@ 0xb3
 80003c0:	f7ff ff4c 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0x01);
 80003c4:	2001      	movs	r0, #1
 80003c6:	f7ff ff6f 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x2C);
 80003ca:	202c      	movs	r0, #44	@ 0x2c
 80003cc:	f7ff ff6c 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x2D);
 80003d0:	202d      	movs	r0, #45	@ 0x2d
 80003d2:	f7ff ff69 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x01);
 80003d6:	2001      	movs	r0, #1
 80003d8:	f7ff ff66 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x2C);
 80003dc:	202c      	movs	r0, #44	@ 0x2c
 80003de:	f7ff ff63 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x2D);
 80003e2:	202d      	movs	r0, #45	@ 0x2d
 80003e4:	f7ff ff60 	bl	80002a8 <LCD_WriteData>

	// Display inversion control
	LCD_WriteCommand(ST7735_INVCTR);
 80003e8:	20b4      	movs	r0, #180	@ 0xb4
 80003ea:	f7ff ff37 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0x07);
 80003ee:	2007      	movs	r0, #7
 80003f0:	f7ff ff5a 	bl	80002a8 <LCD_WriteData>

	// Power control
	LCD_WriteCommand(ST7735_PWCTR1);
 80003f4:	20c0      	movs	r0, #192	@ 0xc0
 80003f6:	f7ff ff31 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0xA2);
 80003fa:	20a2      	movs	r0, #162	@ 0xa2
 80003fc:	f7ff ff54 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x02);
 8000400:	2002      	movs	r0, #2
 8000402:	f7ff ff51 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x84);
 8000406:	2084      	movs	r0, #132	@ 0x84
 8000408:	f7ff ff4e 	bl	80002a8 <LCD_WriteData>

	LCD_WriteCommand(ST7735_PWCTR2);
 800040c:	20c1      	movs	r0, #193	@ 0xc1
 800040e:	f7ff ff25 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0xC5);
 8000412:	20c5      	movs	r0, #197	@ 0xc5
 8000414:	f7ff ff48 	bl	80002a8 <LCD_WriteData>

	LCD_WriteCommand(ST7735_PWCTR3);
 8000418:	20c2      	movs	r0, #194	@ 0xc2
 800041a:	f7ff ff1f 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 800041e:	200a      	movs	r0, #10
 8000420:	f7ff ff42 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x00);
 8000424:	2000      	movs	r0, #0
 8000426:	f7ff ff3f 	bl	80002a8 <LCD_WriteData>

	LCD_WriteCommand(ST7735_PWCTR4);
 800042a:	20c3      	movs	r0, #195	@ 0xc3
 800042c:	f7ff ff16 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0x8A);
 8000430:	208a      	movs	r0, #138	@ 0x8a
 8000432:	f7ff ff39 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x2A);
 8000436:	202a      	movs	r0, #42	@ 0x2a
 8000438:	f7ff ff36 	bl	80002a8 <LCD_WriteData>

	LCD_WriteCommand(ST7735_PWCTR5);
 800043c:	20c4      	movs	r0, #196	@ 0xc4
 800043e:	f7ff ff0d 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0x8A);
 8000442:	208a      	movs	r0, #138	@ 0x8a
 8000444:	f7ff ff30 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0xEE);
 8000448:	20ee      	movs	r0, #238	@ 0xee
 800044a:	f7ff ff2d 	bl	80002a8 <LCD_WriteData>

	// VCOM control
	LCD_WriteCommand(ST7735_VMCTR1);
 800044e:	20c5      	movs	r0, #197	@ 0xc5
 8000450:	f7ff ff04 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0x0E);
 8000454:	200e      	movs	r0, #14
 8000456:	f7ff ff27 	bl	80002a8 <LCD_WriteData>

	// Display inversion off
	LCD_WriteCommand(ST7735_INVON);
 800045a:	2021      	movs	r0, #33	@ 0x21
 800045c:	f7ff fefe 	bl	800025c <LCD_WriteCommand>

	// Memory access control (rotation)
	LCD_WriteCommand(ST7735_MADCTL);
 8000460:	2036      	movs	r0, #54	@ 0x36
 8000462:	f7ff fefb 	bl	800025c <LCD_WriteCommand>
	// 1. 기본 90도 회전 (추천)
	//LCD_WriteData(0x20); // MY=0, MX=0, MV=1
	// 2. 현재 사용중
	//LCD_WriteData(0xE0); // MY=1, MX=1, MV=1
	// 3. 90도 + X축만 미러링
	LCD_WriteData(0x68); // MY=0, MX=1, MV=1
 8000466:	2068      	movs	r0, #104	@ 0x68
 8000468:	f7ff ff1e 	bl	80002a8 <LCD_WriteData>
	// 4. 90도 + Y축만 미러링
	//LCD_WriteData(0xA0); // MY=1, MX=0, MV=1

	// Color mode: 16-bit color
	LCD_WriteCommand(ST7735_COLMOD);
 800046c:	203a      	movs	r0, #58	@ 0x3a
 800046e:	f7ff fef5 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0x05);
 8000472:	2005      	movs	r0, #5
 8000474:	f7ff ff18 	bl	80002a8 <LCD_WriteData>

	// Column address set
	LCD_WriteCommand(ST7735_CASET);
 8000478:	202a      	movs	r0, #42	@ 0x2a
 800047a:	f7ff feef 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800047e:	2000      	movs	r0, #0
 8000480:	f7ff ff12 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x00);
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff0f 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x00);
 800048a:	2000      	movs	r0, #0
 800048c:	f7ff ff0c 	bl	80002a8 <LCD_WriteData>
	//LCD_WriteData(0x4F); // 79
	LCD_WriteData(0x9F); // 159
 8000490:	209f      	movs	r0, #159	@ 0x9f
 8000492:	f7ff ff09 	bl	80002a8 <LCD_WriteData>

	// Row address set
	LCD_WriteCommand(ST7735_RASET);
 8000496:	202b      	movs	r0, #43	@ 0x2b
 8000498:	f7ff fee0 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800049c:	2000      	movs	r0, #0
 800049e:	f7ff ff03 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x00);
 80004a2:	2000      	movs	r0, #0
 80004a4:	f7ff ff00 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x00);
 80004a8:	2000      	movs	r0, #0
 80004aa:	f7ff fefd 	bl	80002a8 <LCD_WriteData>
	//LCD_WriteData(0x9F); // 159
	// Row address set (80픽셀)
	LCD_WriteData(0x4F); // 79
 80004ae:	204f      	movs	r0, #79	@ 0x4f
 80004b0:	f7ff fefa 	bl	80002a8 <LCD_WriteData>

	// Gamma correction
	LCD_WriteCommand(ST7735_GMCTRP1);
 80004b4:	20e0      	movs	r0, #224	@ 0xe0
 80004b6:	f7ff fed1 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0x0f);
 80004ba:	200f      	movs	r0, #15
 80004bc:	f7ff fef4 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x1a);
 80004c0:	201a      	movs	r0, #26
 80004c2:	f7ff fef1 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x0f);
 80004c6:	200f      	movs	r0, #15
 80004c8:	f7ff feee 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x18);
 80004cc:	2018      	movs	r0, #24
 80004ce:	f7ff feeb 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x2f);
 80004d2:	202f      	movs	r0, #47	@ 0x2f
 80004d4:	f7ff fee8 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x28);
 80004d8:	2028      	movs	r0, #40	@ 0x28
 80004da:	f7ff fee5 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x20);
 80004de:	2020      	movs	r0, #32
 80004e0:	f7ff fee2 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x22);
 80004e4:	2022      	movs	r0, #34	@ 0x22
 80004e6:	f7ff fedf 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x1f);
 80004ea:	201f      	movs	r0, #31
 80004ec:	f7ff fedc 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x1b);
 80004f0:	201b      	movs	r0, #27
 80004f2:	f7ff fed9 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x23);
 80004f6:	2023      	movs	r0, #35	@ 0x23
 80004f8:	f7ff fed6 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x37);
 80004fc:	2037      	movs	r0, #55	@ 0x37
 80004fe:	f7ff fed3 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x00);
 8000502:	2000      	movs	r0, #0
 8000504:	f7ff fed0 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x07);
 8000508:	2007      	movs	r0, #7
 800050a:	f7ff fecd 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x02);
 800050e:	2002      	movs	r0, #2
 8000510:	f7ff feca 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x10);
 8000514:	2010      	movs	r0, #16
 8000516:	f7ff fec7 	bl	80002a8 <LCD_WriteData>

	LCD_WriteCommand(ST7735_GMCTRN1);
 800051a:	20e1      	movs	r0, #225	@ 0xe1
 800051c:	f7ff fe9e 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0x0f);
 8000520:	200f      	movs	r0, #15
 8000522:	f7ff fec1 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x1b);
 8000526:	201b      	movs	r0, #27
 8000528:	f7ff febe 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x0f);
 800052c:	200f      	movs	r0, #15
 800052e:	f7ff febb 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x17);
 8000532:	2017      	movs	r0, #23
 8000534:	f7ff feb8 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x33);
 8000538:	2033      	movs	r0, #51	@ 0x33
 800053a:	f7ff feb5 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x2c);
 800053e:	202c      	movs	r0, #44	@ 0x2c
 8000540:	f7ff feb2 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x29);
 8000544:	2029      	movs	r0, #41	@ 0x29
 8000546:	f7ff feaf 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x2e);
 800054a:	202e      	movs	r0, #46	@ 0x2e
 800054c:	f7ff feac 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x30);
 8000550:	2030      	movs	r0, #48	@ 0x30
 8000552:	f7ff fea9 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x30);
 8000556:	2030      	movs	r0, #48	@ 0x30
 8000558:	f7ff fea6 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x39);
 800055c:	2039      	movs	r0, #57	@ 0x39
 800055e:	f7ff fea3 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x3f);
 8000562:	203f      	movs	r0, #63	@ 0x3f
 8000564:	f7ff fea0 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x00);
 8000568:	2000      	movs	r0, #0
 800056a:	f7ff fe9d 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x07);
 800056e:	2007      	movs	r0, #7
 8000570:	f7ff fe9a 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x03);
 8000574:	2003      	movs	r0, #3
 8000576:	f7ff fe97 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x10);
 800057a:	2010      	movs	r0, #16
 800057c:	f7ff fe94 	bl	80002a8 <LCD_WriteData>

	// Normal display on
	LCD_WriteCommand(ST7735_NORON);
 8000580:	2013      	movs	r0, #19
 8000582:	f7ff fe6b 	bl	800025c <LCD_WriteCommand>
	HAL_Delay(10);
 8000586:	200a      	movs	r0, #10
 8000588:	f000 fdde 	bl	8001148 <HAL_Delay>

	// Main screen turn on
	LCD_WriteCommand(ST7735_DISPON);
 800058c:	2029      	movs	r0, #41	@ 0x29
 800058e:	f7ff fe65 	bl	800025c <LCD_WriteCommand>
	HAL_Delay(100);
 8000592:	2064      	movs	r0, #100	@ 0x64
 8000594:	f000 fdd8 	bl	8001148 <HAL_Delay>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40010800 	.word	0x40010800

080005a0 <LCD_SetWindow>:

void LCD_SetWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4604      	mov	r4, r0
 80005a8:	4608      	mov	r0, r1
 80005aa:	4611      	mov	r1, r2
 80005ac:	461a      	mov	r2, r3
 80005ae:	4623      	mov	r3, r4
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	4603      	mov	r3, r0
 80005b4:	71bb      	strb	r3, [r7, #6]
 80005b6:	460b      	mov	r3, r1
 80005b8:	717b      	strb	r3, [r7, #5]
 80005ba:	4613      	mov	r3, r2
 80005bc:	713b      	strb	r3, [r7, #4]
	// 0.96" ST7735S LCD 오프셋 적용
	uint8_t x_offset = 0;  // X축 오프셋
 80005be:	2300      	movs	r3, #0
 80005c0:	73fb      	strb	r3, [r7, #15]
	uint8_t y_offset = 0;   // Y축 오프셋
 80005c2:	2300      	movs	r3, #0
 80005c4:	73bb      	strb	r3, [r7, #14]

	// Column address set (X축)
	LCD_WriteCommand(ST7735_CASET);
 80005c6:	202a      	movs	r0, #42	@ 0x2a
 80005c8:	f7ff fe48 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80005cc:	2000      	movs	r0, #0
 80005ce:	f7ff fe6b 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(x0 + x_offset);
 80005d2:	79fa      	ldrb	r2, [r7, #7]
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	4413      	add	r3, r2
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe64 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x00);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f7ff fe61 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(x1 + x_offset);
 80005e6:	797a      	ldrb	r2, [r7, #5]
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	4413      	add	r3, r2
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fe5a 	bl	80002a8 <LCD_WriteData>

	// Row address set (Y축)
	LCD_WriteCommand(ST7735_RASET);
 80005f4:	202b      	movs	r0, #43	@ 0x2b
 80005f6:	f7ff fe31 	bl	800025c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff fe54 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(y0 + y_offset);
 8000600:	79ba      	ldrb	r2, [r7, #6]
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	4413      	add	r3, r2
 8000606:	b2db      	uxtb	r3, r3
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fe4d 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(0x00);
 800060e:	2000      	movs	r0, #0
 8000610:	f7ff fe4a 	bl	80002a8 <LCD_WriteData>
	LCD_WriteData(y1 + y_offset);
 8000614:	793a      	ldrb	r2, [r7, #4]
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	4413      	add	r3, r2
 800061a:	b2db      	uxtb	r3, r3
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fe43 	bl	80002a8 <LCD_WriteData>

	// Write to RAM
	LCD_WriteCommand(ST7735_RAMWR);
 8000622:	202c      	movs	r0, #44	@ 0x2c
 8000624:	f7ff fe1a 	bl	800025c <LCD_WriteCommand>
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bd90      	pop	{r4, r7, pc}

08000630 <LCD_DrawPixel>:

void LCD_DrawPixel(uint8_t x, uint8_t y, uint16_t color) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
 800063a:	460b      	mov	r3, r1
 800063c:	71bb      	strb	r3, [r7, #6]
 800063e:	4613      	mov	r3, r2
 8000640:	80bb      	strh	r3, [r7, #4]
	if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b9f      	cmp	r3, #159	@ 0x9f
 8000646:	d80d      	bhi.n	8000664 <LCD_DrawPixel+0x34>
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	2b77      	cmp	r3, #119	@ 0x77
 800064c:	d80a      	bhi.n	8000664 <LCD_DrawPixel+0x34>
		return;

	LCD_SetWindow(x, y, x, y);
 800064e:	79bb      	ldrb	r3, [r7, #6]
 8000650:	79fa      	ldrb	r2, [r7, #7]
 8000652:	79b9      	ldrb	r1, [r7, #6]
 8000654:	79f8      	ldrb	r0, [r7, #7]
 8000656:	f7ff ffa3 	bl	80005a0 <LCD_SetWindow>
	LCD_WriteData16(color);
 800065a:	88bb      	ldrh	r3, [r7, #4]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff fe49 	bl	80002f4 <LCD_WriteData16>
 8000662:	e000      	b.n	8000666 <LCD_DrawPixel+0x36>
		return;
 8000664:	bf00      	nop
}
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <LCD_Fill>:

void LCD_Fill(uint16_t color) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	80fb      	strh	r3, [r7, #6]
	LCD_SetWindow(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 8000676:	2377      	movs	r3, #119	@ 0x77
 8000678:	229f      	movs	r2, #159	@ 0x9f
 800067a:	2100      	movs	r1, #0
 800067c:	2000      	movs	r0, #0
 800067e:	f7ff ff8f 	bl	80005a0 <LCD_SetWindow>

	LCD_CS_LOW();
 8000682:	2200      	movs	r2, #0
 8000684:	2140      	movs	r1, #64	@ 0x40
 8000686:	4815      	ldr	r0, [pc, #84]	@ (80006dc <LCD_Fill+0x70>)
 8000688:	f001 f82b 	bl	80016e2 <HAL_GPIO_WritePin>
	LCD_DC_HIGH();
 800068c:	2201      	movs	r2, #1
 800068e:	2140      	movs	r1, #64	@ 0x40
 8000690:	4813      	ldr	r0, [pc, #76]	@ (80006e0 <LCD_Fill+0x74>)
 8000692:	f001 f826 	bl	80016e2 <HAL_GPIO_WritePin>

	for (uint16_t i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 8000696:	2300      	movs	r3, #0
 8000698:	81fb      	strh	r3, [r7, #14]
 800069a:	e012      	b.n	80006c2 <LCD_Fill+0x56>
		uint8_t buffer[2];
		buffer[0] = (color >> 8) & 0xFF;
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	0a1b      	lsrs	r3, r3, #8
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	733b      	strb	r3, [r7, #12]
		buffer[1] = color & 0xFF;
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&hspi1, buffer, 2, HAL_MAX_DELAY);
 80006ac:	f107 010c 	add.w	r1, r7, #12
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	2202      	movs	r2, #2
 80006b6:	480b      	ldr	r0, [pc, #44]	@ (80006e4 <LCD_Fill+0x78>)
 80006b8:	f001 fcd8 	bl	800206c <HAL_SPI_Transmit>
	for (uint16_t i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 80006bc:	89fb      	ldrh	r3, [r7, #14]
 80006be:	3301      	adds	r3, #1
 80006c0:	81fb      	strh	r3, [r7, #14]
 80006c2:	89fb      	ldrh	r3, [r7, #14]
 80006c4:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 80006c8:	d3e8      	bcc.n	800069c <LCD_Fill+0x30>
	}

	LCD_CS_HIGH();
 80006ca:	2201      	movs	r2, #1
 80006cc:	2140      	movs	r1, #64	@ 0x40
 80006ce:	4803      	ldr	r0, [pc, #12]	@ (80006dc <LCD_Fill+0x70>)
 80006d0:	f001 f807 	bl	80016e2 <HAL_GPIO_WritePin>
}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40010c00 	.word	0x40010c00
 80006e0:	40010800 	.word	0x40010800
 80006e4:	20000084 	.word	0x20000084

080006e8 <LCD_DrawChar>:

void LCD_DrawChar(uint8_t x, uint8_t y, char ch, uint16_t color,
		uint16_t bg_color) {
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b087      	sub	sp, #28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4604      	mov	r4, r0
 80006f0:	4608      	mov	r0, r1
 80006f2:	4611      	mov	r1, r2
 80006f4:	461a      	mov	r2, r3
 80006f6:	4623      	mov	r3, r4
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	4603      	mov	r3, r0
 80006fc:	71bb      	strb	r3, [r7, #6]
 80006fe:	460b      	mov	r3, r1
 8000700:	717b      	strb	r3, [r7, #5]
 8000702:	4613      	mov	r3, r2
 8000704:	807b      	strh	r3, [r7, #2]
	if (ch < 32 || ch > 126)
 8000706:	797b      	ldrb	r3, [r7, #5]
 8000708:	2b1f      	cmp	r3, #31
 800070a:	d902      	bls.n	8000712 <LCD_DrawChar+0x2a>
 800070c:	797b      	ldrb	r3, [r7, #5]
 800070e:	2b7e      	cmp	r3, #126	@ 0x7e
 8000710:	d901      	bls.n	8000716 <LCD_DrawChar+0x2e>
		ch = 32; // Replace invalid chars with space
 8000712:	2320      	movs	r3, #32
 8000714:	717b      	strb	r3, [r7, #5]

	const uint8_t *font_char = font8x8[ch - 32];
 8000716:	797b      	ldrb	r3, [r7, #5]
 8000718:	3b20      	subs	r3, #32
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	4a1f      	ldr	r2, [pc, #124]	@ (800079c <LCD_DrawChar+0xb4>)
 800071e:	4413      	add	r3, r2
 8000720:	613b      	str	r3, [r7, #16]

	for (uint8_t i = 0; i < 8; i++) {
 8000722:	2300      	movs	r3, #0
 8000724:	75fb      	strb	r3, [r7, #23]
 8000726:	e031      	b.n	800078c <LCD_DrawChar+0xa4>
		uint8_t line = font_char[i];
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	4413      	add	r3, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 0; j < 8; j++) {
 8000732:	2300      	movs	r3, #0
 8000734:	75bb      	strb	r3, [r7, #22]
 8000736:	e023      	b.n	8000780 <LCD_DrawChar+0x98>
			//if(line & (0x80 >> j)) {
			if (line & (0x01 << j)) { // LSB부터 읽기
 8000738:	7bfa      	ldrb	r2, [r7, #15]
 800073a:	7dbb      	ldrb	r3, [r7, #22]
 800073c:	fa42 f303 	asr.w	r3, r2, r3
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00c      	beq.n	8000762 <LCD_DrawChar+0x7a>
				LCD_DrawPixel(x + j, y + i, color);
 8000748:	79fa      	ldrb	r2, [r7, #7]
 800074a:	7dbb      	ldrb	r3, [r7, #22]
 800074c:	4413      	add	r3, r2
 800074e:	b2d8      	uxtb	r0, r3
 8000750:	79ba      	ldrb	r2, [r7, #6]
 8000752:	7dfb      	ldrb	r3, [r7, #23]
 8000754:	4413      	add	r3, r2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	887a      	ldrh	r2, [r7, #2]
 800075a:	4619      	mov	r1, r3
 800075c:	f7ff ff68 	bl	8000630 <LCD_DrawPixel>
 8000760:	e00b      	b.n	800077a <LCD_DrawChar+0x92>
			} else {
				LCD_DrawPixel(x + j, y + i, bg_color);
 8000762:	79fa      	ldrb	r2, [r7, #7]
 8000764:	7dbb      	ldrb	r3, [r7, #22]
 8000766:	4413      	add	r3, r2
 8000768:	b2d8      	uxtb	r0, r3
 800076a:	79ba      	ldrb	r2, [r7, #6]
 800076c:	7dfb      	ldrb	r3, [r7, #23]
 800076e:	4413      	add	r3, r2
 8000770:	b2db      	uxtb	r3, r3
 8000772:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000774:	4619      	mov	r1, r3
 8000776:	f7ff ff5b 	bl	8000630 <LCD_DrawPixel>
		for (uint8_t j = 0; j < 8; j++) {
 800077a:	7dbb      	ldrb	r3, [r7, #22]
 800077c:	3301      	adds	r3, #1
 800077e:	75bb      	strb	r3, [r7, #22]
 8000780:	7dbb      	ldrb	r3, [r7, #22]
 8000782:	2b07      	cmp	r3, #7
 8000784:	d9d8      	bls.n	8000738 <LCD_DrawChar+0x50>
	for (uint8_t i = 0; i < 8; i++) {
 8000786:	7dfb      	ldrb	r3, [r7, #23]
 8000788:	3301      	adds	r3, #1
 800078a:	75fb      	strb	r3, [r7, #23]
 800078c:	7dfb      	ldrb	r3, [r7, #23]
 800078e:	2b07      	cmp	r3, #7
 8000790:	d9ca      	bls.n	8000728 <LCD_DrawChar+0x40>
			}
		}
	}
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	371c      	adds	r7, #28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd90      	pop	{r4, r7, pc}
 800079c:	080038fc 	.word	0x080038fc

080007a0 <LCD_DrawString>:

void LCD_DrawString(uint8_t x, uint8_t y, const char *str, uint16_t color,
		uint16_t bg_color) {
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b087      	sub	sp, #28
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	603a      	str	r2, [r7, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
 80007ae:	460b      	mov	r3, r1
 80007b0:	71bb      	strb	r3, [r7, #6]
 80007b2:	4613      	mov	r3, r2
 80007b4:	80bb      	strh	r3, [r7, #4]
	uint8_t orig_x = x;
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	73fb      	strb	r3, [r7, #15]

	while (*str) {
 80007ba:	e02b      	b.n	8000814 <LCD_DrawString+0x74>
		if (*str == '\n') {
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b0a      	cmp	r3, #10
 80007c2:	d105      	bne.n	80007d0 <LCD_DrawString+0x30>
			y += 8;
 80007c4:	79bb      	ldrb	r3, [r7, #6]
 80007c6:	3308      	adds	r3, #8
 80007c8:	71bb      	strb	r3, [r7, #6]
			x = orig_x;
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	e01e      	b.n	800080e <LCD_DrawString+0x6e>
		} else if (*str == '\r') {
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b0d      	cmp	r3, #13
 80007d6:	d102      	bne.n	80007de <LCD_DrawString+0x3e>
			x = orig_x;
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	71fb      	strb	r3, [r7, #7]
 80007dc:	e017      	b.n	800080e <LCD_DrawString+0x6e>
		} else {
			if (x + 8 > LCD_WIDTH) {
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b98      	cmp	r3, #152	@ 0x98
 80007e2:	d904      	bls.n	80007ee <LCD_DrawString+0x4e>
				x = orig_x;
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	71fb      	strb	r3, [r7, #7]
				y += 8;
 80007e8:	79bb      	ldrb	r3, [r7, #6]
 80007ea:	3308      	adds	r3, #8
 80007ec:	71bb      	strb	r3, [r7, #6]
			}
			if (y + 8 > LCD_HEIGHT) {
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	2b70      	cmp	r3, #112	@ 0x70
 80007f2:	d814      	bhi.n	800081e <LCD_DrawString+0x7e>
				break;
			}

			LCD_DrawChar(x, y, *str, color, bg_color);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	781a      	ldrb	r2, [r3, #0]
 80007f8:	88bc      	ldrh	r4, [r7, #4]
 80007fa:	79b9      	ldrb	r1, [r7, #6]
 80007fc:	79f8      	ldrb	r0, [r7, #7]
 80007fe:	8c3b      	ldrh	r3, [r7, #32]
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	4623      	mov	r3, r4
 8000804:	f7ff ff70 	bl	80006e8 <LCD_DrawChar>
			x += 8;
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	3308      	adds	r3, #8
 800080c:	71fb      	strb	r3, [r7, #7]
		}
		str++;
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1cf      	bne.n	80007bc <LCD_DrawString+0x1c>
	}
}
 800081c:	e000      	b.n	8000820 <LCD_DrawString+0x80>
				break;
 800081e:	bf00      	nop
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	bd90      	pop	{r4, r7, pc}

08000828 <LCD_Page1.0>:
  /* USER CODE BEGIN 2 */
	// Initialize LCD
	LCD_Init();

	// Clear screen with black background
	void LCD_Page1(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af02      	add	r7, sp, #8
 800082e:	f8c7 c004 	str.w	ip, [r7, #4]
		LCD_Fill(BLACK);
 8000832:	2000      	movs	r0, #0
 8000834:	f7ff ff1a 	bl	800066c <LCD_Fill>

		LCD_DrawString(10, 30, "Hello World!", WHITE, BLACK);
 8000838:	2300      	movs	r3, #0
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000840:	4a11      	ldr	r2, [pc, #68]	@ (8000888 <LCD_Page1.0+0x60>)
 8000842:	211e      	movs	r1, #30
 8000844:	200a      	movs	r0, #10
 8000846:	f7ff ffab 	bl	80007a0 <LCD_DrawString>
		LCD_DrawString(10, 45, "STM32F103", GREEN, BLACK);
 800084a:	2300      	movs	r3, #0
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000852:	4a0e      	ldr	r2, [pc, #56]	@ (800088c <LCD_Page1.0+0x64>)
 8000854:	212d      	movs	r1, #45	@ 0x2d
 8000856:	200a      	movs	r0, #10
 8000858:	f7ff ffa2 	bl	80007a0 <LCD_DrawString>
		LCD_DrawString(10, 60, "ST7735S LCD", CYAN, BLACK);
 800085c:	2300      	movs	r3, #0
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000864:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <LCD_Page1.0+0x68>)
 8000866:	213c      	movs	r1, #60	@ 0x3c
 8000868:	200a      	movs	r0, #10
 800086a:	f7ff ff99 	bl	80007a0 <LCD_DrawString>
		LCD_DrawString(10, 75, "160x80", YELLOW, BLACK);
 800086e:	2300      	movs	r3, #0
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000876:	4a07      	ldr	r2, [pc, #28]	@ (8000894 <LCD_Page1.0+0x6c>)
 8000878:	214b      	movs	r1, #75	@ 0x4b
 800087a:	200a      	movs	r0, #10
 800087c:	f7ff ff90 	bl	80007a0 <LCD_DrawString>
	}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	080037f8 	.word	0x080037f8
 800088c:	08003808 	.word	0x08003808
 8000890:	08003814 	.word	0x08003814
 8000894:	08003820 	.word	0x08003820

08000898 <main>:
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
int main(void)
 800089e:	f107 0318 	add.w	r3, r7, #24
 80008a2:	607b      	str	r3, [r7, #4]
	int32_t last_encoder_count = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  HAL_Init();
 80008a8:	f000 fbec 	bl	8001084 <HAL_Init>
  SystemClock_Config();
 80008ac:	f000 f8e2 	bl	8000a74 <SystemClock_Config>
  MX_GPIO_Init();
 80008b0:	f000 f984 	bl	8000bbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008b4:	f000 f958 	bl	8000b68 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80008b8:	f000 f91e 	bl	8000af8 <MX_SPI1_Init>
	LCD_Init();
 80008bc:	f7ff fd48 	bl	8000350 <LCD_Init>
			LCD_DrawString(10, 30, "I'm Major Shareholder ", CYAN, BLACK);
			LCD_DrawString(10, 45, "OF SAMSUNG", CYAN, WHITE);
			LCD_DrawString(10, 75, "200,000 Won Per Share ", CYAN, WHITE);
			LCD_DrawString(10, 90, "Will Come IS Soon", CYAN, BLACK);
		}
	int i=0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		LCD_Page1();
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	469c      	mov	ip, r3
 80008c8:	f7ff ffae 	bl	8000828 <LCD_Page1.0>
		HAL_Delay(1000);
 80008cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008d0:	f000 fc3a 	bl	8001148 <HAL_Delay>
		LCD_Page2();
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	469c      	mov	ip, r3
 80008d8:	f000 f84e 	bl	8000978 <LCD_Page2.1>
		HAL_Delay(1000);
 80008dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008e0:	f000 fc32 	bl	8001148 <HAL_Delay>
		LCD_Page3();
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	469c      	mov	ip, r3
 80008e8:	f000 f868 	bl	80009bc <LCD_Page3.2>
		HAL_Delay(1000);
 80008ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008f0:	f000 fc2a 	bl	8001148 <HAL_Delay>
		LCD_Page4();
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	469c      	mov	ip, r3
 80008f8:	f000 f882 	bl	8000a00 <LCD_Page4.3>
		HAL_Delay(1000);
 80008fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000900:	f000 fc22 	bl	8001148 <HAL_Delay>
		for(i=0; i<=10; i++)
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	e00c      	b.n	8000924 <main+0x8c>
		{
		LCD_Fill(BLACK);
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff feae 	bl	800066c <LCD_Fill>
		LCD_Page4();
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	469c      	mov	ip, r3
 8000914:	f000 f874 	bl	8000a00 <LCD_Page4.3>
		HAL_Delay(100);
 8000918:	2064      	movs	r0, #100	@ 0x64
 800091a:	f000 fc15 	bl	8001148 <HAL_Delay>
		for(i=0; i<=10; i++)
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	3301      	adds	r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	2b0a      	cmp	r3, #10
 8000928:	ddef      	ble.n	800090a <main+0x72>
		}

		 // 인코더 값 변화 감지 및 출력
			    if (encoder_count != last_encoder_count) {
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <main+0xd0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	429a      	cmp	r2, r3
 8000932:	d014      	beq.n	800095e <main+0xc6>
			      printf("인코더 카운트: %ld", encoder_count);
 8000934:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <main+0xd0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	480c      	ldr	r0, [pc, #48]	@ (800096c <main+0xd4>)
 800093c:	f002 f87a 	bl	8002a34 <iprintf>

			      if (encoder_count > last_encoder_count) {
 8000940:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <main+0xd0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	429a      	cmp	r2, r3
 8000948:	da03      	bge.n	8000952 <main+0xba>
			        printf(" (시계방향)\r\n");
 800094a:	4809      	ldr	r0, [pc, #36]	@ (8000970 <main+0xd8>)
 800094c:	f002 f8da 	bl	8002b04 <puts>
 8000950:	e002      	b.n	8000958 <main+0xc0>
			      } else {
			        printf(" (반시계방향)\r\n");
 8000952:	4808      	ldr	r0, [pc, #32]	@ (8000974 <main+0xdc>)
 8000954:	f002 f8d6 	bl	8002b04 <puts>
			      }

			      last_encoder_count = encoder_count;
 8000958:	4b03      	ldr	r3, [pc, #12]	@ (8000968 <main+0xd0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	60fb      	str	r3, [r7, #12]
			    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_Delay(1000);
 800095e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000962:	f000 fbf1 	bl	8001148 <HAL_Delay>
		LCD_Page1();
 8000966:	e7ad      	b.n	80008c4 <main+0x2c>
 8000968:	20000124 	.word	0x20000124
 800096c:	08003828 	.word	0x08003828
 8000970:	08003844 	.word	0x08003844
 8000974:	08003858 	.word	0x08003858

08000978 <LCD_Page2.1>:
	void LCD_Page2(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af02      	add	r7, sp, #8
 800097e:	f8c7 c004 	str.w	ip, [r7, #4]
		LCD_Fill(BLACK);
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff fe72 	bl	800066c <LCD_Fill>
		LCD_DrawString(10, 30, "Hello, Every One!", WHITE, BLACK);
 8000988:	2300      	movs	r3, #0
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000990:	4a08      	ldr	r2, [pc, #32]	@ (80009b4 <LCD_Page2.1+0x3c>)
 8000992:	211e      	movs	r1, #30
 8000994:	200a      	movs	r0, #10
 8000996:	f7ff ff03 	bl	80007a0 <LCD_DrawString>
		LCD_DrawString(10, 45, "Have A Nice day!", GREEN, BLACK);
 800099a:	2300      	movs	r3, #0
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80009a2:	4a05      	ldr	r2, [pc, #20]	@ (80009b8 <LCD_Page2.1+0x40>)
 80009a4:	212d      	movs	r1, #45	@ 0x2d
 80009a6:	200a      	movs	r0, #10
 80009a8:	f7ff fefa 	bl	80007a0 <LCD_DrawString>
	}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	0800386c 	.word	0x0800386c
 80009b8:	08003880 	.word	0x08003880

080009bc <LCD_Page3.2>:
	void LCD_Page3(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	f8c7 c004 	str.w	ip, [r7, #4]
		LCD_Fill(BLACK);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff fe50 	bl	800066c <LCD_Fill>
		LCD_DrawString(10, 60, "See You Later!", MAGENTA, BLACK);
 80009cc:	2300      	movs	r3, #0
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80009d4:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <LCD_Page3.2+0x3c>)
 80009d6:	213c      	movs	r1, #60	@ 0x3c
 80009d8:	200a      	movs	r0, #10
 80009da:	f7ff fee1 	bl	80007a0 <LCD_DrawString>
		LCD_DrawString(10, 75, "Hungry!", CYAN, BLACK);
 80009de:	2300      	movs	r3, #0
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80009e6:	4a05      	ldr	r2, [pc, #20]	@ (80009fc <LCD_Page3.2+0x40>)
 80009e8:	214b      	movs	r1, #75	@ 0x4b
 80009ea:	200a      	movs	r0, #10
 80009ec:	f7ff fed8 	bl	80007a0 <LCD_DrawString>
	}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	08003894 	.word	0x08003894
 80009fc:	080038a4 	.word	0x080038a4

08000a00 <LCD_Page4.3>:
	void LCD_Page4(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af02      	add	r7, sp, #8
 8000a06:	f8c7 c004 	str.w	ip, [r7, #4]
			LCD_Fill(BLACK);
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff fe2e 	bl	800066c <LCD_Fill>
			LCD_DrawString(10, 30, "I'm Major Shareholder ", CYAN, BLACK);
 8000a10:	2300      	movs	r3, #0
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a18:	4a12      	ldr	r2, [pc, #72]	@ (8000a64 <LCD_Page4.3+0x64>)
 8000a1a:	211e      	movs	r1, #30
 8000a1c:	200a      	movs	r0, #10
 8000a1e:	f7ff febf 	bl	80007a0 <LCD_DrawString>
			LCD_DrawString(10, 45, "OF SAMSUNG", CYAN, WHITE);
 8000a22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a68 <LCD_Page4.3+0x68>)
 8000a2e:	212d      	movs	r1, #45	@ 0x2d
 8000a30:	200a      	movs	r0, #10
 8000a32:	f7ff feb5 	bl	80007a0 <LCD_DrawString>
			LCD_DrawString(10, 75, "200,000 Won Per Share ", CYAN, WHITE);
 8000a36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a40:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <LCD_Page4.3+0x6c>)
 8000a42:	214b      	movs	r1, #75	@ 0x4b
 8000a44:	200a      	movs	r0, #10
 8000a46:	f7ff feab 	bl	80007a0 <LCD_DrawString>
			LCD_DrawString(10, 90, "Will Come IS Soon", CYAN, BLACK);
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a52:	4a07      	ldr	r2, [pc, #28]	@ (8000a70 <LCD_Page4.3+0x70>)
 8000a54:	215a      	movs	r1, #90	@ 0x5a
 8000a56:	200a      	movs	r0, #10
 8000a58:	f7ff fea2 	bl	80007a0 <LCD_DrawString>
		}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	080038ac 	.word	0x080038ac
 8000a68:	080038c4 	.word	0x080038c4
 8000a6c:	080038d0 	.word	0x080038d0
 8000a70:	080038e8 	.word	0x080038e8

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b090      	sub	sp, #64	@ 0x40
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0318 	add.w	r3, r7, #24
 8000a7e:	2228      	movs	r2, #40	@ 0x28
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 f91e 	bl	8002cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9e:	2310      	movs	r3, #16
 8000aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000aaa:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 fe45 	bl	8001744 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ac0:	f000 f91e 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2102      	movs	r1, #2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 f8b2 	bl	8001c48 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000aea:	f000 f909 	bl	8000d00 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3740      	adds	r7, #64	@ 0x40
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000afc:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <MX_SPI1_Init+0x68>)
 8000afe:	4a19      	ldr	r2, [pc, #100]	@ (8000b64 <MX_SPI1_Init+0x6c>)
 8000b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <MX_SPI1_Init+0x68>)
 8000b04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <MX_SPI1_Init+0x68>)
 8000b0c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b10:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b12:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <MX_SPI1_Init+0x68>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_SPI1_Init+0x68>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <MX_SPI1_Init+0x68>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b24:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <MX_SPI1_Init+0x68>)
 8000b26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <MX_SPI1_Init+0x68>)
 8000b2e:	2208      	movs	r2, #8
 8000b30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <MX_SPI1_Init+0x68>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b38:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <MX_SPI1_Init+0x68>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <MX_SPI1_Init+0x68>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <MX_SPI1_Init+0x68>)
 8000b46:	220a      	movs	r2, #10
 8000b48:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <MX_SPI1_Init+0x68>)
 8000b4c:	f001 fa0a 	bl	8001f64 <HAL_SPI_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000b56:	f000 f8d3 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000084 	.word	0x20000084
 8000b64:	40013000 	.word	0x40013000

08000b68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	@ (8000bb8 <MX_USART2_UART_Init+0x50>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b72:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	f001 fc61 	bl	8002466 <HAL_UART_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000baa:	f000 f8a9 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000dc 	.word	0x200000dc
 8000bb8:	40004400 	.word	0x40004400

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 0310 	add.w	r3, r7, #16
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd0:	4b45      	ldr	r3, [pc, #276]	@ (8000ce8 <MX_GPIO_Init+0x12c>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a44      	ldr	r2, [pc, #272]	@ (8000ce8 <MX_GPIO_Init+0x12c>)
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b42      	ldr	r3, [pc, #264]	@ (8000ce8 <MX_GPIO_Init+0x12c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0310 	and.w	r3, r3, #16
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce8 <MX_GPIO_Init+0x12c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a3e      	ldr	r2, [pc, #248]	@ (8000ce8 <MX_GPIO_Init+0x12c>)
 8000bee:	f043 0320 	orr.w	r3, r3, #32
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ce8 <MX_GPIO_Init+0x12c>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0320 	and.w	r3, r3, #32
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b39      	ldr	r3, [pc, #228]	@ (8000ce8 <MX_GPIO_Init+0x12c>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a38      	ldr	r2, [pc, #224]	@ (8000ce8 <MX_GPIO_Init+0x12c>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b36      	ldr	r3, [pc, #216]	@ (8000ce8 <MX_GPIO_Init+0x12c>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	4b33      	ldr	r3, [pc, #204]	@ (8000ce8 <MX_GPIO_Init+0x12c>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a32      	ldr	r2, [pc, #200]	@ (8000ce8 <MX_GPIO_Init+0x12c>)
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b30      	ldr	r3, [pc, #192]	@ (8000ce8 <MX_GPIO_Init+0x12c>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0308 	and.w	r3, r3, #8
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RES_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2142      	movs	r1, #66	@ 0x42
 8000c34:	482d      	ldr	r0, [pc, #180]	@ (8000cec <MX_GPIO_Init+0x130>)
 8000c36:	f000 fd54 	bl	80016e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2140      	movs	r1, #64	@ 0x40
 8000c3e:	482c      	ldr	r0, [pc, #176]	@ (8000cf0 <MX_GPIO_Init+0x134>)
 8000c40:	f000 fd4f 	bl	80016e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <MX_GPIO_Init+0x138>)
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	4619      	mov	r1, r3
 8000c58:	4827      	ldr	r0, [pc, #156]	@ (8000cf8 <MX_GPIO_Init+0x13c>)
 8000c5a:	f000 fba7 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin_Pin DT_Pin_Pin */
  GPIO_InitStruct.Pin = CLK_Pin_Pin|DT_Pin_Pin;
 8000c5e:	2311      	movs	r3, #17
 8000c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c62:	4b26      	ldr	r3, [pc, #152]	@ (8000cfc <MX_GPIO_Init+0x140>)
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	4619      	mov	r1, r3
 8000c70:	481e      	ldr	r0, [pc, #120]	@ (8000cec <MX_GPIO_Init+0x130>)
 8000c72:	f000 fb9b 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RES_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LCD_DC_Pin;
 8000c76:	2342      	movs	r3, #66	@ 0x42
 8000c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4817      	ldr	r0, [pc, #92]	@ (8000cec <MX_GPIO_Init+0x130>)
 8000c8e:	f000 fb8d 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000c92:	2340      	movs	r3, #64	@ 0x40
 8000c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0310 	add.w	r3, r7, #16
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4811      	ldr	r0, [pc, #68]	@ (8000cf0 <MX_GPIO_Init+0x134>)
 8000caa:	f000 fb7f 	bl	80013ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	2006      	movs	r0, #6
 8000cb4:	f000 fb43 	bl	800133e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cb8:	2006      	movs	r0, #6
 8000cba:	f000 fb5c 	bl	8001376 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	200a      	movs	r0, #10
 8000cc4:	f000 fb3b 	bl	800133e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f000 fb54 	bl	8001376 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	2028      	movs	r0, #40	@ 0x28
 8000cd4:	f000 fb33 	bl	800133e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cd8:	2028      	movs	r0, #40	@ 0x28
 8000cda:	f000 fb4c 	bl	8001376 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cde:	bf00      	nop
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010800 	.word	0x40010800
 8000cf0:	40010c00 	.word	0x40010c00
 8000cf4:	10110000 	.word	0x10110000
 8000cf8:	40011000 	.word	0x40011000
 8000cfc:	10310000 	.word	0x10310000

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <Error_Handler+0x8>

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <HAL_MspInit+0x5c>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	4a14      	ldr	r2, [pc, #80]	@ (8000d68 <HAL_MspInit+0x5c>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6193      	str	r3, [r2, #24]
 8000d1e:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <HAL_MspInit+0x5c>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <HAL_MspInit+0x5c>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d68 <HAL_MspInit+0x5c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d34:	61d3      	str	r3, [r2, #28]
 8000d36:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <HAL_MspInit+0x5c>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_MspInit+0x60>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <HAL_MspInit+0x60>)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40010000 	.word	0x40010000

08000d70 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a15      	ldr	r2, [pc, #84]	@ (8000de0 <HAL_SPI_MspInit+0x70>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d123      	bne.n	8000dd8 <HAL_SPI_MspInit+0x68>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <HAL_SPI_MspInit+0x74>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a13      	ldr	r2, [pc, #76]	@ (8000de4 <HAL_SPI_MspInit+0x74>)
 8000d96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <HAL_SPI_MspInit+0x74>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <HAL_SPI_MspInit+0x74>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <HAL_SPI_MspInit+0x74>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <HAL_SPI_MspInit+0x74>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dc0:	23a0      	movs	r3, #160	@ 0xa0
 8000dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <HAL_SPI_MspInit+0x78>)
 8000dd4:	f000 faea 	bl	80013ac <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40013000 	.word	0x40013000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010800 	.word	0x40010800

08000dec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a15      	ldr	r2, [pc, #84]	@ (8000e5c <HAL_UART_MspInit+0x70>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d123      	bne.n	8000e54 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0c:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <HAL_UART_MspInit+0x74>)
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	4a13      	ldr	r2, [pc, #76]	@ (8000e60 <HAL_UART_MspInit+0x74>)
 8000e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e16:	61d3      	str	r3, [r2, #28]
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <HAL_UART_MspInit+0x74>)
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <HAL_UART_MspInit+0x74>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <HAL_UART_MspInit+0x74>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <HAL_UART_MspInit+0x74>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <HAL_UART_MspInit+0x78>)
 8000e50:	f000 faac 	bl	80013ac <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e54:	bf00      	nop
 8000e56:	3720      	adds	r7, #32
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40004400 	.word	0x40004400
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010800 	.word	0x40010800

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <NMI_Handler+0x4>

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <MemManage_Handler+0x4>

08000e80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb8:	f000 f92a 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CLK_Pin_Pin);
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f000 fc25 	bl	8001714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DT_Pin_Pin);
 8000ed2:	2010      	movs	r0, #16
 8000ed4:	f000 fc1e 	bl	8001714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ee0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ee4:	f000 fc16 	bl	8001714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	e00a      	b.n	8000f14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000efe:	f3af 8000 	nop.w
 8000f02:	4601      	mov	r1, r0
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	60ba      	str	r2, [r7, #8]
 8000f0a:	b2ca      	uxtb	r2, r1
 8000f0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbf0      	blt.n	8000efe <_read+0x12>
  }

  return len;
 8000f1c:	687b      	ldr	r3, [r7, #4]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e009      	b.n	8000f4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff f903 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dbf1      	blt.n	8000f38 <_write+0x12>
  }
  return len;
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_close>:

int _close(int file)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f84:	605a      	str	r2, [r3, #4]
  return 0;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <_isatty>:

int _isatty(int file)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b085      	sub	sp, #20
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
	...

08000fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc8:	4a14      	ldr	r2, [pc, #80]	@ (800101c <_sbrk+0x5c>)
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <_sbrk+0x60>)
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd4:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d102      	bne.n	8000fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <_sbrk+0x64>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	@ (8001028 <_sbrk+0x68>)
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe2:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d207      	bcs.n	8001000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff0:	f001 feb6 	bl	8002d60 <__errno>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	e009      	b.n	8001014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001000:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001006:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	4a05      	ldr	r2, [pc, #20]	@ (8001024 <_sbrk+0x64>)
 8001010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20005000 	.word	0x20005000
 8001020:	00000400 	.word	0x00000400
 8001024:	20000130 	.word	0x20000130
 8001028:	20000288 	.word	0x20000288

0800102c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001038:	f7ff fff8 	bl	800102c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800103c:	480b      	ldr	r0, [pc, #44]	@ (800106c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800103e:	490c      	ldr	r1, [pc, #48]	@ (8001070 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001040:	4a0c      	ldr	r2, [pc, #48]	@ (8001074 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a09      	ldr	r2, [pc, #36]	@ (8001078 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001054:	4c09      	ldr	r4, [pc, #36]	@ (800107c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001062:	f001 fe83 	bl	8002d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001066:	f7ff fc17 	bl	8000898 <main>
  bx lr
 800106a:	4770      	bx	lr
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001074:	08003c5c 	.word	0x08003c5c
  ldr r2, =_sbss
 8001078:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800107c:	20000284 	.word	0x20000284

08001080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_2_IRQHandler>
	...

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <HAL_Init+0x28>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a07      	ldr	r2, [pc, #28]	@ (80010ac <HAL_Init+0x28>)
 800108e:	f043 0310 	orr.w	r3, r3, #16
 8001092:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 f947 	bl	8001328 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109a:	2000      	movs	r0, #0
 800109c:	f000 f808 	bl	80010b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a0:	f7ff fe34 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40022000 	.word	0x40022000

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_InitTick+0x54>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <HAL_InitTick+0x58>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f95f 	bl	8001392 <HAL_SYSTICK_Config>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e00e      	b.n	80010fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d80a      	bhi.n	80010fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 f927 	bl	800133e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4a06      	ldr	r2, [pc, #24]	@ (800110c <HAL_InitTick+0x5c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000000 	.word	0x20000000
 8001108:	20000008 	.word	0x20000008
 800110c:	20000004 	.word	0x20000004

08001110 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <HAL_IncTick+0x1c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <HAL_IncTick+0x20>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a03      	ldr	r2, [pc, #12]	@ (8001130 <HAL_IncTick+0x20>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	20000008 	.word	0x20000008
 8001130:	20000134 	.word	0x20000134

08001134 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b02      	ldr	r3, [pc, #8]	@ (8001144 <HAL_GetTick+0x10>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	20000134 	.word	0x20000134

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff fff0 	bl	8001134 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffe0 	bl	8001134 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4906      	ldr	r1, [pc, #24]	@ (8001228 <__NVIC_EnableIRQ+0x34>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	@ (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	@ (800127c <__NVIC_SetPriority+0x50>)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	@ 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	@ 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f4:	d301      	bcc.n	80012fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00f      	b.n	800131a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <SysTick_Config+0x40>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001302:	210f      	movs	r1, #15
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f7ff ff90 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <SysTick_Config+0x40>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001312:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <SysTick_Config+0x40>)
 8001314:	2207      	movs	r2, #7
 8001316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	e000e010 	.word	0xe000e010

08001328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff2d 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff42 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff90 	bl	8001280 <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5f 	bl	800122c <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff35 	bl	80011f4 <__NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffa2 	bl	80012e4 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b08b      	sub	sp, #44	@ 0x2c
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013be:	e169      	b.n	8001694 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013c0:	2201      	movs	r2, #1
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	429a      	cmp	r2, r3
 80013da:	f040 8158 	bne.w	800168e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	4a9a      	ldr	r2, [pc, #616]	@ (800164c <HAL_GPIO_Init+0x2a0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d05e      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
 80013e8:	4a98      	ldr	r2, [pc, #608]	@ (800164c <HAL_GPIO_Init+0x2a0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d875      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 80013ee:	4a98      	ldr	r2, [pc, #608]	@ (8001650 <HAL_GPIO_Init+0x2a4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d058      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
 80013f4:	4a96      	ldr	r2, [pc, #600]	@ (8001650 <HAL_GPIO_Init+0x2a4>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d86f      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 80013fa:	4a96      	ldr	r2, [pc, #600]	@ (8001654 <HAL_GPIO_Init+0x2a8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d052      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
 8001400:	4a94      	ldr	r2, [pc, #592]	@ (8001654 <HAL_GPIO_Init+0x2a8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d869      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 8001406:	4a94      	ldr	r2, [pc, #592]	@ (8001658 <HAL_GPIO_Init+0x2ac>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d04c      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
 800140c:	4a92      	ldr	r2, [pc, #584]	@ (8001658 <HAL_GPIO_Init+0x2ac>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d863      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 8001412:	4a92      	ldr	r2, [pc, #584]	@ (800165c <HAL_GPIO_Init+0x2b0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d046      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
 8001418:	4a90      	ldr	r2, [pc, #576]	@ (800165c <HAL_GPIO_Init+0x2b0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d85d      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 800141e:	2b12      	cmp	r3, #18
 8001420:	d82a      	bhi.n	8001478 <HAL_GPIO_Init+0xcc>
 8001422:	2b12      	cmp	r3, #18
 8001424:	d859      	bhi.n	80014da <HAL_GPIO_Init+0x12e>
 8001426:	a201      	add	r2, pc, #4	@ (adr r2, 800142c <HAL_GPIO_Init+0x80>)
 8001428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142c:	080014a7 	.word	0x080014a7
 8001430:	08001481 	.word	0x08001481
 8001434:	08001493 	.word	0x08001493
 8001438:	080014d5 	.word	0x080014d5
 800143c:	080014db 	.word	0x080014db
 8001440:	080014db 	.word	0x080014db
 8001444:	080014db 	.word	0x080014db
 8001448:	080014db 	.word	0x080014db
 800144c:	080014db 	.word	0x080014db
 8001450:	080014db 	.word	0x080014db
 8001454:	080014db 	.word	0x080014db
 8001458:	080014db 	.word	0x080014db
 800145c:	080014db 	.word	0x080014db
 8001460:	080014db 	.word	0x080014db
 8001464:	080014db 	.word	0x080014db
 8001468:	080014db 	.word	0x080014db
 800146c:	080014db 	.word	0x080014db
 8001470:	08001489 	.word	0x08001489
 8001474:	0800149d 	.word	0x0800149d
 8001478:	4a79      	ldr	r2, [pc, #484]	@ (8001660 <HAL_GPIO_Init+0x2b4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d013      	beq.n	80014a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800147e:	e02c      	b.n	80014da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	623b      	str	r3, [r7, #32]
          break;
 8001486:	e029      	b.n	80014dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	3304      	adds	r3, #4
 800148e:	623b      	str	r3, [r7, #32]
          break;
 8001490:	e024      	b.n	80014dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	3308      	adds	r3, #8
 8001498:	623b      	str	r3, [r7, #32]
          break;
 800149a:	e01f      	b.n	80014dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	330c      	adds	r3, #12
 80014a2:	623b      	str	r3, [r7, #32]
          break;
 80014a4:	e01a      	b.n	80014dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ae:	2304      	movs	r3, #4
 80014b0:	623b      	str	r3, [r7, #32]
          break;
 80014b2:	e013      	b.n	80014dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d105      	bne.n	80014c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014bc:	2308      	movs	r3, #8
 80014be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69fa      	ldr	r2, [r7, #28]
 80014c4:	611a      	str	r2, [r3, #16]
          break;
 80014c6:	e009      	b.n	80014dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c8:	2308      	movs	r3, #8
 80014ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	615a      	str	r2, [r3, #20]
          break;
 80014d2:	e003      	b.n	80014dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
          break;
 80014d8:	e000      	b.n	80014dc <HAL_GPIO_Init+0x130>
          break;
 80014da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2bff      	cmp	r3, #255	@ 0xff
 80014e0:	d801      	bhi.n	80014e6 <HAL_GPIO_Init+0x13a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	e001      	b.n	80014ea <HAL_GPIO_Init+0x13e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3304      	adds	r3, #4
 80014ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	2bff      	cmp	r3, #255	@ 0xff
 80014f0:	d802      	bhi.n	80014f8 <HAL_GPIO_Init+0x14c>
 80014f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	e002      	b.n	80014fe <HAL_GPIO_Init+0x152>
 80014f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fa:	3b08      	subs	r3, #8
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	210f      	movs	r1, #15
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	fa01 f303 	lsl.w	r3, r1, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	401a      	ands	r2, r3
 8001510:	6a39      	ldr	r1, [r7, #32]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	431a      	orrs	r2, r3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80b1 	beq.w	800168e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800152c:	4b4d      	ldr	r3, [pc, #308]	@ (8001664 <HAL_GPIO_Init+0x2b8>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a4c      	ldr	r2, [pc, #304]	@ (8001664 <HAL_GPIO_Init+0x2b8>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b4a      	ldr	r3, [pc, #296]	@ (8001664 <HAL_GPIO_Init+0x2b8>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001544:	4a48      	ldr	r2, [pc, #288]	@ (8001668 <HAL_GPIO_Init+0x2bc>)
 8001546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001550:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	220f      	movs	r2, #15
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4013      	ands	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a40      	ldr	r2, [pc, #256]	@ (800166c <HAL_GPIO_Init+0x2c0>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d013      	beq.n	8001598 <HAL_GPIO_Init+0x1ec>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a3f      	ldr	r2, [pc, #252]	@ (8001670 <HAL_GPIO_Init+0x2c4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d00d      	beq.n	8001594 <HAL_GPIO_Init+0x1e8>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a3e      	ldr	r2, [pc, #248]	@ (8001674 <HAL_GPIO_Init+0x2c8>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d007      	beq.n	8001590 <HAL_GPIO_Init+0x1e4>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a3d      	ldr	r2, [pc, #244]	@ (8001678 <HAL_GPIO_Init+0x2cc>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d101      	bne.n	800158c <HAL_GPIO_Init+0x1e0>
 8001588:	2303      	movs	r3, #3
 800158a:	e006      	b.n	800159a <HAL_GPIO_Init+0x1ee>
 800158c:	2304      	movs	r3, #4
 800158e:	e004      	b.n	800159a <HAL_GPIO_Init+0x1ee>
 8001590:	2302      	movs	r3, #2
 8001592:	e002      	b.n	800159a <HAL_GPIO_Init+0x1ee>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <HAL_GPIO_Init+0x1ee>
 8001598:	2300      	movs	r3, #0
 800159a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800159c:	f002 0203 	and.w	r2, r2, #3
 80015a0:	0092      	lsls	r2, r2, #2
 80015a2:	4093      	lsls	r3, r2
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015aa:	492f      	ldr	r1, [pc, #188]	@ (8001668 <HAL_GPIO_Init+0x2bc>)
 80015ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3302      	adds	r3, #2
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c4:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	492c      	ldr	r1, [pc, #176]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015d2:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	43db      	mvns	r3, r3
 80015da:	4928      	ldr	r1, [pc, #160]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015dc:	4013      	ands	r3, r2
 80015de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d006      	beq.n	80015fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ec:	4b23      	ldr	r3, [pc, #140]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	4922      	ldr	r1, [pc, #136]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
 80015f8:	e006      	b.n	8001608 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015fa:	4b20      	ldr	r3, [pc, #128]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	43db      	mvns	r3, r3
 8001602:	491e      	ldr	r1, [pc, #120]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 8001604:	4013      	ands	r3, r2
 8001606:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001614:	4b19      	ldr	r3, [pc, #100]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	4918      	ldr	r1, [pc, #96]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	43db      	mvns	r3, r3
 800162a:	4914      	ldr	r1, [pc, #80]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 800162c:	4013      	ands	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d021      	beq.n	8001680 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800163c:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	490e      	ldr	r1, [pc, #56]	@ (800167c <HAL_GPIO_Init+0x2d0>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	600b      	str	r3, [r1, #0]
 8001648:	e021      	b.n	800168e <HAL_GPIO_Init+0x2e2>
 800164a:	bf00      	nop
 800164c:	10320000 	.word	0x10320000
 8001650:	10310000 	.word	0x10310000
 8001654:	10220000 	.word	0x10220000
 8001658:	10210000 	.word	0x10210000
 800165c:	10120000 	.word	0x10120000
 8001660:	10110000 	.word	0x10110000
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000
 800166c:	40010800 	.word	0x40010800
 8001670:	40010c00 	.word	0x40010c00
 8001674:	40011000 	.word	0x40011000
 8001678:	40011400 	.word	0x40011400
 800167c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001680:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <HAL_GPIO_Init+0x304>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	43db      	mvns	r3, r3
 8001688:	4909      	ldr	r1, [pc, #36]	@ (80016b0 <HAL_GPIO_Init+0x304>)
 800168a:	4013      	ands	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	3301      	adds	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	fa22 f303 	lsr.w	r3, r2, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f47f ae8e 	bne.w	80013c0 <HAL_GPIO_Init+0x14>
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	372c      	adds	r7, #44	@ 0x2c
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	40010400 	.word	0x40010400

080016b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e001      	b.n	80016d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	807b      	strh	r3, [r7, #2]
 80016ee:	4613      	mov	r3, r2
 80016f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f2:	787b      	ldrb	r3, [r7, #1]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f8:	887a      	ldrh	r2, [r7, #2]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016fe:	e003      	b.n	8001708 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001700:	887b      	ldrh	r3, [r7, #2]
 8001702:	041a      	lsls	r2, r3, #16
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	611a      	str	r2, [r3, #16]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
	...

08001714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800171e:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800172a:	4a05      	ldr	r2, [pc, #20]	@ (8001740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fd28 	bl	8000188 <HAL_GPIO_EXTI_Callback>
  }
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40010400 	.word	0x40010400

08001744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e272      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8087 	beq.w	8001872 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001764:	4b92      	ldr	r3, [pc, #584]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b04      	cmp	r3, #4
 800176e:	d00c      	beq.n	800178a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001770:	4b8f      	ldr	r3, [pc, #572]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d112      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
 800177c:	4b8c      	ldr	r3, [pc, #560]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001788:	d10b      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178a:	4b89      	ldr	r3, [pc, #548]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d06c      	beq.n	8001870 <HAL_RCC_OscConfig+0x12c>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d168      	bne.n	8001870 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e24c      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x76>
 80017ac:	4b80      	ldr	r3, [pc, #512]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a7f      	ldr	r2, [pc, #508]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e02e      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x98>
 80017c2:	4b7b      	ldr	r3, [pc, #492]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a7a      	ldr	r2, [pc, #488]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b78      	ldr	r3, [pc, #480]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a77      	ldr	r2, [pc, #476]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e01d      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0xbc>
 80017e6:	4b72      	ldr	r3, [pc, #456]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a71      	ldr	r2, [pc, #452]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b6f      	ldr	r3, [pc, #444]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6e      	ldr	r2, [pc, #440]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 8001800:	4b6b      	ldr	r3, [pc, #428]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a6a      	ldr	r2, [pc, #424]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b68      	ldr	r3, [pc, #416]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a67      	ldr	r2, [pc, #412]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001816:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fc88 	bl	8001134 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fc84 	bl	8001134 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	@ 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e200      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b5d      	ldr	r3, [pc, #372]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0xe4>
 8001846:	e014      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fc74 	bl	8001134 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fc70 	bl	8001134 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	@ 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1ec      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	4b53      	ldr	r3, [pc, #332]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x10c>
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d063      	beq.n	8001946 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800187e:	4b4c      	ldr	r3, [pc, #304]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00b      	beq.n	80018a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800188a:	4b49      	ldr	r3, [pc, #292]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b08      	cmp	r3, #8
 8001894:	d11c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x18c>
 8001896:	4b46      	ldr	r3, [pc, #280]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d116      	bne.n	80018d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	4b43      	ldr	r3, [pc, #268]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_OscConfig+0x176>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e1c0      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	4b3d      	ldr	r3, [pc, #244]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4939      	ldr	r1, [pc, #228]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	e03a      	b.n	8001946 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d020      	beq.n	800191a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d8:	4b36      	ldr	r3, [pc, #216]	@ (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff fc29 	bl	8001134 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fc25 	bl	8001134 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1a1      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f8:	4b2d      	ldr	r3, [pc, #180]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	4b2a      	ldr	r3, [pc, #168]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4927      	ldr	r1, [pc, #156]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191a:	4b26      	ldr	r3, [pc, #152]	@ (80019b4 <HAL_RCC_OscConfig+0x270>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fc08 	bl	8001134 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001928:	f7ff fc04 	bl	8001134 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e180      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193a:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d03a      	beq.n	80019c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d019      	beq.n	800198e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001960:	f7ff fbe8 	bl	8001134 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff fbe4 	bl	8001134 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e160      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001986:	2001      	movs	r0, #1
 8001988:	f000 face 	bl	8001f28 <RCC_Delay>
 800198c:	e01c      	b.n	80019c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198e:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001994:	f7ff fbce 	bl	8001134 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199a:	e00f      	b.n	80019bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff fbca 	bl	8001134 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d908      	bls.n	80019bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e146      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	42420000 	.word	0x42420000
 80019b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019bc:	4b92      	ldr	r3, [pc, #584]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1e9      	bne.n	800199c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 80a6 	beq.w	8001b22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019da:	4b8b      	ldr	r3, [pc, #556]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10d      	bne.n	8001a02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b88      	ldr	r3, [pc, #544]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a87      	ldr	r2, [pc, #540]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	4b85      	ldr	r3, [pc, #532]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fe:	2301      	movs	r3, #1
 8001a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a02:	4b82      	ldr	r3, [pc, #520]	@ (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d118      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a7e      	ldr	r2, [pc, #504]	@ (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff fb8b 	bl	8001134 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a22:	f7ff fb87 	bl	8001134 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b64      	cmp	r3, #100	@ 0x64
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e103      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	4b75      	ldr	r3, [pc, #468]	@ (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x312>
 8001a48:	4b6f      	ldr	r3, [pc, #444]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6213      	str	r3, [r2, #32]
 8001a54:	e02d      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x334>
 8001a5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a69      	ldr	r2, [pc, #420]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6213      	str	r3, [r2, #32]
 8001a6a:	4b67      	ldr	r3, [pc, #412]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a66      	ldr	r2, [pc, #408]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6213      	str	r3, [r2, #32]
 8001a76:	e01c      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d10c      	bne.n	8001a9a <HAL_RCC_OscConfig+0x356>
 8001a80:	4b61      	ldr	r3, [pc, #388]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4a60      	ldr	r2, [pc, #384]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	6213      	str	r3, [r2, #32]
 8001a8c:	4b5e      	ldr	r3, [pc, #376]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4a5d      	ldr	r2, [pc, #372]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6213      	str	r3, [r2, #32]
 8001a98:	e00b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a5a      	ldr	r2, [pc, #360]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	4b58      	ldr	r3, [pc, #352]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4a57      	ldr	r2, [pc, #348]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d015      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff fb3b 	bl	8001134 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff fb37 	bl	8001134 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0b1      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0ee      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x37e>
 8001ae4:	e014      	b.n	8001b10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fb25 	bl	8001134 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff fb21 	bl	8001134 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e09b      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b04:	4b40      	ldr	r3, [pc, #256]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ee      	bne.n	8001aee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d105      	bne.n	8001b22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b16:	4b3c      	ldr	r3, [pc, #240]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8087 	beq.w	8001c3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2c:	4b36      	ldr	r3, [pc, #216]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d061      	beq.n	8001bfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d146      	bne.n	8001bce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b33      	ldr	r3, [pc, #204]	@ (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff faf5 	bl	8001134 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7ff faf1 	bl	8001134 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e06d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b60:	4b29      	ldr	r3, [pc, #164]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b74:	d108      	bne.n	8001b88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b76:	4b24      	ldr	r3, [pc, #144]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	4921      	ldr	r1, [pc, #132]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b88:	4b1f      	ldr	r3, [pc, #124]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a19      	ldr	r1, [r3, #32]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	491b      	ldr	r1, [pc, #108]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fac5 	bl	8001134 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bae:	f7ff fac1 	bl	8001134 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e03d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc0:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x46a>
 8001bcc:	e035      	b.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bce:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff faae 	bl	8001134 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff faaa 	bl	8001134 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e026      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x498>
 8001bfa:	e01e      	b.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e019      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <HAL_RCC_OscConfig+0x500>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000

08001c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0d0      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d910      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b67      	ldr	r3, [pc, #412]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 0207 	bic.w	r2, r3, #7
 8001c72:	4965      	ldr	r1, [pc, #404]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b63      	ldr	r3, [pc, #396]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0b8      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca4:	4b59      	ldr	r3, [pc, #356]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a58      	ldr	r2, [pc, #352]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cbc:	4b53      	ldr	r3, [pc, #332]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001cc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc8:	4b50      	ldr	r3, [pc, #320]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	494d      	ldr	r1, [pc, #308]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d040      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b47      	ldr	r3, [pc, #284]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d115      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e07f      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b41      	ldr	r3, [pc, #260]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e073      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b3d      	ldr	r3, [pc, #244]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06b      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b39      	ldr	r3, [pc, #228]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4936      	ldr	r1, [pc, #216]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7ff f9fc 	bl	8001134 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff f9f8 	bl	8001134 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e053      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b2d      	ldr	r3, [pc, #180]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b27      	ldr	r3, [pc, #156]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d210      	bcs.n	8001d98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	4922      	ldr	r1, [pc, #136]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b20      	ldr	r3, [pc, #128]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e032      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da4:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4916      	ldr	r1, [pc, #88]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dc2:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	490e      	ldr	r1, [pc, #56]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dd6:	f000 f821 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	490a      	ldr	r1, [pc, #40]	@ (8001e10 <HAL_RCC_ClockConfig+0x1c8>)
 8001de8:	5ccb      	ldrb	r3, [r1, r3]
 8001dea:	fa22 f303 	lsr.w	r3, r2, r3
 8001dee:	4a09      	ldr	r2, [pc, #36]	@ (8001e14 <HAL_RCC_ClockConfig+0x1cc>)
 8001df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001df2:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <HAL_RCC_ClockConfig+0x1d0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f95a 	bl	80010b0 <HAL_InitTick>

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40022000 	.word	0x40022000
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08003bf4 	.word	0x08003bf4
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000004 	.word	0x20000004

08001e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e36:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d002      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x30>
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d003      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0x36>
 8001e4a:	e027      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e4c:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e4e:	613b      	str	r3, [r7, #16]
      break;
 8001e50:	e027      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	0c9b      	lsrs	r3, r3, #18
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	4a17      	ldr	r2, [pc, #92]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d010      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e6a:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	0c5b      	lsrs	r3, r3, #17
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	4a11      	ldr	r2, [pc, #68]	@ (8001ebc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e7e:	fb03 f202 	mul.w	r2, r3, r2
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	e004      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e90:	fb02 f303 	mul.w	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	613b      	str	r3, [r7, #16]
      break;
 8001e9a:	e002      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e9e:	613b      	str	r3, [r7, #16]
      break;
 8001ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea2:	693b      	ldr	r3, [r7, #16]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	007a1200 	.word	0x007a1200
 8001eb8:	08003c0c 	.word	0x08003c0c
 8001ebc:	08003c1c 	.word	0x08003c1c
 8001ec0:	003d0900 	.word	0x003d0900

08001ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec8:	4b02      	ldr	r3, [pc, #8]	@ (8001ed4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	20000000 	.word	0x20000000

08001ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001edc:	f7ff fff2 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4903      	ldr	r1, [pc, #12]	@ (8001efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	08003c04 	.word	0x08003c04

08001f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f04:	f7ff ffde 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	0adb      	lsrs	r3, r3, #11
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4903      	ldr	r1, [pc, #12]	@ (8001f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08003c04 	.word	0x08003c04

08001f28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f30:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <RCC_Delay+0x34>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <RCC_Delay+0x38>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0a5b      	lsrs	r3, r3, #9
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f44:	bf00      	nop
  }
  while (Delay --);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	60fa      	str	r2, [r7, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f9      	bne.n	8001f44 <RCC_Delay+0x1c>
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	10624dd3 	.word	0x10624dd3

08001f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e076      	b.n	8002064 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d108      	bne.n	8001f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f86:	d009      	beq.n	8001f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
 8001f8e:	e005      	b.n	8001f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7fe feda 	bl	8000d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002020:	ea42 0103 	orr.w	r1, r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002028:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	0c1a      	lsrs	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f002 0204 	and.w	r2, r2, #4
 8002042:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69da      	ldr	r2, [r3, #28]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002052:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	4613      	mov	r3, r2
 800207a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800207c:	f7ff f85a 	bl	8001134 <HAL_GetTick>
 8002080:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b01      	cmp	r3, #1
 8002090:	d001      	beq.n	8002096 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002092:	2302      	movs	r3, #2
 8002094:	e12a      	b.n	80022ec <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HAL_SPI_Transmit+0x36>
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e122      	b.n	80022ec <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_SPI_Transmit+0x48>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e11b      	b.n	80022ec <HAL_SPI_Transmit+0x280>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2203      	movs	r2, #3
 80020c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	88fa      	ldrh	r2, [r7, #6]
 80020d4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	88fa      	ldrh	r2, [r7, #6]
 80020da:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002102:	d10f      	bne.n	8002124 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002112:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002122:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800212e:	2b40      	cmp	r3, #64	@ 0x40
 8002130:	d007      	beq.n	8002142 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800214a:	d152      	bne.n	80021f2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_SPI_Transmit+0xee>
 8002154:	8b7b      	ldrh	r3, [r7, #26]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d145      	bne.n	80021e6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	881a      	ldrh	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	1c9a      	adds	r2, r3, #2
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002174:	b29b      	uxth	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800217e:	e032      	b.n	80021e6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b02      	cmp	r3, #2
 800218c:	d112      	bne.n	80021b4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	881a      	ldrh	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	1c9a      	adds	r2, r3, #2
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80021b2:	e018      	b.n	80021e6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021b4:	f7fe ffbe 	bl	8001134 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d803      	bhi.n	80021cc <HAL_SPI_Transmit+0x160>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ca:	d102      	bne.n	80021d2 <HAL_SPI_Transmit+0x166>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e082      	b.n	80022ec <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1c7      	bne.n	8002180 <HAL_SPI_Transmit+0x114>
 80021f0:	e053      	b.n	800229a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <HAL_SPI_Transmit+0x194>
 80021fa:	8b7b      	ldrh	r3, [r7, #26]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d147      	bne.n	8002290 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	330c      	adds	r3, #12
 800220a:	7812      	ldrb	r2, [r2, #0]
 800220c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800221c:	b29b      	uxth	r3, r3
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002226:	e033      	b.n	8002290 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b02      	cmp	r3, #2
 8002234:	d113      	bne.n	800225e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	330c      	adds	r3, #12
 8002240:	7812      	ldrb	r2, [r2, #0]
 8002242:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800225c:	e018      	b.n	8002290 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800225e:	f7fe ff69 	bl	8001134 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d803      	bhi.n	8002276 <HAL_SPI_Transmit+0x20a>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d102      	bne.n	800227c <HAL_SPI_Transmit+0x210>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e02d      	b.n	80022ec <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1c6      	bne.n	8002228 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	6839      	ldr	r1, [r7, #0]
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f8b0 	bl	8002404 <SPI_EndRxTxTransaction>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2220      	movs	r2, #32
 80022ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10a      	bne.n	80022ce <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80022ea:	2300      	movs	r3, #0
  }
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002304:	f7fe ff16 	bl	8001134 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	4413      	add	r3, r2
 8002312:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002314:	f7fe ff0e 	bl	8001134 <HAL_GetTick>
 8002318:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800231a:	4b39      	ldr	r3, [pc, #228]	@ (8002400 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	015b      	lsls	r3, r3, #5
 8002320:	0d1b      	lsrs	r3, r3, #20
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	fb02 f303 	mul.w	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800232a:	e054      	b.n	80023d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002332:	d050      	beq.n	80023d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002334:	f7fe fefe 	bl	8001134 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	429a      	cmp	r2, r3
 8002342:	d902      	bls.n	800234a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d13d      	bne.n	80023c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002358:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002362:	d111      	bne.n	8002388 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800236c:	d004      	beq.n	8002378 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002376:	d107      	bne.n	8002388 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002386:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002390:	d10f      	bne.n	80023b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e017      	b.n	80023f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4013      	ands	r3, r2
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	bf0c      	ite	eq
 80023e6:	2301      	moveq	r3, #1
 80023e8:	2300      	movne	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d19b      	bne.n	800232c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000000 	.word	0x20000000

08002404 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2201      	movs	r2, #1
 8002418:	2102      	movs	r1, #2
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f7ff ff6a 	bl	80022f4 <SPI_WaitFlagStateUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800242a:	f043 0220 	orr.w	r2, r3, #32
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e013      	b.n	800245e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2200      	movs	r2, #0
 800243e:	2180      	movs	r1, #128	@ 0x80
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f7ff ff57 	bl	80022f4 <SPI_WaitFlagStateUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d007      	beq.n	800245c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002450:	f043 0220 	orr.w	r2, r3, #32
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e000      	b.n	800245e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e042      	b.n	80024fe <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7fe fcad 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2224      	movs	r2, #36	@ 0x24
 8002496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f972 	bl	8002794 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b08a      	sub	sp, #40	@ 0x28
 800250a:	af02      	add	r7, sp, #8
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4613      	mov	r3, r2
 8002514:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b20      	cmp	r3, #32
 8002524:	d175      	bne.n	8002612 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <HAL_UART_Transmit+0x2c>
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e06e      	b.n	8002614 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2221      	movs	r2, #33	@ 0x21
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002544:	f7fe fdf6 	bl	8001134 <HAL_GetTick>
 8002548:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	88fa      	ldrh	r2, [r7, #6]
 800254e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	88fa      	ldrh	r2, [r7, #6]
 8002554:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800255e:	d108      	bne.n	8002572 <HAL_UART_Transmit+0x6c>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d104      	bne.n	8002572 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	e003      	b.n	800257a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800257a:	e02e      	b.n	80025da <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2200      	movs	r2, #0
 8002584:	2180      	movs	r1, #128	@ 0x80
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f848 	bl	800261c <UART_WaitOnFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e03a      	b.n	8002614 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10b      	bne.n	80025bc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	3302      	adds	r3, #2
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	e007      	b.n	80025cc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3301      	adds	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1cb      	bne.n	800257c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2200      	movs	r2, #0
 80025ec:	2140      	movs	r1, #64	@ 0x40
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f814 	bl	800261c <UART_WaitOnFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2220      	movs	r2, #32
 80025fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e006      	b.n	8002614 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e000      	b.n	8002614 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002612:	2302      	movs	r3, #2
  }
}
 8002614:	4618      	mov	r0, r3
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800262c:	e03b      	b.n	80026a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d037      	beq.n	80026a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002636:	f7fe fd7d 	bl	8001134 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	6a3a      	ldr	r2, [r7, #32]
 8002642:	429a      	cmp	r2, r3
 8002644:	d302      	bcc.n	800264c <UART_WaitOnFlagUntilTimeout+0x30>
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e03a      	b.n	80026c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	d023      	beq.n	80026a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b80      	cmp	r3, #128	@ 0x80
 8002662:	d020      	beq.n	80026a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2b40      	cmp	r3, #64	@ 0x40
 8002668:	d01d      	beq.n	80026a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b08      	cmp	r3, #8
 8002676:	d116      	bne.n	80026a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f81d 	bl	80026ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2208      	movs	r2, #8
 8002698:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00f      	b.n	80026c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4013      	ands	r3, r2
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	bf0c      	ite	eq
 80026b6:	2301      	moveq	r3, #1
 80026b8:	2300      	movne	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d0b4      	beq.n	800262e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b095      	sub	sp, #84	@ 0x54
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	330c      	adds	r3, #12
 80026dc:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e0:	e853 3f00 	ldrex	r3, [r3]
 80026e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80026e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	330c      	adds	r3, #12
 80026f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80026f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80026fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80026fe:	e841 2300 	strex	r3, r2, [r1]
 8002702:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1e5      	bne.n	80026d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3314      	adds	r3, #20
 8002710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	e853 3f00 	ldrex	r3, [r3]
 8002718:	61fb      	str	r3, [r7, #28]
   return(result);
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f023 0301 	bic.w	r3, r3, #1
 8002720:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3314      	adds	r3, #20
 8002728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800272a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800272c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002732:	e841 2300 	strex	r3, r2, [r1]
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e5      	bne.n	800270a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002742:	2b01      	cmp	r3, #1
 8002744:	d119      	bne.n	800277a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	330c      	adds	r3, #12
 800274c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	e853 3f00 	ldrex	r3, [r3]
 8002754:	60bb      	str	r3, [r7, #8]
   return(result);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f023 0310 	bic.w	r3, r3, #16
 800275c:	647b      	str	r3, [r7, #68]	@ 0x44
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	330c      	adds	r3, #12
 8002764:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002766:	61ba      	str	r2, [r7, #24]
 8002768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276a:	6979      	ldr	r1, [r7, #20]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	e841 2300 	strex	r3, r2, [r1]
 8002772:	613b      	str	r3, [r7, #16]
   return(result);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1e5      	bne.n	8002746 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002788:	bf00      	nop
 800278a:	3754      	adds	r7, #84	@ 0x54
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
	...

08002794 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80027ce:	f023 030c 	bic.w	r3, r3, #12
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	430b      	orrs	r3, r1
 80027da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a2c      	ldr	r2, [pc, #176]	@ (80028a8 <UART_SetConfig+0x114>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d103      	bne.n	8002804 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027fc:	f7ff fb80 	bl	8001f00 <HAL_RCC_GetPCLK2Freq>
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	e002      	b.n	800280a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002804:	f7ff fb68 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8002808:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	009a      	lsls	r2, r3, #2
 8002814:	441a      	add	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002820:	4a22      	ldr	r2, [pc, #136]	@ (80028ac <UART_SetConfig+0x118>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	0119      	lsls	r1, r3, #4
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	009a      	lsls	r2, r3, #2
 8002834:	441a      	add	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002840:	4b1a      	ldr	r3, [pc, #104]	@ (80028ac <UART_SetConfig+0x118>)
 8002842:	fba3 0302 	umull	r0, r3, r3, r2
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2064      	movs	r0, #100	@ 0x64
 800284a:	fb00 f303 	mul.w	r3, r0, r3
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	3332      	adds	r3, #50	@ 0x32
 8002854:	4a15      	ldr	r2, [pc, #84]	@ (80028ac <UART_SetConfig+0x118>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002860:	4419      	add	r1, r3
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	009a      	lsls	r2, r3, #2
 800286c:	441a      	add	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	fbb2 f2f3 	udiv	r2, r2, r3
 8002878:	4b0c      	ldr	r3, [pc, #48]	@ (80028ac <UART_SetConfig+0x118>)
 800287a:	fba3 0302 	umull	r0, r3, r3, r2
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2064      	movs	r0, #100	@ 0x64
 8002882:	fb00 f303 	mul.w	r3, r0, r3
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	3332      	adds	r3, #50	@ 0x32
 800288c:	4a07      	ldr	r2, [pc, #28]	@ (80028ac <UART_SetConfig+0x118>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	f003 020f 	and.w	r2, r3, #15
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	440a      	add	r2, r1
 800289e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028a0:	bf00      	nop
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40013800 	.word	0x40013800
 80028ac:	51eb851f 	.word	0x51eb851f

080028b0 <std>:
 80028b0:	2300      	movs	r3, #0
 80028b2:	b510      	push	{r4, lr}
 80028b4:	4604      	mov	r4, r0
 80028b6:	e9c0 3300 	strd	r3, r3, [r0]
 80028ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028be:	6083      	str	r3, [r0, #8]
 80028c0:	8181      	strh	r1, [r0, #12]
 80028c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80028c4:	81c2      	strh	r2, [r0, #14]
 80028c6:	6183      	str	r3, [r0, #24]
 80028c8:	4619      	mov	r1, r3
 80028ca:	2208      	movs	r2, #8
 80028cc:	305c      	adds	r0, #92	@ 0x5c
 80028ce:	f000 f9f9 	bl	8002cc4 <memset>
 80028d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002908 <std+0x58>)
 80028d4:	6224      	str	r4, [r4, #32]
 80028d6:	6263      	str	r3, [r4, #36]	@ 0x24
 80028d8:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <std+0x5c>)
 80028da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80028dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002910 <std+0x60>)
 80028de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80028e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <std+0x64>)
 80028e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80028e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <std+0x68>)
 80028e6:	429c      	cmp	r4, r3
 80028e8:	d006      	beq.n	80028f8 <std+0x48>
 80028ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80028ee:	4294      	cmp	r4, r2
 80028f0:	d002      	beq.n	80028f8 <std+0x48>
 80028f2:	33d0      	adds	r3, #208	@ 0xd0
 80028f4:	429c      	cmp	r4, r3
 80028f6:	d105      	bne.n	8002904 <std+0x54>
 80028f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80028fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002900:	f000 ba58 	b.w	8002db4 <__retarget_lock_init_recursive>
 8002904:	bd10      	pop	{r4, pc}
 8002906:	bf00      	nop
 8002908:	08002b15 	.word	0x08002b15
 800290c:	08002b37 	.word	0x08002b37
 8002910:	08002b6f 	.word	0x08002b6f
 8002914:	08002b93 	.word	0x08002b93
 8002918:	20000138 	.word	0x20000138

0800291c <stdio_exit_handler>:
 800291c:	4a02      	ldr	r2, [pc, #8]	@ (8002928 <stdio_exit_handler+0xc>)
 800291e:	4903      	ldr	r1, [pc, #12]	@ (800292c <stdio_exit_handler+0x10>)
 8002920:	4803      	ldr	r0, [pc, #12]	@ (8002930 <stdio_exit_handler+0x14>)
 8002922:	f000 b869 	b.w	80029f8 <_fwalk_sglue>
 8002926:	bf00      	nop
 8002928:	2000000c 	.word	0x2000000c
 800292c:	08003649 	.word	0x08003649
 8002930:	2000001c 	.word	0x2000001c

08002934 <cleanup_stdio>:
 8002934:	6841      	ldr	r1, [r0, #4]
 8002936:	4b0c      	ldr	r3, [pc, #48]	@ (8002968 <cleanup_stdio+0x34>)
 8002938:	b510      	push	{r4, lr}
 800293a:	4299      	cmp	r1, r3
 800293c:	4604      	mov	r4, r0
 800293e:	d001      	beq.n	8002944 <cleanup_stdio+0x10>
 8002940:	f000 fe82 	bl	8003648 <_fflush_r>
 8002944:	68a1      	ldr	r1, [r4, #8]
 8002946:	4b09      	ldr	r3, [pc, #36]	@ (800296c <cleanup_stdio+0x38>)
 8002948:	4299      	cmp	r1, r3
 800294a:	d002      	beq.n	8002952 <cleanup_stdio+0x1e>
 800294c:	4620      	mov	r0, r4
 800294e:	f000 fe7b 	bl	8003648 <_fflush_r>
 8002952:	68e1      	ldr	r1, [r4, #12]
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <cleanup_stdio+0x3c>)
 8002956:	4299      	cmp	r1, r3
 8002958:	d004      	beq.n	8002964 <cleanup_stdio+0x30>
 800295a:	4620      	mov	r0, r4
 800295c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002960:	f000 be72 	b.w	8003648 <_fflush_r>
 8002964:	bd10      	pop	{r4, pc}
 8002966:	bf00      	nop
 8002968:	20000138 	.word	0x20000138
 800296c:	200001a0 	.word	0x200001a0
 8002970:	20000208 	.word	0x20000208

08002974 <global_stdio_init.part.0>:
 8002974:	b510      	push	{r4, lr}
 8002976:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <global_stdio_init.part.0+0x30>)
 8002978:	4c0b      	ldr	r4, [pc, #44]	@ (80029a8 <global_stdio_init.part.0+0x34>)
 800297a:	4a0c      	ldr	r2, [pc, #48]	@ (80029ac <global_stdio_init.part.0+0x38>)
 800297c:	4620      	mov	r0, r4
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	2104      	movs	r1, #4
 8002982:	2200      	movs	r2, #0
 8002984:	f7ff ff94 	bl	80028b0 <std>
 8002988:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800298c:	2201      	movs	r2, #1
 800298e:	2109      	movs	r1, #9
 8002990:	f7ff ff8e 	bl	80028b0 <std>
 8002994:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002998:	2202      	movs	r2, #2
 800299a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800299e:	2112      	movs	r1, #18
 80029a0:	f7ff bf86 	b.w	80028b0 <std>
 80029a4:	20000270 	.word	0x20000270
 80029a8:	20000138 	.word	0x20000138
 80029ac:	0800291d 	.word	0x0800291d

080029b0 <__sfp_lock_acquire>:
 80029b0:	4801      	ldr	r0, [pc, #4]	@ (80029b8 <__sfp_lock_acquire+0x8>)
 80029b2:	f000 ba00 	b.w	8002db6 <__retarget_lock_acquire_recursive>
 80029b6:	bf00      	nop
 80029b8:	20000279 	.word	0x20000279

080029bc <__sfp_lock_release>:
 80029bc:	4801      	ldr	r0, [pc, #4]	@ (80029c4 <__sfp_lock_release+0x8>)
 80029be:	f000 b9fb 	b.w	8002db8 <__retarget_lock_release_recursive>
 80029c2:	bf00      	nop
 80029c4:	20000279 	.word	0x20000279

080029c8 <__sinit>:
 80029c8:	b510      	push	{r4, lr}
 80029ca:	4604      	mov	r4, r0
 80029cc:	f7ff fff0 	bl	80029b0 <__sfp_lock_acquire>
 80029d0:	6a23      	ldr	r3, [r4, #32]
 80029d2:	b11b      	cbz	r3, 80029dc <__sinit+0x14>
 80029d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029d8:	f7ff bff0 	b.w	80029bc <__sfp_lock_release>
 80029dc:	4b04      	ldr	r3, [pc, #16]	@ (80029f0 <__sinit+0x28>)
 80029de:	6223      	str	r3, [r4, #32]
 80029e0:	4b04      	ldr	r3, [pc, #16]	@ (80029f4 <__sinit+0x2c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f5      	bne.n	80029d4 <__sinit+0xc>
 80029e8:	f7ff ffc4 	bl	8002974 <global_stdio_init.part.0>
 80029ec:	e7f2      	b.n	80029d4 <__sinit+0xc>
 80029ee:	bf00      	nop
 80029f0:	08002935 	.word	0x08002935
 80029f4:	20000270 	.word	0x20000270

080029f8 <_fwalk_sglue>:
 80029f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029fc:	4607      	mov	r7, r0
 80029fe:	4688      	mov	r8, r1
 8002a00:	4614      	mov	r4, r2
 8002a02:	2600      	movs	r6, #0
 8002a04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a08:	f1b9 0901 	subs.w	r9, r9, #1
 8002a0c:	d505      	bpl.n	8002a1a <_fwalk_sglue+0x22>
 8002a0e:	6824      	ldr	r4, [r4, #0]
 8002a10:	2c00      	cmp	r4, #0
 8002a12:	d1f7      	bne.n	8002a04 <_fwalk_sglue+0xc>
 8002a14:	4630      	mov	r0, r6
 8002a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a1a:	89ab      	ldrh	r3, [r5, #12]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d907      	bls.n	8002a30 <_fwalk_sglue+0x38>
 8002a20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a24:	3301      	adds	r3, #1
 8002a26:	d003      	beq.n	8002a30 <_fwalk_sglue+0x38>
 8002a28:	4629      	mov	r1, r5
 8002a2a:	4638      	mov	r0, r7
 8002a2c:	47c0      	blx	r8
 8002a2e:	4306      	orrs	r6, r0
 8002a30:	3568      	adds	r5, #104	@ 0x68
 8002a32:	e7e9      	b.n	8002a08 <_fwalk_sglue+0x10>

08002a34 <iprintf>:
 8002a34:	b40f      	push	{r0, r1, r2, r3}
 8002a36:	b507      	push	{r0, r1, r2, lr}
 8002a38:	4906      	ldr	r1, [pc, #24]	@ (8002a54 <iprintf+0x20>)
 8002a3a:	ab04      	add	r3, sp, #16
 8002a3c:	6808      	ldr	r0, [r1, #0]
 8002a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a42:	6881      	ldr	r1, [r0, #8]
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	f000 fad7 	bl	8002ff8 <_vfiprintf_r>
 8002a4a:	b003      	add	sp, #12
 8002a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a50:	b004      	add	sp, #16
 8002a52:	4770      	bx	lr
 8002a54:	20000018 	.word	0x20000018

08002a58 <_puts_r>:
 8002a58:	6a03      	ldr	r3, [r0, #32]
 8002a5a:	b570      	push	{r4, r5, r6, lr}
 8002a5c:	4605      	mov	r5, r0
 8002a5e:	460e      	mov	r6, r1
 8002a60:	6884      	ldr	r4, [r0, #8]
 8002a62:	b90b      	cbnz	r3, 8002a68 <_puts_r+0x10>
 8002a64:	f7ff ffb0 	bl	80029c8 <__sinit>
 8002a68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a6a:	07db      	lsls	r3, r3, #31
 8002a6c:	d405      	bmi.n	8002a7a <_puts_r+0x22>
 8002a6e:	89a3      	ldrh	r3, [r4, #12]
 8002a70:	0598      	lsls	r0, r3, #22
 8002a72:	d402      	bmi.n	8002a7a <_puts_r+0x22>
 8002a74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a76:	f000 f99e 	bl	8002db6 <__retarget_lock_acquire_recursive>
 8002a7a:	89a3      	ldrh	r3, [r4, #12]
 8002a7c:	0719      	lsls	r1, r3, #28
 8002a7e:	d502      	bpl.n	8002a86 <_puts_r+0x2e>
 8002a80:	6923      	ldr	r3, [r4, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d135      	bne.n	8002af2 <_puts_r+0x9a>
 8002a86:	4621      	mov	r1, r4
 8002a88:	4628      	mov	r0, r5
 8002a8a:	f000 f8c5 	bl	8002c18 <__swsetup_r>
 8002a8e:	b380      	cbz	r0, 8002af2 <_puts_r+0x9a>
 8002a90:	f04f 35ff 	mov.w	r5, #4294967295
 8002a94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a96:	07da      	lsls	r2, r3, #31
 8002a98:	d405      	bmi.n	8002aa6 <_puts_r+0x4e>
 8002a9a:	89a3      	ldrh	r3, [r4, #12]
 8002a9c:	059b      	lsls	r3, r3, #22
 8002a9e:	d402      	bmi.n	8002aa6 <_puts_r+0x4e>
 8002aa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002aa2:	f000 f989 	bl	8002db8 <__retarget_lock_release_recursive>
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	bd70      	pop	{r4, r5, r6, pc}
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	da04      	bge.n	8002ab8 <_puts_r+0x60>
 8002aae:	69a2      	ldr	r2, [r4, #24]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	dc17      	bgt.n	8002ae4 <_puts_r+0x8c>
 8002ab4:	290a      	cmp	r1, #10
 8002ab6:	d015      	beq.n	8002ae4 <_puts_r+0x8c>
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	6022      	str	r2, [r4, #0]
 8002abe:	7019      	strb	r1, [r3, #0]
 8002ac0:	68a3      	ldr	r3, [r4, #8]
 8002ac2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	60a3      	str	r3, [r4, #8]
 8002aca:	2900      	cmp	r1, #0
 8002acc:	d1ed      	bne.n	8002aaa <_puts_r+0x52>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	da11      	bge.n	8002af6 <_puts_r+0x9e>
 8002ad2:	4622      	mov	r2, r4
 8002ad4:	210a      	movs	r1, #10
 8002ad6:	4628      	mov	r0, r5
 8002ad8:	f000 f85f 	bl	8002b9a <__swbuf_r>
 8002adc:	3001      	adds	r0, #1
 8002ade:	d0d7      	beq.n	8002a90 <_puts_r+0x38>
 8002ae0:	250a      	movs	r5, #10
 8002ae2:	e7d7      	b.n	8002a94 <_puts_r+0x3c>
 8002ae4:	4622      	mov	r2, r4
 8002ae6:	4628      	mov	r0, r5
 8002ae8:	f000 f857 	bl	8002b9a <__swbuf_r>
 8002aec:	3001      	adds	r0, #1
 8002aee:	d1e7      	bne.n	8002ac0 <_puts_r+0x68>
 8002af0:	e7ce      	b.n	8002a90 <_puts_r+0x38>
 8002af2:	3e01      	subs	r6, #1
 8002af4:	e7e4      	b.n	8002ac0 <_puts_r+0x68>
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	6022      	str	r2, [r4, #0]
 8002afc:	220a      	movs	r2, #10
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	e7ee      	b.n	8002ae0 <_puts_r+0x88>
	...

08002b04 <puts>:
 8002b04:	4b02      	ldr	r3, [pc, #8]	@ (8002b10 <puts+0xc>)
 8002b06:	4601      	mov	r1, r0
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	f7ff bfa5 	b.w	8002a58 <_puts_r>
 8002b0e:	bf00      	nop
 8002b10:	20000018 	.word	0x20000018

08002b14 <__sread>:
 8002b14:	b510      	push	{r4, lr}
 8002b16:	460c      	mov	r4, r1
 8002b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b1c:	f000 f8fc 	bl	8002d18 <_read_r>
 8002b20:	2800      	cmp	r0, #0
 8002b22:	bfab      	itete	ge
 8002b24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002b26:	89a3      	ldrhlt	r3, [r4, #12]
 8002b28:	181b      	addge	r3, r3, r0
 8002b2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002b2e:	bfac      	ite	ge
 8002b30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002b32:	81a3      	strhlt	r3, [r4, #12]
 8002b34:	bd10      	pop	{r4, pc}

08002b36 <__swrite>:
 8002b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b3a:	461f      	mov	r7, r3
 8002b3c:	898b      	ldrh	r3, [r1, #12]
 8002b3e:	4605      	mov	r5, r0
 8002b40:	05db      	lsls	r3, r3, #23
 8002b42:	460c      	mov	r4, r1
 8002b44:	4616      	mov	r6, r2
 8002b46:	d505      	bpl.n	8002b54 <__swrite+0x1e>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b50:	f000 f8d0 	bl	8002cf4 <_lseek_r>
 8002b54:	89a3      	ldrh	r3, [r4, #12]
 8002b56:	4632      	mov	r2, r6
 8002b58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b5c:	81a3      	strh	r3, [r4, #12]
 8002b5e:	4628      	mov	r0, r5
 8002b60:	463b      	mov	r3, r7
 8002b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b6a:	f000 b8e7 	b.w	8002d3c <_write_r>

08002b6e <__sseek>:
 8002b6e:	b510      	push	{r4, lr}
 8002b70:	460c      	mov	r4, r1
 8002b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b76:	f000 f8bd 	bl	8002cf4 <_lseek_r>
 8002b7a:	1c43      	adds	r3, r0, #1
 8002b7c:	89a3      	ldrh	r3, [r4, #12]
 8002b7e:	bf15      	itete	ne
 8002b80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002b82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002b86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002b8a:	81a3      	strheq	r3, [r4, #12]
 8002b8c:	bf18      	it	ne
 8002b8e:	81a3      	strhne	r3, [r4, #12]
 8002b90:	bd10      	pop	{r4, pc}

08002b92 <__sclose>:
 8002b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b96:	f000 b89d 	b.w	8002cd4 <_close_r>

08002b9a <__swbuf_r>:
 8002b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9c:	460e      	mov	r6, r1
 8002b9e:	4614      	mov	r4, r2
 8002ba0:	4605      	mov	r5, r0
 8002ba2:	b118      	cbz	r0, 8002bac <__swbuf_r+0x12>
 8002ba4:	6a03      	ldr	r3, [r0, #32]
 8002ba6:	b90b      	cbnz	r3, 8002bac <__swbuf_r+0x12>
 8002ba8:	f7ff ff0e 	bl	80029c8 <__sinit>
 8002bac:	69a3      	ldr	r3, [r4, #24]
 8002bae:	60a3      	str	r3, [r4, #8]
 8002bb0:	89a3      	ldrh	r3, [r4, #12]
 8002bb2:	071a      	lsls	r2, r3, #28
 8002bb4:	d501      	bpl.n	8002bba <__swbuf_r+0x20>
 8002bb6:	6923      	ldr	r3, [r4, #16]
 8002bb8:	b943      	cbnz	r3, 8002bcc <__swbuf_r+0x32>
 8002bba:	4621      	mov	r1, r4
 8002bbc:	4628      	mov	r0, r5
 8002bbe:	f000 f82b 	bl	8002c18 <__swsetup_r>
 8002bc2:	b118      	cbz	r0, 8002bcc <__swbuf_r+0x32>
 8002bc4:	f04f 37ff 	mov.w	r7, #4294967295
 8002bc8:	4638      	mov	r0, r7
 8002bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bcc:	6823      	ldr	r3, [r4, #0]
 8002bce:	6922      	ldr	r2, [r4, #16]
 8002bd0:	b2f6      	uxtb	r6, r6
 8002bd2:	1a98      	subs	r0, r3, r2
 8002bd4:	6963      	ldr	r3, [r4, #20]
 8002bd6:	4637      	mov	r7, r6
 8002bd8:	4283      	cmp	r3, r0
 8002bda:	dc05      	bgt.n	8002be8 <__swbuf_r+0x4e>
 8002bdc:	4621      	mov	r1, r4
 8002bde:	4628      	mov	r0, r5
 8002be0:	f000 fd32 	bl	8003648 <_fflush_r>
 8002be4:	2800      	cmp	r0, #0
 8002be6:	d1ed      	bne.n	8002bc4 <__swbuf_r+0x2a>
 8002be8:	68a3      	ldr	r3, [r4, #8]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	60a3      	str	r3, [r4, #8]
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	6022      	str	r2, [r4, #0]
 8002bf4:	701e      	strb	r6, [r3, #0]
 8002bf6:	6962      	ldr	r2, [r4, #20]
 8002bf8:	1c43      	adds	r3, r0, #1
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d004      	beq.n	8002c08 <__swbuf_r+0x6e>
 8002bfe:	89a3      	ldrh	r3, [r4, #12]
 8002c00:	07db      	lsls	r3, r3, #31
 8002c02:	d5e1      	bpl.n	8002bc8 <__swbuf_r+0x2e>
 8002c04:	2e0a      	cmp	r6, #10
 8002c06:	d1df      	bne.n	8002bc8 <__swbuf_r+0x2e>
 8002c08:	4621      	mov	r1, r4
 8002c0a:	4628      	mov	r0, r5
 8002c0c:	f000 fd1c 	bl	8003648 <_fflush_r>
 8002c10:	2800      	cmp	r0, #0
 8002c12:	d0d9      	beq.n	8002bc8 <__swbuf_r+0x2e>
 8002c14:	e7d6      	b.n	8002bc4 <__swbuf_r+0x2a>
	...

08002c18 <__swsetup_r>:
 8002c18:	b538      	push	{r3, r4, r5, lr}
 8002c1a:	4b29      	ldr	r3, [pc, #164]	@ (8002cc0 <__swsetup_r+0xa8>)
 8002c1c:	4605      	mov	r5, r0
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	460c      	mov	r4, r1
 8002c22:	b118      	cbz	r0, 8002c2c <__swsetup_r+0x14>
 8002c24:	6a03      	ldr	r3, [r0, #32]
 8002c26:	b90b      	cbnz	r3, 8002c2c <__swsetup_r+0x14>
 8002c28:	f7ff fece 	bl	80029c8 <__sinit>
 8002c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c30:	0719      	lsls	r1, r3, #28
 8002c32:	d422      	bmi.n	8002c7a <__swsetup_r+0x62>
 8002c34:	06da      	lsls	r2, r3, #27
 8002c36:	d407      	bmi.n	8002c48 <__swsetup_r+0x30>
 8002c38:	2209      	movs	r2, #9
 8002c3a:	602a      	str	r2, [r5, #0]
 8002c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295
 8002c44:	81a3      	strh	r3, [r4, #12]
 8002c46:	e033      	b.n	8002cb0 <__swsetup_r+0x98>
 8002c48:	0758      	lsls	r0, r3, #29
 8002c4a:	d512      	bpl.n	8002c72 <__swsetup_r+0x5a>
 8002c4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c4e:	b141      	cbz	r1, 8002c62 <__swsetup_r+0x4a>
 8002c50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c54:	4299      	cmp	r1, r3
 8002c56:	d002      	beq.n	8002c5e <__swsetup_r+0x46>
 8002c58:	4628      	mov	r0, r5
 8002c5a:	f000 f8af 	bl	8002dbc <_free_r>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c62:	89a3      	ldrh	r3, [r4, #12]
 8002c64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002c68:	81a3      	strh	r3, [r4, #12]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	6063      	str	r3, [r4, #4]
 8002c6e:	6923      	ldr	r3, [r4, #16]
 8002c70:	6023      	str	r3, [r4, #0]
 8002c72:	89a3      	ldrh	r3, [r4, #12]
 8002c74:	f043 0308 	orr.w	r3, r3, #8
 8002c78:	81a3      	strh	r3, [r4, #12]
 8002c7a:	6923      	ldr	r3, [r4, #16]
 8002c7c:	b94b      	cbnz	r3, 8002c92 <__swsetup_r+0x7a>
 8002c7e:	89a3      	ldrh	r3, [r4, #12]
 8002c80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c88:	d003      	beq.n	8002c92 <__swsetup_r+0x7a>
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	f000 fd28 	bl	80036e2 <__smakebuf_r>
 8002c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c96:	f013 0201 	ands.w	r2, r3, #1
 8002c9a:	d00a      	beq.n	8002cb2 <__swsetup_r+0x9a>
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	60a2      	str	r2, [r4, #8]
 8002ca0:	6962      	ldr	r2, [r4, #20]
 8002ca2:	4252      	negs	r2, r2
 8002ca4:	61a2      	str	r2, [r4, #24]
 8002ca6:	6922      	ldr	r2, [r4, #16]
 8002ca8:	b942      	cbnz	r2, 8002cbc <__swsetup_r+0xa4>
 8002caa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002cae:	d1c5      	bne.n	8002c3c <__swsetup_r+0x24>
 8002cb0:	bd38      	pop	{r3, r4, r5, pc}
 8002cb2:	0799      	lsls	r1, r3, #30
 8002cb4:	bf58      	it	pl
 8002cb6:	6962      	ldrpl	r2, [r4, #20]
 8002cb8:	60a2      	str	r2, [r4, #8]
 8002cba:	e7f4      	b.n	8002ca6 <__swsetup_r+0x8e>
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	e7f7      	b.n	8002cb0 <__swsetup_r+0x98>
 8002cc0:	20000018 	.word	0x20000018

08002cc4 <memset>:
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4402      	add	r2, r0
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d100      	bne.n	8002cce <memset+0xa>
 8002ccc:	4770      	bx	lr
 8002cce:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd2:	e7f9      	b.n	8002cc8 <memset+0x4>

08002cd4 <_close_r>:
 8002cd4:	b538      	push	{r3, r4, r5, lr}
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	4d05      	ldr	r5, [pc, #20]	@ (8002cf0 <_close_r+0x1c>)
 8002cda:	4604      	mov	r4, r0
 8002cdc:	4608      	mov	r0, r1
 8002cde:	602b      	str	r3, [r5, #0]
 8002ce0:	f7fe f93d 	bl	8000f5e <_close>
 8002ce4:	1c43      	adds	r3, r0, #1
 8002ce6:	d102      	bne.n	8002cee <_close_r+0x1a>
 8002ce8:	682b      	ldr	r3, [r5, #0]
 8002cea:	b103      	cbz	r3, 8002cee <_close_r+0x1a>
 8002cec:	6023      	str	r3, [r4, #0]
 8002cee:	bd38      	pop	{r3, r4, r5, pc}
 8002cf0:	20000274 	.word	0x20000274

08002cf4 <_lseek_r>:
 8002cf4:	b538      	push	{r3, r4, r5, lr}
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	4608      	mov	r0, r1
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	4d05      	ldr	r5, [pc, #20]	@ (8002d14 <_lseek_r+0x20>)
 8002d00:	602a      	str	r2, [r5, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	f7fe f94f 	bl	8000fa6 <_lseek>
 8002d08:	1c43      	adds	r3, r0, #1
 8002d0a:	d102      	bne.n	8002d12 <_lseek_r+0x1e>
 8002d0c:	682b      	ldr	r3, [r5, #0]
 8002d0e:	b103      	cbz	r3, 8002d12 <_lseek_r+0x1e>
 8002d10:	6023      	str	r3, [r4, #0]
 8002d12:	bd38      	pop	{r3, r4, r5, pc}
 8002d14:	20000274 	.word	0x20000274

08002d18 <_read_r>:
 8002d18:	b538      	push	{r3, r4, r5, lr}
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	4608      	mov	r0, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	2200      	movs	r2, #0
 8002d22:	4d05      	ldr	r5, [pc, #20]	@ (8002d38 <_read_r+0x20>)
 8002d24:	602a      	str	r2, [r5, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f7fe f8e0 	bl	8000eec <_read>
 8002d2c:	1c43      	adds	r3, r0, #1
 8002d2e:	d102      	bne.n	8002d36 <_read_r+0x1e>
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	b103      	cbz	r3, 8002d36 <_read_r+0x1e>
 8002d34:	6023      	str	r3, [r4, #0]
 8002d36:	bd38      	pop	{r3, r4, r5, pc}
 8002d38:	20000274 	.word	0x20000274

08002d3c <_write_r>:
 8002d3c:	b538      	push	{r3, r4, r5, lr}
 8002d3e:	4604      	mov	r4, r0
 8002d40:	4608      	mov	r0, r1
 8002d42:	4611      	mov	r1, r2
 8002d44:	2200      	movs	r2, #0
 8002d46:	4d05      	ldr	r5, [pc, #20]	@ (8002d5c <_write_r+0x20>)
 8002d48:	602a      	str	r2, [r5, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f7fe f8eb 	bl	8000f26 <_write>
 8002d50:	1c43      	adds	r3, r0, #1
 8002d52:	d102      	bne.n	8002d5a <_write_r+0x1e>
 8002d54:	682b      	ldr	r3, [r5, #0]
 8002d56:	b103      	cbz	r3, 8002d5a <_write_r+0x1e>
 8002d58:	6023      	str	r3, [r4, #0]
 8002d5a:	bd38      	pop	{r3, r4, r5, pc}
 8002d5c:	20000274 	.word	0x20000274

08002d60 <__errno>:
 8002d60:	4b01      	ldr	r3, [pc, #4]	@ (8002d68 <__errno+0x8>)
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	20000018 	.word	0x20000018

08002d6c <__libc_init_array>:
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	2600      	movs	r6, #0
 8002d70:	4d0c      	ldr	r5, [pc, #48]	@ (8002da4 <__libc_init_array+0x38>)
 8002d72:	4c0d      	ldr	r4, [pc, #52]	@ (8002da8 <__libc_init_array+0x3c>)
 8002d74:	1b64      	subs	r4, r4, r5
 8002d76:	10a4      	asrs	r4, r4, #2
 8002d78:	42a6      	cmp	r6, r4
 8002d7a:	d109      	bne.n	8002d90 <__libc_init_array+0x24>
 8002d7c:	f000 fd2e 	bl	80037dc <_init>
 8002d80:	2600      	movs	r6, #0
 8002d82:	4d0a      	ldr	r5, [pc, #40]	@ (8002dac <__libc_init_array+0x40>)
 8002d84:	4c0a      	ldr	r4, [pc, #40]	@ (8002db0 <__libc_init_array+0x44>)
 8002d86:	1b64      	subs	r4, r4, r5
 8002d88:	10a4      	asrs	r4, r4, #2
 8002d8a:	42a6      	cmp	r6, r4
 8002d8c:	d105      	bne.n	8002d9a <__libc_init_array+0x2e>
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}
 8002d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d94:	4798      	blx	r3
 8002d96:	3601      	adds	r6, #1
 8002d98:	e7ee      	b.n	8002d78 <__libc_init_array+0xc>
 8002d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9e:	4798      	blx	r3
 8002da0:	3601      	adds	r6, #1
 8002da2:	e7f2      	b.n	8002d8a <__libc_init_array+0x1e>
 8002da4:	08003c54 	.word	0x08003c54
 8002da8:	08003c54 	.word	0x08003c54
 8002dac:	08003c54 	.word	0x08003c54
 8002db0:	08003c58 	.word	0x08003c58

08002db4 <__retarget_lock_init_recursive>:
 8002db4:	4770      	bx	lr

08002db6 <__retarget_lock_acquire_recursive>:
 8002db6:	4770      	bx	lr

08002db8 <__retarget_lock_release_recursive>:
 8002db8:	4770      	bx	lr
	...

08002dbc <_free_r>:
 8002dbc:	b538      	push	{r3, r4, r5, lr}
 8002dbe:	4605      	mov	r5, r0
 8002dc0:	2900      	cmp	r1, #0
 8002dc2:	d040      	beq.n	8002e46 <_free_r+0x8a>
 8002dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dc8:	1f0c      	subs	r4, r1, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bfb8      	it	lt
 8002dce:	18e4      	addlt	r4, r4, r3
 8002dd0:	f000 f8de 	bl	8002f90 <__malloc_lock>
 8002dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e48 <_free_r+0x8c>)
 8002dd6:	6813      	ldr	r3, [r2, #0]
 8002dd8:	b933      	cbnz	r3, 8002de8 <_free_r+0x2c>
 8002dda:	6063      	str	r3, [r4, #4]
 8002ddc:	6014      	str	r4, [r2, #0]
 8002dde:	4628      	mov	r0, r5
 8002de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002de4:	f000 b8da 	b.w	8002f9c <__malloc_unlock>
 8002de8:	42a3      	cmp	r3, r4
 8002dea:	d908      	bls.n	8002dfe <_free_r+0x42>
 8002dec:	6820      	ldr	r0, [r4, #0]
 8002dee:	1821      	adds	r1, r4, r0
 8002df0:	428b      	cmp	r3, r1
 8002df2:	bf01      	itttt	eq
 8002df4:	6819      	ldreq	r1, [r3, #0]
 8002df6:	685b      	ldreq	r3, [r3, #4]
 8002df8:	1809      	addeq	r1, r1, r0
 8002dfa:	6021      	streq	r1, [r4, #0]
 8002dfc:	e7ed      	b.n	8002dda <_free_r+0x1e>
 8002dfe:	461a      	mov	r2, r3
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	b10b      	cbz	r3, 8002e08 <_free_r+0x4c>
 8002e04:	42a3      	cmp	r3, r4
 8002e06:	d9fa      	bls.n	8002dfe <_free_r+0x42>
 8002e08:	6811      	ldr	r1, [r2, #0]
 8002e0a:	1850      	adds	r0, r2, r1
 8002e0c:	42a0      	cmp	r0, r4
 8002e0e:	d10b      	bne.n	8002e28 <_free_r+0x6c>
 8002e10:	6820      	ldr	r0, [r4, #0]
 8002e12:	4401      	add	r1, r0
 8002e14:	1850      	adds	r0, r2, r1
 8002e16:	4283      	cmp	r3, r0
 8002e18:	6011      	str	r1, [r2, #0]
 8002e1a:	d1e0      	bne.n	8002dde <_free_r+0x22>
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4408      	add	r0, r1
 8002e22:	6010      	str	r0, [r2, #0]
 8002e24:	6053      	str	r3, [r2, #4]
 8002e26:	e7da      	b.n	8002dde <_free_r+0x22>
 8002e28:	d902      	bls.n	8002e30 <_free_r+0x74>
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	602b      	str	r3, [r5, #0]
 8002e2e:	e7d6      	b.n	8002dde <_free_r+0x22>
 8002e30:	6820      	ldr	r0, [r4, #0]
 8002e32:	1821      	adds	r1, r4, r0
 8002e34:	428b      	cmp	r3, r1
 8002e36:	bf01      	itttt	eq
 8002e38:	6819      	ldreq	r1, [r3, #0]
 8002e3a:	685b      	ldreq	r3, [r3, #4]
 8002e3c:	1809      	addeq	r1, r1, r0
 8002e3e:	6021      	streq	r1, [r4, #0]
 8002e40:	6063      	str	r3, [r4, #4]
 8002e42:	6054      	str	r4, [r2, #4]
 8002e44:	e7cb      	b.n	8002dde <_free_r+0x22>
 8002e46:	bd38      	pop	{r3, r4, r5, pc}
 8002e48:	20000280 	.word	0x20000280

08002e4c <sbrk_aligned>:
 8002e4c:	b570      	push	{r4, r5, r6, lr}
 8002e4e:	4e0f      	ldr	r6, [pc, #60]	@ (8002e8c <sbrk_aligned+0x40>)
 8002e50:	460c      	mov	r4, r1
 8002e52:	6831      	ldr	r1, [r6, #0]
 8002e54:	4605      	mov	r5, r0
 8002e56:	b911      	cbnz	r1, 8002e5e <sbrk_aligned+0x12>
 8002e58:	f000 fca2 	bl	80037a0 <_sbrk_r>
 8002e5c:	6030      	str	r0, [r6, #0]
 8002e5e:	4621      	mov	r1, r4
 8002e60:	4628      	mov	r0, r5
 8002e62:	f000 fc9d 	bl	80037a0 <_sbrk_r>
 8002e66:	1c43      	adds	r3, r0, #1
 8002e68:	d103      	bne.n	8002e72 <sbrk_aligned+0x26>
 8002e6a:	f04f 34ff 	mov.w	r4, #4294967295
 8002e6e:	4620      	mov	r0, r4
 8002e70:	bd70      	pop	{r4, r5, r6, pc}
 8002e72:	1cc4      	adds	r4, r0, #3
 8002e74:	f024 0403 	bic.w	r4, r4, #3
 8002e78:	42a0      	cmp	r0, r4
 8002e7a:	d0f8      	beq.n	8002e6e <sbrk_aligned+0x22>
 8002e7c:	1a21      	subs	r1, r4, r0
 8002e7e:	4628      	mov	r0, r5
 8002e80:	f000 fc8e 	bl	80037a0 <_sbrk_r>
 8002e84:	3001      	adds	r0, #1
 8002e86:	d1f2      	bne.n	8002e6e <sbrk_aligned+0x22>
 8002e88:	e7ef      	b.n	8002e6a <sbrk_aligned+0x1e>
 8002e8a:	bf00      	nop
 8002e8c:	2000027c 	.word	0x2000027c

08002e90 <_malloc_r>:
 8002e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e94:	1ccd      	adds	r5, r1, #3
 8002e96:	f025 0503 	bic.w	r5, r5, #3
 8002e9a:	3508      	adds	r5, #8
 8002e9c:	2d0c      	cmp	r5, #12
 8002e9e:	bf38      	it	cc
 8002ea0:	250c      	movcc	r5, #12
 8002ea2:	2d00      	cmp	r5, #0
 8002ea4:	4606      	mov	r6, r0
 8002ea6:	db01      	blt.n	8002eac <_malloc_r+0x1c>
 8002ea8:	42a9      	cmp	r1, r5
 8002eaa:	d904      	bls.n	8002eb6 <_malloc_r+0x26>
 8002eac:	230c      	movs	r3, #12
 8002eae:	6033      	str	r3, [r6, #0]
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f8c <_malloc_r+0xfc>
 8002eba:	f000 f869 	bl	8002f90 <__malloc_lock>
 8002ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8002ec2:	461c      	mov	r4, r3
 8002ec4:	bb44      	cbnz	r4, 8002f18 <_malloc_r+0x88>
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	4630      	mov	r0, r6
 8002eca:	f7ff ffbf 	bl	8002e4c <sbrk_aligned>
 8002ece:	1c43      	adds	r3, r0, #1
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	d158      	bne.n	8002f86 <_malloc_r+0xf6>
 8002ed4:	f8d8 4000 	ldr.w	r4, [r8]
 8002ed8:	4627      	mov	r7, r4
 8002eda:	2f00      	cmp	r7, #0
 8002edc:	d143      	bne.n	8002f66 <_malloc_r+0xd6>
 8002ede:	2c00      	cmp	r4, #0
 8002ee0:	d04b      	beq.n	8002f7a <_malloc_r+0xea>
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	4639      	mov	r1, r7
 8002ee6:	4630      	mov	r0, r6
 8002ee8:	eb04 0903 	add.w	r9, r4, r3
 8002eec:	f000 fc58 	bl	80037a0 <_sbrk_r>
 8002ef0:	4581      	cmp	r9, r0
 8002ef2:	d142      	bne.n	8002f7a <_malloc_r+0xea>
 8002ef4:	6821      	ldr	r1, [r4, #0]
 8002ef6:	4630      	mov	r0, r6
 8002ef8:	1a6d      	subs	r5, r5, r1
 8002efa:	4629      	mov	r1, r5
 8002efc:	f7ff ffa6 	bl	8002e4c <sbrk_aligned>
 8002f00:	3001      	adds	r0, #1
 8002f02:	d03a      	beq.n	8002f7a <_malloc_r+0xea>
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	442b      	add	r3, r5
 8002f08:	6023      	str	r3, [r4, #0]
 8002f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	bb62      	cbnz	r2, 8002f6c <_malloc_r+0xdc>
 8002f12:	f8c8 7000 	str.w	r7, [r8]
 8002f16:	e00f      	b.n	8002f38 <_malloc_r+0xa8>
 8002f18:	6822      	ldr	r2, [r4, #0]
 8002f1a:	1b52      	subs	r2, r2, r5
 8002f1c:	d420      	bmi.n	8002f60 <_malloc_r+0xd0>
 8002f1e:	2a0b      	cmp	r2, #11
 8002f20:	d917      	bls.n	8002f52 <_malloc_r+0xc2>
 8002f22:	1961      	adds	r1, r4, r5
 8002f24:	42a3      	cmp	r3, r4
 8002f26:	6025      	str	r5, [r4, #0]
 8002f28:	bf18      	it	ne
 8002f2a:	6059      	strne	r1, [r3, #4]
 8002f2c:	6863      	ldr	r3, [r4, #4]
 8002f2e:	bf08      	it	eq
 8002f30:	f8c8 1000 	streq.w	r1, [r8]
 8002f34:	5162      	str	r2, [r4, r5]
 8002f36:	604b      	str	r3, [r1, #4]
 8002f38:	4630      	mov	r0, r6
 8002f3a:	f000 f82f 	bl	8002f9c <__malloc_unlock>
 8002f3e:	f104 000b 	add.w	r0, r4, #11
 8002f42:	1d23      	adds	r3, r4, #4
 8002f44:	f020 0007 	bic.w	r0, r0, #7
 8002f48:	1ac2      	subs	r2, r0, r3
 8002f4a:	bf1c      	itt	ne
 8002f4c:	1a1b      	subne	r3, r3, r0
 8002f4e:	50a3      	strne	r3, [r4, r2]
 8002f50:	e7af      	b.n	8002eb2 <_malloc_r+0x22>
 8002f52:	6862      	ldr	r2, [r4, #4]
 8002f54:	42a3      	cmp	r3, r4
 8002f56:	bf0c      	ite	eq
 8002f58:	f8c8 2000 	streq.w	r2, [r8]
 8002f5c:	605a      	strne	r2, [r3, #4]
 8002f5e:	e7eb      	b.n	8002f38 <_malloc_r+0xa8>
 8002f60:	4623      	mov	r3, r4
 8002f62:	6864      	ldr	r4, [r4, #4]
 8002f64:	e7ae      	b.n	8002ec4 <_malloc_r+0x34>
 8002f66:	463c      	mov	r4, r7
 8002f68:	687f      	ldr	r7, [r7, #4]
 8002f6a:	e7b6      	b.n	8002eda <_malloc_r+0x4a>
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	42a3      	cmp	r3, r4
 8002f72:	d1fb      	bne.n	8002f6c <_malloc_r+0xdc>
 8002f74:	2300      	movs	r3, #0
 8002f76:	6053      	str	r3, [r2, #4]
 8002f78:	e7de      	b.n	8002f38 <_malloc_r+0xa8>
 8002f7a:	230c      	movs	r3, #12
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	6033      	str	r3, [r6, #0]
 8002f80:	f000 f80c 	bl	8002f9c <__malloc_unlock>
 8002f84:	e794      	b.n	8002eb0 <_malloc_r+0x20>
 8002f86:	6005      	str	r5, [r0, #0]
 8002f88:	e7d6      	b.n	8002f38 <_malloc_r+0xa8>
 8002f8a:	bf00      	nop
 8002f8c:	20000280 	.word	0x20000280

08002f90 <__malloc_lock>:
 8002f90:	4801      	ldr	r0, [pc, #4]	@ (8002f98 <__malloc_lock+0x8>)
 8002f92:	f7ff bf10 	b.w	8002db6 <__retarget_lock_acquire_recursive>
 8002f96:	bf00      	nop
 8002f98:	20000278 	.word	0x20000278

08002f9c <__malloc_unlock>:
 8002f9c:	4801      	ldr	r0, [pc, #4]	@ (8002fa4 <__malloc_unlock+0x8>)
 8002f9e:	f7ff bf0b 	b.w	8002db8 <__retarget_lock_release_recursive>
 8002fa2:	bf00      	nop
 8002fa4:	20000278 	.word	0x20000278

08002fa8 <__sfputc_r>:
 8002fa8:	6893      	ldr	r3, [r2, #8]
 8002faa:	b410      	push	{r4}
 8002fac:	3b01      	subs	r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	6093      	str	r3, [r2, #8]
 8002fb2:	da07      	bge.n	8002fc4 <__sfputc_r+0x1c>
 8002fb4:	6994      	ldr	r4, [r2, #24]
 8002fb6:	42a3      	cmp	r3, r4
 8002fb8:	db01      	blt.n	8002fbe <__sfputc_r+0x16>
 8002fba:	290a      	cmp	r1, #10
 8002fbc:	d102      	bne.n	8002fc4 <__sfputc_r+0x1c>
 8002fbe:	bc10      	pop	{r4}
 8002fc0:	f7ff bdeb 	b.w	8002b9a <__swbuf_r>
 8002fc4:	6813      	ldr	r3, [r2, #0]
 8002fc6:	1c58      	adds	r0, r3, #1
 8002fc8:	6010      	str	r0, [r2, #0]
 8002fca:	7019      	strb	r1, [r3, #0]
 8002fcc:	4608      	mov	r0, r1
 8002fce:	bc10      	pop	{r4}
 8002fd0:	4770      	bx	lr

08002fd2 <__sfputs_r>:
 8002fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd4:	4606      	mov	r6, r0
 8002fd6:	460f      	mov	r7, r1
 8002fd8:	4614      	mov	r4, r2
 8002fda:	18d5      	adds	r5, r2, r3
 8002fdc:	42ac      	cmp	r4, r5
 8002fde:	d101      	bne.n	8002fe4 <__sfputs_r+0x12>
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	e007      	b.n	8002ff4 <__sfputs_r+0x22>
 8002fe4:	463a      	mov	r2, r7
 8002fe6:	4630      	mov	r0, r6
 8002fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fec:	f7ff ffdc 	bl	8002fa8 <__sfputc_r>
 8002ff0:	1c43      	adds	r3, r0, #1
 8002ff2:	d1f3      	bne.n	8002fdc <__sfputs_r+0xa>
 8002ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ff8 <_vfiprintf_r>:
 8002ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ffc:	460d      	mov	r5, r1
 8002ffe:	4614      	mov	r4, r2
 8003000:	4698      	mov	r8, r3
 8003002:	4606      	mov	r6, r0
 8003004:	b09d      	sub	sp, #116	@ 0x74
 8003006:	b118      	cbz	r0, 8003010 <_vfiprintf_r+0x18>
 8003008:	6a03      	ldr	r3, [r0, #32]
 800300a:	b90b      	cbnz	r3, 8003010 <_vfiprintf_r+0x18>
 800300c:	f7ff fcdc 	bl	80029c8 <__sinit>
 8003010:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003012:	07d9      	lsls	r1, r3, #31
 8003014:	d405      	bmi.n	8003022 <_vfiprintf_r+0x2a>
 8003016:	89ab      	ldrh	r3, [r5, #12]
 8003018:	059a      	lsls	r2, r3, #22
 800301a:	d402      	bmi.n	8003022 <_vfiprintf_r+0x2a>
 800301c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800301e:	f7ff feca 	bl	8002db6 <__retarget_lock_acquire_recursive>
 8003022:	89ab      	ldrh	r3, [r5, #12]
 8003024:	071b      	lsls	r3, r3, #28
 8003026:	d501      	bpl.n	800302c <_vfiprintf_r+0x34>
 8003028:	692b      	ldr	r3, [r5, #16]
 800302a:	b99b      	cbnz	r3, 8003054 <_vfiprintf_r+0x5c>
 800302c:	4629      	mov	r1, r5
 800302e:	4630      	mov	r0, r6
 8003030:	f7ff fdf2 	bl	8002c18 <__swsetup_r>
 8003034:	b170      	cbz	r0, 8003054 <_vfiprintf_r+0x5c>
 8003036:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003038:	07dc      	lsls	r4, r3, #31
 800303a:	d504      	bpl.n	8003046 <_vfiprintf_r+0x4e>
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	b01d      	add	sp, #116	@ 0x74
 8003042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003046:	89ab      	ldrh	r3, [r5, #12]
 8003048:	0598      	lsls	r0, r3, #22
 800304a:	d4f7      	bmi.n	800303c <_vfiprintf_r+0x44>
 800304c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800304e:	f7ff feb3 	bl	8002db8 <__retarget_lock_release_recursive>
 8003052:	e7f3      	b.n	800303c <_vfiprintf_r+0x44>
 8003054:	2300      	movs	r3, #0
 8003056:	9309      	str	r3, [sp, #36]	@ 0x24
 8003058:	2320      	movs	r3, #32
 800305a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800305e:	2330      	movs	r3, #48	@ 0x30
 8003060:	f04f 0901 	mov.w	r9, #1
 8003064:	f8cd 800c 	str.w	r8, [sp, #12]
 8003068:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003214 <_vfiprintf_r+0x21c>
 800306c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003070:	4623      	mov	r3, r4
 8003072:	469a      	mov	sl, r3
 8003074:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003078:	b10a      	cbz	r2, 800307e <_vfiprintf_r+0x86>
 800307a:	2a25      	cmp	r2, #37	@ 0x25
 800307c:	d1f9      	bne.n	8003072 <_vfiprintf_r+0x7a>
 800307e:	ebba 0b04 	subs.w	fp, sl, r4
 8003082:	d00b      	beq.n	800309c <_vfiprintf_r+0xa4>
 8003084:	465b      	mov	r3, fp
 8003086:	4622      	mov	r2, r4
 8003088:	4629      	mov	r1, r5
 800308a:	4630      	mov	r0, r6
 800308c:	f7ff ffa1 	bl	8002fd2 <__sfputs_r>
 8003090:	3001      	adds	r0, #1
 8003092:	f000 80a7 	beq.w	80031e4 <_vfiprintf_r+0x1ec>
 8003096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003098:	445a      	add	r2, fp
 800309a:	9209      	str	r2, [sp, #36]	@ 0x24
 800309c:	f89a 3000 	ldrb.w	r3, [sl]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 809f 	beq.w	80031e4 <_vfiprintf_r+0x1ec>
 80030a6:	2300      	movs	r3, #0
 80030a8:	f04f 32ff 	mov.w	r2, #4294967295
 80030ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030b0:	f10a 0a01 	add.w	sl, sl, #1
 80030b4:	9304      	str	r3, [sp, #16]
 80030b6:	9307      	str	r3, [sp, #28]
 80030b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80030bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80030be:	4654      	mov	r4, sl
 80030c0:	2205      	movs	r2, #5
 80030c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030c6:	4853      	ldr	r0, [pc, #332]	@ (8003214 <_vfiprintf_r+0x21c>)
 80030c8:	f000 fb7a 	bl	80037c0 <memchr>
 80030cc:	9a04      	ldr	r2, [sp, #16]
 80030ce:	b9d8      	cbnz	r0, 8003108 <_vfiprintf_r+0x110>
 80030d0:	06d1      	lsls	r1, r2, #27
 80030d2:	bf44      	itt	mi
 80030d4:	2320      	movmi	r3, #32
 80030d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80030da:	0713      	lsls	r3, r2, #28
 80030dc:	bf44      	itt	mi
 80030de:	232b      	movmi	r3, #43	@ 0x2b
 80030e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80030e4:	f89a 3000 	ldrb.w	r3, [sl]
 80030e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80030ea:	d015      	beq.n	8003118 <_vfiprintf_r+0x120>
 80030ec:	4654      	mov	r4, sl
 80030ee:	2000      	movs	r0, #0
 80030f0:	f04f 0c0a 	mov.w	ip, #10
 80030f4:	9a07      	ldr	r2, [sp, #28]
 80030f6:	4621      	mov	r1, r4
 80030f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030fc:	3b30      	subs	r3, #48	@ 0x30
 80030fe:	2b09      	cmp	r3, #9
 8003100:	d94b      	bls.n	800319a <_vfiprintf_r+0x1a2>
 8003102:	b1b0      	cbz	r0, 8003132 <_vfiprintf_r+0x13a>
 8003104:	9207      	str	r2, [sp, #28]
 8003106:	e014      	b.n	8003132 <_vfiprintf_r+0x13a>
 8003108:	eba0 0308 	sub.w	r3, r0, r8
 800310c:	fa09 f303 	lsl.w	r3, r9, r3
 8003110:	4313      	orrs	r3, r2
 8003112:	46a2      	mov	sl, r4
 8003114:	9304      	str	r3, [sp, #16]
 8003116:	e7d2      	b.n	80030be <_vfiprintf_r+0xc6>
 8003118:	9b03      	ldr	r3, [sp, #12]
 800311a:	1d19      	adds	r1, r3, #4
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	9103      	str	r1, [sp, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	bfbb      	ittet	lt
 8003124:	425b      	neglt	r3, r3
 8003126:	f042 0202 	orrlt.w	r2, r2, #2
 800312a:	9307      	strge	r3, [sp, #28]
 800312c:	9307      	strlt	r3, [sp, #28]
 800312e:	bfb8      	it	lt
 8003130:	9204      	strlt	r2, [sp, #16]
 8003132:	7823      	ldrb	r3, [r4, #0]
 8003134:	2b2e      	cmp	r3, #46	@ 0x2e
 8003136:	d10a      	bne.n	800314e <_vfiprintf_r+0x156>
 8003138:	7863      	ldrb	r3, [r4, #1]
 800313a:	2b2a      	cmp	r3, #42	@ 0x2a
 800313c:	d132      	bne.n	80031a4 <_vfiprintf_r+0x1ac>
 800313e:	9b03      	ldr	r3, [sp, #12]
 8003140:	3402      	adds	r4, #2
 8003142:	1d1a      	adds	r2, r3, #4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	9203      	str	r2, [sp, #12]
 8003148:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800314c:	9305      	str	r3, [sp, #20]
 800314e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003218 <_vfiprintf_r+0x220>
 8003152:	2203      	movs	r2, #3
 8003154:	4650      	mov	r0, sl
 8003156:	7821      	ldrb	r1, [r4, #0]
 8003158:	f000 fb32 	bl	80037c0 <memchr>
 800315c:	b138      	cbz	r0, 800316e <_vfiprintf_r+0x176>
 800315e:	2240      	movs	r2, #64	@ 0x40
 8003160:	9b04      	ldr	r3, [sp, #16]
 8003162:	eba0 000a 	sub.w	r0, r0, sl
 8003166:	4082      	lsls	r2, r0
 8003168:	4313      	orrs	r3, r2
 800316a:	3401      	adds	r4, #1
 800316c:	9304      	str	r3, [sp, #16]
 800316e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003172:	2206      	movs	r2, #6
 8003174:	4829      	ldr	r0, [pc, #164]	@ (800321c <_vfiprintf_r+0x224>)
 8003176:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800317a:	f000 fb21 	bl	80037c0 <memchr>
 800317e:	2800      	cmp	r0, #0
 8003180:	d03f      	beq.n	8003202 <_vfiprintf_r+0x20a>
 8003182:	4b27      	ldr	r3, [pc, #156]	@ (8003220 <_vfiprintf_r+0x228>)
 8003184:	bb1b      	cbnz	r3, 80031ce <_vfiprintf_r+0x1d6>
 8003186:	9b03      	ldr	r3, [sp, #12]
 8003188:	3307      	adds	r3, #7
 800318a:	f023 0307 	bic.w	r3, r3, #7
 800318e:	3308      	adds	r3, #8
 8003190:	9303      	str	r3, [sp, #12]
 8003192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003194:	443b      	add	r3, r7
 8003196:	9309      	str	r3, [sp, #36]	@ 0x24
 8003198:	e76a      	b.n	8003070 <_vfiprintf_r+0x78>
 800319a:	460c      	mov	r4, r1
 800319c:	2001      	movs	r0, #1
 800319e:	fb0c 3202 	mla	r2, ip, r2, r3
 80031a2:	e7a8      	b.n	80030f6 <_vfiprintf_r+0xfe>
 80031a4:	2300      	movs	r3, #0
 80031a6:	f04f 0c0a 	mov.w	ip, #10
 80031aa:	4619      	mov	r1, r3
 80031ac:	3401      	adds	r4, #1
 80031ae:	9305      	str	r3, [sp, #20]
 80031b0:	4620      	mov	r0, r4
 80031b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031b6:	3a30      	subs	r2, #48	@ 0x30
 80031b8:	2a09      	cmp	r2, #9
 80031ba:	d903      	bls.n	80031c4 <_vfiprintf_r+0x1cc>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0c6      	beq.n	800314e <_vfiprintf_r+0x156>
 80031c0:	9105      	str	r1, [sp, #20]
 80031c2:	e7c4      	b.n	800314e <_vfiprintf_r+0x156>
 80031c4:	4604      	mov	r4, r0
 80031c6:	2301      	movs	r3, #1
 80031c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80031cc:	e7f0      	b.n	80031b0 <_vfiprintf_r+0x1b8>
 80031ce:	ab03      	add	r3, sp, #12
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	462a      	mov	r2, r5
 80031d4:	4630      	mov	r0, r6
 80031d6:	4b13      	ldr	r3, [pc, #76]	@ (8003224 <_vfiprintf_r+0x22c>)
 80031d8:	a904      	add	r1, sp, #16
 80031da:	f3af 8000 	nop.w
 80031de:	4607      	mov	r7, r0
 80031e0:	1c78      	adds	r0, r7, #1
 80031e2:	d1d6      	bne.n	8003192 <_vfiprintf_r+0x19a>
 80031e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80031e6:	07d9      	lsls	r1, r3, #31
 80031e8:	d405      	bmi.n	80031f6 <_vfiprintf_r+0x1fe>
 80031ea:	89ab      	ldrh	r3, [r5, #12]
 80031ec:	059a      	lsls	r2, r3, #22
 80031ee:	d402      	bmi.n	80031f6 <_vfiprintf_r+0x1fe>
 80031f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80031f2:	f7ff fde1 	bl	8002db8 <__retarget_lock_release_recursive>
 80031f6:	89ab      	ldrh	r3, [r5, #12]
 80031f8:	065b      	lsls	r3, r3, #25
 80031fa:	f53f af1f 	bmi.w	800303c <_vfiprintf_r+0x44>
 80031fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003200:	e71e      	b.n	8003040 <_vfiprintf_r+0x48>
 8003202:	ab03      	add	r3, sp, #12
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	462a      	mov	r2, r5
 8003208:	4630      	mov	r0, r6
 800320a:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <_vfiprintf_r+0x22c>)
 800320c:	a904      	add	r1, sp, #16
 800320e:	f000 f87d 	bl	800330c <_printf_i>
 8003212:	e7e4      	b.n	80031de <_vfiprintf_r+0x1e6>
 8003214:	08003c1e 	.word	0x08003c1e
 8003218:	08003c24 	.word	0x08003c24
 800321c:	08003c28 	.word	0x08003c28
 8003220:	00000000 	.word	0x00000000
 8003224:	08002fd3 	.word	0x08002fd3

08003228 <_printf_common>:
 8003228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800322c:	4616      	mov	r6, r2
 800322e:	4698      	mov	r8, r3
 8003230:	688a      	ldr	r2, [r1, #8]
 8003232:	690b      	ldr	r3, [r1, #16]
 8003234:	4607      	mov	r7, r0
 8003236:	4293      	cmp	r3, r2
 8003238:	bfb8      	it	lt
 800323a:	4613      	movlt	r3, r2
 800323c:	6033      	str	r3, [r6, #0]
 800323e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003242:	460c      	mov	r4, r1
 8003244:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003248:	b10a      	cbz	r2, 800324e <_printf_common+0x26>
 800324a:	3301      	adds	r3, #1
 800324c:	6033      	str	r3, [r6, #0]
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	0699      	lsls	r1, r3, #26
 8003252:	bf42      	ittt	mi
 8003254:	6833      	ldrmi	r3, [r6, #0]
 8003256:	3302      	addmi	r3, #2
 8003258:	6033      	strmi	r3, [r6, #0]
 800325a:	6825      	ldr	r5, [r4, #0]
 800325c:	f015 0506 	ands.w	r5, r5, #6
 8003260:	d106      	bne.n	8003270 <_printf_common+0x48>
 8003262:	f104 0a19 	add.w	sl, r4, #25
 8003266:	68e3      	ldr	r3, [r4, #12]
 8003268:	6832      	ldr	r2, [r6, #0]
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	42ab      	cmp	r3, r5
 800326e:	dc2b      	bgt.n	80032c8 <_printf_common+0xa0>
 8003270:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003274:	6822      	ldr	r2, [r4, #0]
 8003276:	3b00      	subs	r3, #0
 8003278:	bf18      	it	ne
 800327a:	2301      	movne	r3, #1
 800327c:	0692      	lsls	r2, r2, #26
 800327e:	d430      	bmi.n	80032e2 <_printf_common+0xba>
 8003280:	4641      	mov	r1, r8
 8003282:	4638      	mov	r0, r7
 8003284:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003288:	47c8      	blx	r9
 800328a:	3001      	adds	r0, #1
 800328c:	d023      	beq.n	80032d6 <_printf_common+0xae>
 800328e:	6823      	ldr	r3, [r4, #0]
 8003290:	6922      	ldr	r2, [r4, #16]
 8003292:	f003 0306 	and.w	r3, r3, #6
 8003296:	2b04      	cmp	r3, #4
 8003298:	bf14      	ite	ne
 800329a:	2500      	movne	r5, #0
 800329c:	6833      	ldreq	r3, [r6, #0]
 800329e:	f04f 0600 	mov.w	r6, #0
 80032a2:	bf08      	it	eq
 80032a4:	68e5      	ldreq	r5, [r4, #12]
 80032a6:	f104 041a 	add.w	r4, r4, #26
 80032aa:	bf08      	it	eq
 80032ac:	1aed      	subeq	r5, r5, r3
 80032ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80032b2:	bf08      	it	eq
 80032b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032b8:	4293      	cmp	r3, r2
 80032ba:	bfc4      	itt	gt
 80032bc:	1a9b      	subgt	r3, r3, r2
 80032be:	18ed      	addgt	r5, r5, r3
 80032c0:	42b5      	cmp	r5, r6
 80032c2:	d11a      	bne.n	80032fa <_printf_common+0xd2>
 80032c4:	2000      	movs	r0, #0
 80032c6:	e008      	b.n	80032da <_printf_common+0xb2>
 80032c8:	2301      	movs	r3, #1
 80032ca:	4652      	mov	r2, sl
 80032cc:	4641      	mov	r1, r8
 80032ce:	4638      	mov	r0, r7
 80032d0:	47c8      	blx	r9
 80032d2:	3001      	adds	r0, #1
 80032d4:	d103      	bne.n	80032de <_printf_common+0xb6>
 80032d6:	f04f 30ff 	mov.w	r0, #4294967295
 80032da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032de:	3501      	adds	r5, #1
 80032e0:	e7c1      	b.n	8003266 <_printf_common+0x3e>
 80032e2:	2030      	movs	r0, #48	@ 0x30
 80032e4:	18e1      	adds	r1, r4, r3
 80032e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80032f0:	4422      	add	r2, r4
 80032f2:	3302      	adds	r3, #2
 80032f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80032f8:	e7c2      	b.n	8003280 <_printf_common+0x58>
 80032fa:	2301      	movs	r3, #1
 80032fc:	4622      	mov	r2, r4
 80032fe:	4641      	mov	r1, r8
 8003300:	4638      	mov	r0, r7
 8003302:	47c8      	blx	r9
 8003304:	3001      	adds	r0, #1
 8003306:	d0e6      	beq.n	80032d6 <_printf_common+0xae>
 8003308:	3601      	adds	r6, #1
 800330a:	e7d9      	b.n	80032c0 <_printf_common+0x98>

0800330c <_printf_i>:
 800330c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003310:	7e0f      	ldrb	r7, [r1, #24]
 8003312:	4691      	mov	r9, r2
 8003314:	2f78      	cmp	r7, #120	@ 0x78
 8003316:	4680      	mov	r8, r0
 8003318:	460c      	mov	r4, r1
 800331a:	469a      	mov	sl, r3
 800331c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800331e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003322:	d807      	bhi.n	8003334 <_printf_i+0x28>
 8003324:	2f62      	cmp	r7, #98	@ 0x62
 8003326:	d80a      	bhi.n	800333e <_printf_i+0x32>
 8003328:	2f00      	cmp	r7, #0
 800332a:	f000 80d1 	beq.w	80034d0 <_printf_i+0x1c4>
 800332e:	2f58      	cmp	r7, #88	@ 0x58
 8003330:	f000 80b8 	beq.w	80034a4 <_printf_i+0x198>
 8003334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003338:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800333c:	e03a      	b.n	80033b4 <_printf_i+0xa8>
 800333e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003342:	2b15      	cmp	r3, #21
 8003344:	d8f6      	bhi.n	8003334 <_printf_i+0x28>
 8003346:	a101      	add	r1, pc, #4	@ (adr r1, 800334c <_printf_i+0x40>)
 8003348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800334c:	080033a5 	.word	0x080033a5
 8003350:	080033b9 	.word	0x080033b9
 8003354:	08003335 	.word	0x08003335
 8003358:	08003335 	.word	0x08003335
 800335c:	08003335 	.word	0x08003335
 8003360:	08003335 	.word	0x08003335
 8003364:	080033b9 	.word	0x080033b9
 8003368:	08003335 	.word	0x08003335
 800336c:	08003335 	.word	0x08003335
 8003370:	08003335 	.word	0x08003335
 8003374:	08003335 	.word	0x08003335
 8003378:	080034b7 	.word	0x080034b7
 800337c:	080033e3 	.word	0x080033e3
 8003380:	08003471 	.word	0x08003471
 8003384:	08003335 	.word	0x08003335
 8003388:	08003335 	.word	0x08003335
 800338c:	080034d9 	.word	0x080034d9
 8003390:	08003335 	.word	0x08003335
 8003394:	080033e3 	.word	0x080033e3
 8003398:	08003335 	.word	0x08003335
 800339c:	08003335 	.word	0x08003335
 80033a0:	08003479 	.word	0x08003479
 80033a4:	6833      	ldr	r3, [r6, #0]
 80033a6:	1d1a      	adds	r2, r3, #4
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6032      	str	r2, [r6, #0]
 80033ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80033b4:	2301      	movs	r3, #1
 80033b6:	e09c      	b.n	80034f2 <_printf_i+0x1e6>
 80033b8:	6833      	ldr	r3, [r6, #0]
 80033ba:	6820      	ldr	r0, [r4, #0]
 80033bc:	1d19      	adds	r1, r3, #4
 80033be:	6031      	str	r1, [r6, #0]
 80033c0:	0606      	lsls	r6, r0, #24
 80033c2:	d501      	bpl.n	80033c8 <_printf_i+0xbc>
 80033c4:	681d      	ldr	r5, [r3, #0]
 80033c6:	e003      	b.n	80033d0 <_printf_i+0xc4>
 80033c8:	0645      	lsls	r5, r0, #25
 80033ca:	d5fb      	bpl.n	80033c4 <_printf_i+0xb8>
 80033cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80033d0:	2d00      	cmp	r5, #0
 80033d2:	da03      	bge.n	80033dc <_printf_i+0xd0>
 80033d4:	232d      	movs	r3, #45	@ 0x2d
 80033d6:	426d      	negs	r5, r5
 80033d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033dc:	230a      	movs	r3, #10
 80033de:	4858      	ldr	r0, [pc, #352]	@ (8003540 <_printf_i+0x234>)
 80033e0:	e011      	b.n	8003406 <_printf_i+0xfa>
 80033e2:	6821      	ldr	r1, [r4, #0]
 80033e4:	6833      	ldr	r3, [r6, #0]
 80033e6:	0608      	lsls	r0, r1, #24
 80033e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80033ec:	d402      	bmi.n	80033f4 <_printf_i+0xe8>
 80033ee:	0649      	lsls	r1, r1, #25
 80033f0:	bf48      	it	mi
 80033f2:	b2ad      	uxthmi	r5, r5
 80033f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80033f6:	6033      	str	r3, [r6, #0]
 80033f8:	bf14      	ite	ne
 80033fa:	230a      	movne	r3, #10
 80033fc:	2308      	moveq	r3, #8
 80033fe:	4850      	ldr	r0, [pc, #320]	@ (8003540 <_printf_i+0x234>)
 8003400:	2100      	movs	r1, #0
 8003402:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003406:	6866      	ldr	r6, [r4, #4]
 8003408:	2e00      	cmp	r6, #0
 800340a:	60a6      	str	r6, [r4, #8]
 800340c:	db05      	blt.n	800341a <_printf_i+0x10e>
 800340e:	6821      	ldr	r1, [r4, #0]
 8003410:	432e      	orrs	r6, r5
 8003412:	f021 0104 	bic.w	r1, r1, #4
 8003416:	6021      	str	r1, [r4, #0]
 8003418:	d04b      	beq.n	80034b2 <_printf_i+0x1a6>
 800341a:	4616      	mov	r6, r2
 800341c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003420:	fb03 5711 	mls	r7, r3, r1, r5
 8003424:	5dc7      	ldrb	r7, [r0, r7]
 8003426:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800342a:	462f      	mov	r7, r5
 800342c:	42bb      	cmp	r3, r7
 800342e:	460d      	mov	r5, r1
 8003430:	d9f4      	bls.n	800341c <_printf_i+0x110>
 8003432:	2b08      	cmp	r3, #8
 8003434:	d10b      	bne.n	800344e <_printf_i+0x142>
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	07df      	lsls	r7, r3, #31
 800343a:	d508      	bpl.n	800344e <_printf_i+0x142>
 800343c:	6923      	ldr	r3, [r4, #16]
 800343e:	6861      	ldr	r1, [r4, #4]
 8003440:	4299      	cmp	r1, r3
 8003442:	bfde      	ittt	le
 8003444:	2330      	movle	r3, #48	@ 0x30
 8003446:	f806 3c01 	strble.w	r3, [r6, #-1]
 800344a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800344e:	1b92      	subs	r2, r2, r6
 8003450:	6122      	str	r2, [r4, #16]
 8003452:	464b      	mov	r3, r9
 8003454:	4621      	mov	r1, r4
 8003456:	4640      	mov	r0, r8
 8003458:	f8cd a000 	str.w	sl, [sp]
 800345c:	aa03      	add	r2, sp, #12
 800345e:	f7ff fee3 	bl	8003228 <_printf_common>
 8003462:	3001      	adds	r0, #1
 8003464:	d14a      	bne.n	80034fc <_printf_i+0x1f0>
 8003466:	f04f 30ff 	mov.w	r0, #4294967295
 800346a:	b004      	add	sp, #16
 800346c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	f043 0320 	orr.w	r3, r3, #32
 8003476:	6023      	str	r3, [r4, #0]
 8003478:	2778      	movs	r7, #120	@ 0x78
 800347a:	4832      	ldr	r0, [pc, #200]	@ (8003544 <_printf_i+0x238>)
 800347c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	6831      	ldr	r1, [r6, #0]
 8003484:	061f      	lsls	r7, r3, #24
 8003486:	f851 5b04 	ldr.w	r5, [r1], #4
 800348a:	d402      	bmi.n	8003492 <_printf_i+0x186>
 800348c:	065f      	lsls	r7, r3, #25
 800348e:	bf48      	it	mi
 8003490:	b2ad      	uxthmi	r5, r5
 8003492:	6031      	str	r1, [r6, #0]
 8003494:	07d9      	lsls	r1, r3, #31
 8003496:	bf44      	itt	mi
 8003498:	f043 0320 	orrmi.w	r3, r3, #32
 800349c:	6023      	strmi	r3, [r4, #0]
 800349e:	b11d      	cbz	r5, 80034a8 <_printf_i+0x19c>
 80034a0:	2310      	movs	r3, #16
 80034a2:	e7ad      	b.n	8003400 <_printf_i+0xf4>
 80034a4:	4826      	ldr	r0, [pc, #152]	@ (8003540 <_printf_i+0x234>)
 80034a6:	e7e9      	b.n	800347c <_printf_i+0x170>
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	f023 0320 	bic.w	r3, r3, #32
 80034ae:	6023      	str	r3, [r4, #0]
 80034b0:	e7f6      	b.n	80034a0 <_printf_i+0x194>
 80034b2:	4616      	mov	r6, r2
 80034b4:	e7bd      	b.n	8003432 <_printf_i+0x126>
 80034b6:	6833      	ldr	r3, [r6, #0]
 80034b8:	6825      	ldr	r5, [r4, #0]
 80034ba:	1d18      	adds	r0, r3, #4
 80034bc:	6961      	ldr	r1, [r4, #20]
 80034be:	6030      	str	r0, [r6, #0]
 80034c0:	062e      	lsls	r6, r5, #24
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	d501      	bpl.n	80034ca <_printf_i+0x1be>
 80034c6:	6019      	str	r1, [r3, #0]
 80034c8:	e002      	b.n	80034d0 <_printf_i+0x1c4>
 80034ca:	0668      	lsls	r0, r5, #25
 80034cc:	d5fb      	bpl.n	80034c6 <_printf_i+0x1ba>
 80034ce:	8019      	strh	r1, [r3, #0]
 80034d0:	2300      	movs	r3, #0
 80034d2:	4616      	mov	r6, r2
 80034d4:	6123      	str	r3, [r4, #16]
 80034d6:	e7bc      	b.n	8003452 <_printf_i+0x146>
 80034d8:	6833      	ldr	r3, [r6, #0]
 80034da:	2100      	movs	r1, #0
 80034dc:	1d1a      	adds	r2, r3, #4
 80034de:	6032      	str	r2, [r6, #0]
 80034e0:	681e      	ldr	r6, [r3, #0]
 80034e2:	6862      	ldr	r2, [r4, #4]
 80034e4:	4630      	mov	r0, r6
 80034e6:	f000 f96b 	bl	80037c0 <memchr>
 80034ea:	b108      	cbz	r0, 80034f0 <_printf_i+0x1e4>
 80034ec:	1b80      	subs	r0, r0, r6
 80034ee:	6060      	str	r0, [r4, #4]
 80034f0:	6863      	ldr	r3, [r4, #4]
 80034f2:	6123      	str	r3, [r4, #16]
 80034f4:	2300      	movs	r3, #0
 80034f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034fa:	e7aa      	b.n	8003452 <_printf_i+0x146>
 80034fc:	4632      	mov	r2, r6
 80034fe:	4649      	mov	r1, r9
 8003500:	4640      	mov	r0, r8
 8003502:	6923      	ldr	r3, [r4, #16]
 8003504:	47d0      	blx	sl
 8003506:	3001      	adds	r0, #1
 8003508:	d0ad      	beq.n	8003466 <_printf_i+0x15a>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	079b      	lsls	r3, r3, #30
 800350e:	d413      	bmi.n	8003538 <_printf_i+0x22c>
 8003510:	68e0      	ldr	r0, [r4, #12]
 8003512:	9b03      	ldr	r3, [sp, #12]
 8003514:	4298      	cmp	r0, r3
 8003516:	bfb8      	it	lt
 8003518:	4618      	movlt	r0, r3
 800351a:	e7a6      	b.n	800346a <_printf_i+0x15e>
 800351c:	2301      	movs	r3, #1
 800351e:	4632      	mov	r2, r6
 8003520:	4649      	mov	r1, r9
 8003522:	4640      	mov	r0, r8
 8003524:	47d0      	blx	sl
 8003526:	3001      	adds	r0, #1
 8003528:	d09d      	beq.n	8003466 <_printf_i+0x15a>
 800352a:	3501      	adds	r5, #1
 800352c:	68e3      	ldr	r3, [r4, #12]
 800352e:	9903      	ldr	r1, [sp, #12]
 8003530:	1a5b      	subs	r3, r3, r1
 8003532:	42ab      	cmp	r3, r5
 8003534:	dcf2      	bgt.n	800351c <_printf_i+0x210>
 8003536:	e7eb      	b.n	8003510 <_printf_i+0x204>
 8003538:	2500      	movs	r5, #0
 800353a:	f104 0619 	add.w	r6, r4, #25
 800353e:	e7f5      	b.n	800352c <_printf_i+0x220>
 8003540:	08003c2f 	.word	0x08003c2f
 8003544:	08003c40 	.word	0x08003c40

08003548 <__sflush_r>:
 8003548:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	0716      	lsls	r6, r2, #28
 8003550:	4605      	mov	r5, r0
 8003552:	460c      	mov	r4, r1
 8003554:	d454      	bmi.n	8003600 <__sflush_r+0xb8>
 8003556:	684b      	ldr	r3, [r1, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	dc02      	bgt.n	8003562 <__sflush_r+0x1a>
 800355c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	dd48      	ble.n	80035f4 <__sflush_r+0xac>
 8003562:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003564:	2e00      	cmp	r6, #0
 8003566:	d045      	beq.n	80035f4 <__sflush_r+0xac>
 8003568:	2300      	movs	r3, #0
 800356a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800356e:	682f      	ldr	r7, [r5, #0]
 8003570:	6a21      	ldr	r1, [r4, #32]
 8003572:	602b      	str	r3, [r5, #0]
 8003574:	d030      	beq.n	80035d8 <__sflush_r+0x90>
 8003576:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003578:	89a3      	ldrh	r3, [r4, #12]
 800357a:	0759      	lsls	r1, r3, #29
 800357c:	d505      	bpl.n	800358a <__sflush_r+0x42>
 800357e:	6863      	ldr	r3, [r4, #4]
 8003580:	1ad2      	subs	r2, r2, r3
 8003582:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003584:	b10b      	cbz	r3, 800358a <__sflush_r+0x42>
 8003586:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003588:	1ad2      	subs	r2, r2, r3
 800358a:	2300      	movs	r3, #0
 800358c:	4628      	mov	r0, r5
 800358e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003590:	6a21      	ldr	r1, [r4, #32]
 8003592:	47b0      	blx	r6
 8003594:	1c43      	adds	r3, r0, #1
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	d106      	bne.n	80035a8 <__sflush_r+0x60>
 800359a:	6829      	ldr	r1, [r5, #0]
 800359c:	291d      	cmp	r1, #29
 800359e:	d82b      	bhi.n	80035f8 <__sflush_r+0xb0>
 80035a0:	4a28      	ldr	r2, [pc, #160]	@ (8003644 <__sflush_r+0xfc>)
 80035a2:	40ca      	lsrs	r2, r1
 80035a4:	07d6      	lsls	r6, r2, #31
 80035a6:	d527      	bpl.n	80035f8 <__sflush_r+0xb0>
 80035a8:	2200      	movs	r2, #0
 80035aa:	6062      	str	r2, [r4, #4]
 80035ac:	6922      	ldr	r2, [r4, #16]
 80035ae:	04d9      	lsls	r1, r3, #19
 80035b0:	6022      	str	r2, [r4, #0]
 80035b2:	d504      	bpl.n	80035be <__sflush_r+0x76>
 80035b4:	1c42      	adds	r2, r0, #1
 80035b6:	d101      	bne.n	80035bc <__sflush_r+0x74>
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	b903      	cbnz	r3, 80035be <__sflush_r+0x76>
 80035bc:	6560      	str	r0, [r4, #84]	@ 0x54
 80035be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80035c0:	602f      	str	r7, [r5, #0]
 80035c2:	b1b9      	cbz	r1, 80035f4 <__sflush_r+0xac>
 80035c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80035c8:	4299      	cmp	r1, r3
 80035ca:	d002      	beq.n	80035d2 <__sflush_r+0x8a>
 80035cc:	4628      	mov	r0, r5
 80035ce:	f7ff fbf5 	bl	8002dbc <_free_r>
 80035d2:	2300      	movs	r3, #0
 80035d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80035d6:	e00d      	b.n	80035f4 <__sflush_r+0xac>
 80035d8:	2301      	movs	r3, #1
 80035da:	4628      	mov	r0, r5
 80035dc:	47b0      	blx	r6
 80035de:	4602      	mov	r2, r0
 80035e0:	1c50      	adds	r0, r2, #1
 80035e2:	d1c9      	bne.n	8003578 <__sflush_r+0x30>
 80035e4:	682b      	ldr	r3, [r5, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0c6      	beq.n	8003578 <__sflush_r+0x30>
 80035ea:	2b1d      	cmp	r3, #29
 80035ec:	d001      	beq.n	80035f2 <__sflush_r+0xaa>
 80035ee:	2b16      	cmp	r3, #22
 80035f0:	d11d      	bne.n	800362e <__sflush_r+0xe6>
 80035f2:	602f      	str	r7, [r5, #0]
 80035f4:	2000      	movs	r0, #0
 80035f6:	e021      	b.n	800363c <__sflush_r+0xf4>
 80035f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035fc:	b21b      	sxth	r3, r3
 80035fe:	e01a      	b.n	8003636 <__sflush_r+0xee>
 8003600:	690f      	ldr	r7, [r1, #16]
 8003602:	2f00      	cmp	r7, #0
 8003604:	d0f6      	beq.n	80035f4 <__sflush_r+0xac>
 8003606:	0793      	lsls	r3, r2, #30
 8003608:	bf18      	it	ne
 800360a:	2300      	movne	r3, #0
 800360c:	680e      	ldr	r6, [r1, #0]
 800360e:	bf08      	it	eq
 8003610:	694b      	ldreq	r3, [r1, #20]
 8003612:	1bf6      	subs	r6, r6, r7
 8003614:	600f      	str	r7, [r1, #0]
 8003616:	608b      	str	r3, [r1, #8]
 8003618:	2e00      	cmp	r6, #0
 800361a:	ddeb      	ble.n	80035f4 <__sflush_r+0xac>
 800361c:	4633      	mov	r3, r6
 800361e:	463a      	mov	r2, r7
 8003620:	4628      	mov	r0, r5
 8003622:	6a21      	ldr	r1, [r4, #32]
 8003624:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003628:	47e0      	blx	ip
 800362a:	2800      	cmp	r0, #0
 800362c:	dc07      	bgt.n	800363e <__sflush_r+0xf6>
 800362e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003636:	f04f 30ff 	mov.w	r0, #4294967295
 800363a:	81a3      	strh	r3, [r4, #12]
 800363c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800363e:	4407      	add	r7, r0
 8003640:	1a36      	subs	r6, r6, r0
 8003642:	e7e9      	b.n	8003618 <__sflush_r+0xd0>
 8003644:	20400001 	.word	0x20400001

08003648 <_fflush_r>:
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	690b      	ldr	r3, [r1, #16]
 800364c:	4605      	mov	r5, r0
 800364e:	460c      	mov	r4, r1
 8003650:	b913      	cbnz	r3, 8003658 <_fflush_r+0x10>
 8003652:	2500      	movs	r5, #0
 8003654:	4628      	mov	r0, r5
 8003656:	bd38      	pop	{r3, r4, r5, pc}
 8003658:	b118      	cbz	r0, 8003662 <_fflush_r+0x1a>
 800365a:	6a03      	ldr	r3, [r0, #32]
 800365c:	b90b      	cbnz	r3, 8003662 <_fflush_r+0x1a>
 800365e:	f7ff f9b3 	bl	80029c8 <__sinit>
 8003662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f3      	beq.n	8003652 <_fflush_r+0xa>
 800366a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800366c:	07d0      	lsls	r0, r2, #31
 800366e:	d404      	bmi.n	800367a <_fflush_r+0x32>
 8003670:	0599      	lsls	r1, r3, #22
 8003672:	d402      	bmi.n	800367a <_fflush_r+0x32>
 8003674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003676:	f7ff fb9e 	bl	8002db6 <__retarget_lock_acquire_recursive>
 800367a:	4628      	mov	r0, r5
 800367c:	4621      	mov	r1, r4
 800367e:	f7ff ff63 	bl	8003548 <__sflush_r>
 8003682:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003684:	4605      	mov	r5, r0
 8003686:	07da      	lsls	r2, r3, #31
 8003688:	d4e4      	bmi.n	8003654 <_fflush_r+0xc>
 800368a:	89a3      	ldrh	r3, [r4, #12]
 800368c:	059b      	lsls	r3, r3, #22
 800368e:	d4e1      	bmi.n	8003654 <_fflush_r+0xc>
 8003690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003692:	f7ff fb91 	bl	8002db8 <__retarget_lock_release_recursive>
 8003696:	e7dd      	b.n	8003654 <_fflush_r+0xc>

08003698 <__swhatbuf_r>:
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	460c      	mov	r4, r1
 800369c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036a0:	4615      	mov	r5, r2
 80036a2:	2900      	cmp	r1, #0
 80036a4:	461e      	mov	r6, r3
 80036a6:	b096      	sub	sp, #88	@ 0x58
 80036a8:	da0c      	bge.n	80036c4 <__swhatbuf_r+0x2c>
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	2100      	movs	r1, #0
 80036ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80036b2:	bf14      	ite	ne
 80036b4:	2340      	movne	r3, #64	@ 0x40
 80036b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80036ba:	2000      	movs	r0, #0
 80036bc:	6031      	str	r1, [r6, #0]
 80036be:	602b      	str	r3, [r5, #0]
 80036c0:	b016      	add	sp, #88	@ 0x58
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
 80036c4:	466a      	mov	r2, sp
 80036c6:	f000 f849 	bl	800375c <_fstat_r>
 80036ca:	2800      	cmp	r0, #0
 80036cc:	dbed      	blt.n	80036aa <__swhatbuf_r+0x12>
 80036ce:	9901      	ldr	r1, [sp, #4]
 80036d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80036d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80036d8:	4259      	negs	r1, r3
 80036da:	4159      	adcs	r1, r3
 80036dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036e0:	e7eb      	b.n	80036ba <__swhatbuf_r+0x22>

080036e2 <__smakebuf_r>:
 80036e2:	898b      	ldrh	r3, [r1, #12]
 80036e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036e6:	079d      	lsls	r5, r3, #30
 80036e8:	4606      	mov	r6, r0
 80036ea:	460c      	mov	r4, r1
 80036ec:	d507      	bpl.n	80036fe <__smakebuf_r+0x1c>
 80036ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80036f2:	6023      	str	r3, [r4, #0]
 80036f4:	6123      	str	r3, [r4, #16]
 80036f6:	2301      	movs	r3, #1
 80036f8:	6163      	str	r3, [r4, #20]
 80036fa:	b003      	add	sp, #12
 80036fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036fe:	466a      	mov	r2, sp
 8003700:	ab01      	add	r3, sp, #4
 8003702:	f7ff ffc9 	bl	8003698 <__swhatbuf_r>
 8003706:	9f00      	ldr	r7, [sp, #0]
 8003708:	4605      	mov	r5, r0
 800370a:	4639      	mov	r1, r7
 800370c:	4630      	mov	r0, r6
 800370e:	f7ff fbbf 	bl	8002e90 <_malloc_r>
 8003712:	b948      	cbnz	r0, 8003728 <__smakebuf_r+0x46>
 8003714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003718:	059a      	lsls	r2, r3, #22
 800371a:	d4ee      	bmi.n	80036fa <__smakebuf_r+0x18>
 800371c:	f023 0303 	bic.w	r3, r3, #3
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	81a3      	strh	r3, [r4, #12]
 8003726:	e7e2      	b.n	80036ee <__smakebuf_r+0xc>
 8003728:	89a3      	ldrh	r3, [r4, #12]
 800372a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800372e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003732:	81a3      	strh	r3, [r4, #12]
 8003734:	9b01      	ldr	r3, [sp, #4]
 8003736:	6020      	str	r0, [r4, #0]
 8003738:	b15b      	cbz	r3, 8003752 <__smakebuf_r+0x70>
 800373a:	4630      	mov	r0, r6
 800373c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003740:	f000 f81e 	bl	8003780 <_isatty_r>
 8003744:	b128      	cbz	r0, 8003752 <__smakebuf_r+0x70>
 8003746:	89a3      	ldrh	r3, [r4, #12]
 8003748:	f023 0303 	bic.w	r3, r3, #3
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	81a3      	strh	r3, [r4, #12]
 8003752:	89a3      	ldrh	r3, [r4, #12]
 8003754:	431d      	orrs	r5, r3
 8003756:	81a5      	strh	r5, [r4, #12]
 8003758:	e7cf      	b.n	80036fa <__smakebuf_r+0x18>
	...

0800375c <_fstat_r>:
 800375c:	b538      	push	{r3, r4, r5, lr}
 800375e:	2300      	movs	r3, #0
 8003760:	4d06      	ldr	r5, [pc, #24]	@ (800377c <_fstat_r+0x20>)
 8003762:	4604      	mov	r4, r0
 8003764:	4608      	mov	r0, r1
 8003766:	4611      	mov	r1, r2
 8003768:	602b      	str	r3, [r5, #0]
 800376a:	f7fd fc03 	bl	8000f74 <_fstat>
 800376e:	1c43      	adds	r3, r0, #1
 8003770:	d102      	bne.n	8003778 <_fstat_r+0x1c>
 8003772:	682b      	ldr	r3, [r5, #0]
 8003774:	b103      	cbz	r3, 8003778 <_fstat_r+0x1c>
 8003776:	6023      	str	r3, [r4, #0]
 8003778:	bd38      	pop	{r3, r4, r5, pc}
 800377a:	bf00      	nop
 800377c:	20000274 	.word	0x20000274

08003780 <_isatty_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	2300      	movs	r3, #0
 8003784:	4d05      	ldr	r5, [pc, #20]	@ (800379c <_isatty_r+0x1c>)
 8003786:	4604      	mov	r4, r0
 8003788:	4608      	mov	r0, r1
 800378a:	602b      	str	r3, [r5, #0]
 800378c:	f7fd fc01 	bl	8000f92 <_isatty>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d102      	bne.n	800379a <_isatty_r+0x1a>
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	b103      	cbz	r3, 800379a <_isatty_r+0x1a>
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	bd38      	pop	{r3, r4, r5, pc}
 800379c:	20000274 	.word	0x20000274

080037a0 <_sbrk_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	2300      	movs	r3, #0
 80037a4:	4d05      	ldr	r5, [pc, #20]	@ (80037bc <_sbrk_r+0x1c>)
 80037a6:	4604      	mov	r4, r0
 80037a8:	4608      	mov	r0, r1
 80037aa:	602b      	str	r3, [r5, #0]
 80037ac:	f7fd fc08 	bl	8000fc0 <_sbrk>
 80037b0:	1c43      	adds	r3, r0, #1
 80037b2:	d102      	bne.n	80037ba <_sbrk_r+0x1a>
 80037b4:	682b      	ldr	r3, [r5, #0]
 80037b6:	b103      	cbz	r3, 80037ba <_sbrk_r+0x1a>
 80037b8:	6023      	str	r3, [r4, #0]
 80037ba:	bd38      	pop	{r3, r4, r5, pc}
 80037bc:	20000274 	.word	0x20000274

080037c0 <memchr>:
 80037c0:	4603      	mov	r3, r0
 80037c2:	b510      	push	{r4, lr}
 80037c4:	b2c9      	uxtb	r1, r1
 80037c6:	4402      	add	r2, r0
 80037c8:	4293      	cmp	r3, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	d101      	bne.n	80037d2 <memchr+0x12>
 80037ce:	2000      	movs	r0, #0
 80037d0:	e003      	b.n	80037da <memchr+0x1a>
 80037d2:	7804      	ldrb	r4, [r0, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	428c      	cmp	r4, r1
 80037d8:	d1f6      	bne.n	80037c8 <memchr+0x8>
 80037da:	bd10      	pop	{r4, pc}

080037dc <_init>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	bf00      	nop
 80037e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e2:	bc08      	pop	{r3}
 80037e4:	469e      	mov	lr, r3
 80037e6:	4770      	bx	lr

080037e8 <_fini>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	bf00      	nop
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr
