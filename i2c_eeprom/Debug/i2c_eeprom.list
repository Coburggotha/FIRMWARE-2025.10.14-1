
i2c_eeprom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b90  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a50  08004c9c  08004c9c  00005c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056ec  080056ec  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080056ec  080056ec  000066ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056f4  080056f4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f4  080056f4  000066f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056f8  080056f8  000066f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080056fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  08005764  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08005764  00007278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c33  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000184f  00000000  00000000  00010cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00012518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000791  00000000  00000000  00012ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dd0  00000000  00000000  00013659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf12  00000000  00000000  0002b429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008658e  00000000  00000000  0003733b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd8c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003024  00000000  00000000  000bd90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000c0930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c84 	.word	0x08004c84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004c84 	.word	0x08004c84

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]

  if (ch == '\n')
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b0a      	cmp	r3, #10
 8000168:	d106      	bne.n	8000178 <__io_putchar+0x1c>
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r", 1, 0xFFFF);
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4907      	ldr	r1, [pc, #28]	@ (8000190 <__io_putchar+0x34>)
 8000172:	4808      	ldr	r0, [pc, #32]	@ (8000194 <__io_putchar+0x38>)
 8000174:	f003 fbd0 	bl	8003918 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8000178:	1d39      	adds	r1, r7, #4
 800017a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800017e:	2201      	movs	r2, #1
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__io_putchar+0x38>)
 8000182:	f003 fbc9 	bl	8003918 <HAL_UART_Transmit>

  return ch;
 8000186:	687b      	ldr	r3, [r7, #4]
}
 8000188:	4618      	mov	r0, r3
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}
 8000190:	08004c9c 	.word	0x08004c9c
 8000194:	200000d8 	.word	0x200000d8

08000198 <I2C_Scan>:
  * @brief  I2C 주소 스캔 함수
  * @param  None
  * @retval None
  */
void I2C_Scan(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
  printf("\n=== I2C Address Scan ===\n");
 800019e:	482a      	ldr	r0, [pc, #168]	@ (8000248 <I2C_Scan+0xb0>)
 80001a0:	f003 fec0 	bl	8003f24 <puts>
  printf("Scanning I2C bus...\n");
 80001a4:	4829      	ldr	r0, [pc, #164]	@ (800024c <I2C_Scan+0xb4>)
 80001a6:	f003 febd 	bl	8003f24 <puts>

  i2c_scan_found = 0;
 80001aa:	4b29      	ldr	r3, [pc, #164]	@ (8000250 <I2C_Scan+0xb8>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	701a      	strb	r2, [r3, #0]

  for(uint8_t i = 0; i < 128; i++)
 80001b0:	2300      	movs	r3, #0
 80001b2:	71fb      	strb	r3, [r7, #7]
 80001b4:	e02e      	b.n	8000214 <I2C_Scan+0x7c>
  {
    if(HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK)
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	b29b      	uxth	r3, r3
 80001ba:	005b      	lsls	r3, r3, #1
 80001bc:	b299      	uxth	r1, r3
 80001be:	2305      	movs	r3, #5
 80001c0:	2203      	movs	r2, #3
 80001c2:	4824      	ldr	r0, [pc, #144]	@ (8000254 <I2C_Scan+0xbc>)
 80001c4:	f002 f998 	bl	80024f8 <HAL_I2C_IsDeviceReady>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d11f      	bne.n	800020e <I2C_Scan+0x76>
    {
      printf("Found I2C device at address: 0x%02X (7-bit: 0x%02X)\n", (i<<1), i);
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	005b      	lsls	r3, r3, #1
 80001d2:	79fa      	ldrb	r2, [r7, #7]
 80001d4:	4619      	mov	r1, r3
 80001d6:	4820      	ldr	r0, [pc, #128]	@ (8000258 <I2C_Scan+0xc0>)
 80001d8:	f003 fe34 	bl	8003e44 <iprintf>
      i2c_scan_found++;
 80001dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000250 <I2C_Scan+0xb8>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	3301      	adds	r3, #1
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000250 <I2C_Scan+0xb8>)
 80001e6:	701a      	strb	r2, [r3, #0]

      // K24C256 주소 범위 확인 (0xA0~0xAE)
      if((i<<1) >= 0xA0 && (i<<1) <= 0xAE)
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	2b9f      	cmp	r3, #159	@ 0x9f
 80001ee:	dd0e      	ble.n	800020e <I2C_Scan+0x76>
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	005b      	lsls	r3, r3, #1
 80001f4:	2bae      	cmp	r3, #174	@ 0xae
 80001f6:	dc0a      	bgt.n	800020e <I2C_Scan+0x76>
      {
        eeprom_address = (i<<1);
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	005b      	lsls	r3, r3, #1
 80001fc:	b2da      	uxtb	r2, r3
 80001fe:	4b17      	ldr	r3, [pc, #92]	@ (800025c <I2C_Scan+0xc4>)
 8000200:	701a      	strb	r2, [r3, #0]
        printf("** K24C256 EEPROM detected at 0x%02X **\n", eeprom_address);
 8000202:	4b16      	ldr	r3, [pc, #88]	@ (800025c <I2C_Scan+0xc4>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	4619      	mov	r1, r3
 8000208:	4815      	ldr	r0, [pc, #84]	@ (8000260 <I2C_Scan+0xc8>)
 800020a:	f003 fe1b 	bl	8003e44 <iprintf>
  for(uint8_t i = 0; i < 128; i++)
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	3301      	adds	r3, #1
 8000212:	71fb      	strb	r3, [r7, #7]
 8000214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000218:	2b00      	cmp	r3, #0
 800021a:	dacc      	bge.n	80001b6 <I2C_Scan+0x1e>
      }
    }
  }

  if(i2c_scan_found == 0)
 800021c:	4b0c      	ldr	r3, [pc, #48]	@ (8000250 <I2C_Scan+0xb8>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d103      	bne.n	800022c <I2C_Scan+0x94>
  {
    printf("No I2C devices found!\n");
 8000224:	480f      	ldr	r0, [pc, #60]	@ (8000264 <I2C_Scan+0xcc>)
 8000226:	f003 fe7d 	bl	8003f24 <puts>
 800022a:	e005      	b.n	8000238 <I2C_Scan+0xa0>
  }
  else
  {
    printf("Total %d I2C device(s) found.\n", i2c_scan_found);
 800022c:	4b08      	ldr	r3, [pc, #32]	@ (8000250 <I2C_Scan+0xb8>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4619      	mov	r1, r3
 8000232:	480d      	ldr	r0, [pc, #52]	@ (8000268 <I2C_Scan+0xd0>)
 8000234:	f003 fe06 	bl	8003e44 <iprintf>
  }
  printf("========================\n\n");
 8000238:	480c      	ldr	r0, [pc, #48]	@ (800026c <I2C_Scan+0xd4>)
 800023a:	f003 fe73 	bl	8003f24 <puts>
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	08004ca0 	.word	0x08004ca0
 800024c:	08004cbc 	.word	0x08004cbc
 8000250:	20000120 	.word	0x20000120
 8000254:	20000084 	.word	0x20000084
 8000258:	08004cd0 	.word	0x08004cd0
 800025c:	20000121 	.word	0x20000121
 8000260:	08004d08 	.word	0x08004d08
 8000264:	08004d34 	.word	0x08004d34
 8000268:	08004d4c 	.word	0x08004d4c
 800026c:	08004d6c 	.word	0x08004d6c

08000270 <EEPROM_Write>:
  * @param  data: 쓸 데이터 포인터
  * @param  size: 데이터 크기
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef EEPROM_Write(uint16_t mem_addr, uint8_t *data, uint16_t size)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af04      	add	r7, sp, #16
 8000276:	4603      	mov	r3, r0
 8000278:	6039      	str	r1, [r7, #0]
 800027a:	80fb      	strh	r3, [r7, #6]
 800027c:	4613      	mov	r3, r2
 800027e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000280:	2300      	movs	r3, #0
 8000282:	73fb      	strb	r3, [r7, #15]
  uint16_t bytes_to_write;
  uint16_t current_addr = mem_addr;
 8000284:	88fb      	ldrh	r3, [r7, #6]
 8000286:	817b      	strh	r3, [r7, #10]
  uint16_t data_index = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	813b      	strh	r3, [r7, #8]

  while(size > 0)
 800028c:	e03a      	b.n	8000304 <EEPROM_Write+0x94>
  {
    // 페이지 경계를 고려한 쓰기 크기 계산
    bytes_to_write = EEPROM_PAGE_SIZE - (current_addr % EEPROM_PAGE_SIZE);
 800028e:	897b      	ldrh	r3, [r7, #10]
 8000290:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000294:	b29b      	uxth	r3, r3
 8000296:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800029a:	81bb      	strh	r3, [r7, #12]
    if(bytes_to_write > size)
 800029c:	89ba      	ldrh	r2, [r7, #12]
 800029e:	88bb      	ldrh	r3, [r7, #4]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d901      	bls.n	80002a8 <EEPROM_Write+0x38>
      bytes_to_write = size;
 80002a4:	88bb      	ldrh	r3, [r7, #4]
 80002a6:	81bb      	strh	r3, [r7, #12]

    // EEPROM에 쓰기
    status = HAL_I2C_Mem_Write(&hi2c1, eeprom_address, current_addr,
 80002a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000314 <EEPROM_Write+0xa4>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4618      	mov	r0, r3
 80002ae:	893b      	ldrh	r3, [r7, #8]
 80002b0:	683a      	ldr	r2, [r7, #0]
 80002b2:	4413      	add	r3, r2
 80002b4:	8979      	ldrh	r1, [r7, #10]
 80002b6:	f04f 32ff 	mov.w	r2, #4294967295
 80002ba:	9202      	str	r2, [sp, #8]
 80002bc:	89ba      	ldrh	r2, [r7, #12]
 80002be:	9201      	str	r2, [sp, #4]
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	2310      	movs	r3, #16
 80002c4:	460a      	mov	r2, r1
 80002c6:	4601      	mov	r1, r0
 80002c8:	4813      	ldr	r0, [pc, #76]	@ (8000318 <EEPROM_Write+0xa8>)
 80002ca:	f001 fda7 	bl	8001e1c <HAL_I2C_Mem_Write>
 80002ce:	4603      	mov	r3, r0
 80002d0:	73fb      	strb	r3, [r7, #15]
                               I2C_MEMADD_SIZE_16BIT, &data[data_index],
                               bytes_to_write, HAL_MAX_DELAY);

    if(status != HAL_OK)
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d006      	beq.n	80002e6 <EEPROM_Write+0x76>
    {
      printf("EEPROM Write Error at address 0x%04X\n", current_addr);
 80002d8:	897b      	ldrh	r3, [r7, #10]
 80002da:	4619      	mov	r1, r3
 80002dc:	480f      	ldr	r0, [pc, #60]	@ (800031c <EEPROM_Write+0xac>)
 80002de:	f003 fdb1 	bl	8003e44 <iprintf>
      return status;
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
 80002e4:	e012      	b.n	800030c <EEPROM_Write+0x9c>
    }

    // EEPROM 쓰기 완료 대기 (Write Cycle Time)
    HAL_Delay(5);
 80002e6:	2005      	movs	r0, #5
 80002e8:	f000 fede 	bl	80010a8 <HAL_Delay>

    // 다음 쓰기를 위한 변수 업데이트
    current_addr += bytes_to_write;
 80002ec:	897a      	ldrh	r2, [r7, #10]
 80002ee:	89bb      	ldrh	r3, [r7, #12]
 80002f0:	4413      	add	r3, r2
 80002f2:	817b      	strh	r3, [r7, #10]
    data_index += bytes_to_write;
 80002f4:	893a      	ldrh	r2, [r7, #8]
 80002f6:	89bb      	ldrh	r3, [r7, #12]
 80002f8:	4413      	add	r3, r2
 80002fa:	813b      	strh	r3, [r7, #8]
    size -= bytes_to_write;
 80002fc:	88ba      	ldrh	r2, [r7, #4]
 80002fe:	89bb      	ldrh	r3, [r7, #12]
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	80bb      	strh	r3, [r7, #4]
  while(size > 0)
 8000304:	88bb      	ldrh	r3, [r7, #4]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d1c1      	bne.n	800028e <EEPROM_Write+0x1e>
  }

  return status;
 800030a:	7bfb      	ldrb	r3, [r7, #15]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000121 	.word	0x20000121
 8000318:	20000084 	.word	0x20000084
 800031c:	08004d88 	.word	0x08004d88

08000320 <EEPROM_Read>:
  * @param  data: 읽을 데이터 포인터
  * @param  size: 데이터 크기
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef EEPROM_Read(uint16_t mem_addr, uint8_t *data, uint16_t size)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af04      	add	r7, sp, #16
 8000326:	4603      	mov	r3, r0
 8000328:	6039      	str	r1, [r7, #0]
 800032a:	80fb      	strh	r3, [r7, #6]
 800032c:	4613      	mov	r3, r2
 800032e:	80bb      	strh	r3, [r7, #4]
  return HAL_I2C_Mem_Read(&hi2c1, eeprom_address, mem_addr,
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <EEPROM_Read+0x38>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	4619      	mov	r1, r3
 8000336:	88fa      	ldrh	r2, [r7, #6]
 8000338:	f04f 33ff 	mov.w	r3, #4294967295
 800033c:	9302      	str	r3, [sp, #8]
 800033e:	88bb      	ldrh	r3, [r7, #4]
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	2310      	movs	r3, #16
 8000348:	4804      	ldr	r0, [pc, #16]	@ (800035c <EEPROM_Read+0x3c>)
 800034a:	f001 fe61 	bl	8002010 <HAL_I2C_Mem_Read>
 800034e:	4603      	mov	r3, r0
                          I2C_MEMADD_SIZE_16BIT, data, size, HAL_MAX_DELAY);
}
 8000350:	4618      	mov	r0, r3
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000121 	.word	0x20000121
 800035c:	20000084 	.word	0x20000084

08000360 <EEPROM_Test>:
  * @brief  EEPROM 테스트 함수
  * @param  None
  * @retval None
  */
void EEPROM_Test(void)
{
 8000360:	b5b0      	push	{r4, r5, r7, lr}
 8000362:	b0ac      	sub	sp, #176	@ 0xb0
 8000364:	af00      	add	r7, sp, #0
  if(eeprom_address == 0)
 8000366:	4b7f      	ldr	r3, [pc, #508]	@ (8000564 <EEPROM_Test+0x204>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d103      	bne.n	8000376 <EEPROM_Test+0x16>
  {
    printf("EEPROM not detected! Cannot perform test.\n\n");
 800036e:	487e      	ldr	r0, [pc, #504]	@ (8000568 <EEPROM_Test+0x208>)
 8000370:	f003 fdd8 	bl	8003f24 <puts>
    return;
 8000374:	e0f2      	b.n	800055c <EEPROM_Test+0x1fc>
  }

  printf("=== EEPROM Test ===\n");
 8000376:	487d      	ldr	r0, [pc, #500]	@ (800056c <EEPROM_Test+0x20c>)
 8000378:	f003 fdd4 	bl	8003f24 <puts>

  // 테스트 데이터 준비
  char write_data[] = "Hello, STM32F103 with K24C256 EEPROM!";
 800037c:	4b7c      	ldr	r3, [pc, #496]	@ (8000570 <EEPROM_Test+0x210>)
 800037e:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8000382:	461d      	mov	r5, r3
 8000384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800038a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800038c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000390:	6020      	str	r0, [r4, #0]
 8000392:	3404      	adds	r4, #4
 8000394:	8021      	strh	r1, [r4, #0]
  uint8_t read_data[100] = {0};
 8000396:	f107 0318 	add.w	r3, r7, #24
 800039a:	2264      	movs	r2, #100	@ 0x64
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f003 feb0 	bl	8004104 <memset>
  uint16_t data_len = strlen(write_data);
 80003a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff fecf 	bl	800014c <strlen>
 80003ae:	4603      	mov	r3, r0
 80003b0:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6

  printf("Test Address: 0x%04X\n", TEST_ADDRESS);
 80003b4:	2100      	movs	r1, #0
 80003b6:	486f      	ldr	r0, [pc, #444]	@ (8000574 <EEPROM_Test+0x214>)
 80003b8:	f003 fd44 	bl	8003e44 <iprintf>
  printf("Write Data: \"%s\" (%d bytes)\n", write_data, data_len);
 80003bc:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80003c0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80003c4:	4619      	mov	r1, r3
 80003c6:	486c      	ldr	r0, [pc, #432]	@ (8000578 <EEPROM_Test+0x218>)
 80003c8:	f003 fd3c 	bl	8003e44 <iprintf>

  // EEPROM에 데이터 쓰기
  printf("Writing to EEPROM...\n");
 80003cc:	486b      	ldr	r0, [pc, #428]	@ (800057c <EEPROM_Test+0x21c>)
 80003ce:	f003 fda9 	bl	8003f24 <puts>
  if(EEPROM_Write(TEST_ADDRESS, (uint8_t*)write_data, data_len) == HAL_OK)
 80003d2:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80003d6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80003da:	4619      	mov	r1, r3
 80003dc:	2000      	movs	r0, #0
 80003de:	f7ff ff47 	bl	8000270 <EEPROM_Write>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d114      	bne.n	8000412 <EEPROM_Test+0xb2>
  {
    printf("Write successful!\n");
 80003e8:	4865      	ldr	r0, [pc, #404]	@ (8000580 <EEPROM_Test+0x220>)
 80003ea:	f003 fd9b 	bl	8003f24 <puts>
    printf("Write failed!\n");
    return;
  }

  // 잠시 대기
  HAL_Delay(10);
 80003ee:	200a      	movs	r0, #10
 80003f0:	f000 fe5a 	bl	80010a8 <HAL_Delay>

  // EEPROM에서 데이터 읽기
  printf("Reading from EEPROM...\n");
 80003f4:	4863      	ldr	r0, [pc, #396]	@ (8000584 <EEPROM_Test+0x224>)
 80003f6:	f003 fd95 	bl	8003f24 <puts>
  if(EEPROM_Read(TEST_ADDRESS, read_data, data_len) == HAL_OK)
 80003fa:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80003fe:	f107 0318 	add.w	r3, r7, #24
 8000402:	4619      	mov	r1, r3
 8000404:	2000      	movs	r0, #0
 8000406:	f7ff ff8b 	bl	8000320 <EEPROM_Read>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d123      	bne.n	8000458 <EEPROM_Test+0xf8>
 8000410:	e003      	b.n	800041a <EEPROM_Test+0xba>
    printf("Write failed!\n");
 8000412:	485d      	ldr	r0, [pc, #372]	@ (8000588 <EEPROM_Test+0x228>)
 8000414:	f003 fd86 	bl	8003f24 <puts>
    return;
 8000418:	e0a0      	b.n	800055c <EEPROM_Test+0x1fc>
  {
    printf("Read successful!\n");
 800041a:	485c      	ldr	r0, [pc, #368]	@ (800058c <EEPROM_Test+0x22c>)
 800041c:	f003 fd82 	bl	8003f24 <puts>
    printf("Read Data: \"%s\" (%d bytes)\n", (char*)read_data, data_len);
 8000420:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8000424:	f107 0318 	add.w	r3, r7, #24
 8000428:	4619      	mov	r1, r3
 800042a:	4859      	ldr	r0, [pc, #356]	@ (8000590 <EEPROM_Test+0x230>)
 800042c:	f003 fd0a 	bl	8003e44 <iprintf>

    // 데이터 비교
    if(memcmp(write_data, read_data, data_len) == 0)
 8000430:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8000434:	f107 0118 	add.w	r1, r7, #24
 8000438:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800043c:	4618      	mov	r0, r3
 800043e:	f003 fe51 	bl	80040e4 <memcmp>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d103      	bne.n	8000450 <EEPROM_Test+0xf0>
    {
      printf("** Data verification PASSED! **\n");
 8000448:	4852      	ldr	r0, [pc, #328]	@ (8000594 <EEPROM_Test+0x234>)
 800044a:	f003 fd6b 	bl	8003f24 <puts>
 800044e:	e006      	b.n	800045e <EEPROM_Test+0xfe>
    }
    else
    {
      printf("** Data verification FAILED! **\n");
 8000450:	4851      	ldr	r0, [pc, #324]	@ (8000598 <EEPROM_Test+0x238>)
 8000452:	f003 fd67 	bl	8003f24 <puts>
 8000456:	e002      	b.n	800045e <EEPROM_Test+0xfe>
    }
  }
  else
  {
    printf("Read failed!\n");
 8000458:	4850      	ldr	r0, [pc, #320]	@ (800059c <EEPROM_Test+0x23c>)
 800045a:	f003 fd63 	bl	8003f24 <puts>
  }

  printf("===================\n\n");
 800045e:	4850      	ldr	r0, [pc, #320]	@ (80005a0 <EEPROM_Test+0x240>)
 8000460:	f003 fd60 	bl	8003f24 <puts>

  // 추가 테스트: 숫자 데이터
  printf("=== Number Data Test ===\n");
 8000464:	484f      	ldr	r0, [pc, #316]	@ (80005a4 <EEPROM_Test+0x244>)
 8000466:	f003 fd5d 	bl	8003f24 <puts>
  uint8_t num_write[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
 800046a:	4a4f      	ldr	r2, [pc, #316]	@ (80005a8 <EEPROM_Test+0x248>)
 800046c:	f107 030c 	add.w	r3, r7, #12
 8000470:	ca07      	ldmia	r2, {r0, r1, r2}
 8000472:	c303      	stmia	r3!, {r0, r1}
 8000474:	801a      	strh	r2, [r3, #0]
  uint8_t num_read[10] = {0};
 8000476:	463b      	mov	r3, r7
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	811a      	strh	r2, [r3, #8]
  uint16_t num_addr = TEST_ADDRESS + 100;
 8000480:	2364      	movs	r3, #100	@ 0x64
 8000482:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

  printf("Writing numbers 0-9 to address 0x%04X...\n", num_addr);
 8000486:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 800048a:	4619      	mov	r1, r3
 800048c:	4847      	ldr	r0, [pc, #284]	@ (80005ac <EEPROM_Test+0x24c>)
 800048e:	f003 fcd9 	bl	8003e44 <iprintf>
  if(EEPROM_Write(num_addr, num_write, 10) == HAL_OK)
 8000492:	f107 010c 	add.w	r1, r7, #12
 8000496:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 800049a:	220a      	movs	r2, #10
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff fee7 	bl	8000270 <EEPROM_Write>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d156      	bne.n	8000556 <EEPROM_Test+0x1f6>
  {
    HAL_Delay(10);
 80004a8:	200a      	movs	r0, #10
 80004aa:	f000 fdfd 	bl	80010a8 <HAL_Delay>

    if(EEPROM_Read(num_addr, num_read, 10) == HAL_OK)
 80004ae:	4639      	mov	r1, r7
 80004b0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 80004b4:	220a      	movs	r2, #10
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff ff32 	bl	8000320 <EEPROM_Read>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d149      	bne.n	8000556 <EEPROM_Test+0x1f6>
    {
      printf("Write Data: ");
 80004c2:	483b      	ldr	r0, [pc, #236]	@ (80005b0 <EEPROM_Test+0x250>)
 80004c4:	f003 fcbe 	bl	8003e44 <iprintf>
      for(int i = 0; i < 10; i++) printf("%d ", num_write[i]);
 80004c8:	2300      	movs	r3, #0
 80004ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80004ce:	e00e      	b.n	80004ee <EEPROM_Test+0x18e>
 80004d0:	f107 020c 	add.w	r2, r7, #12
 80004d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80004d8:	4413      	add	r3, r2
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	4835      	ldr	r0, [pc, #212]	@ (80005b4 <EEPROM_Test+0x254>)
 80004e0:	f003 fcb0 	bl	8003e44 <iprintf>
 80004e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80004e8:	3301      	adds	r3, #1
 80004ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80004ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80004f2:	2b09      	cmp	r3, #9
 80004f4:	ddec      	ble.n	80004d0 <EEPROM_Test+0x170>
      printf("\n");
 80004f6:	200a      	movs	r0, #10
 80004f8:	f003 fcb6 	bl	8003e68 <putchar>

      printf("Read Data:  ");
 80004fc:	482e      	ldr	r0, [pc, #184]	@ (80005b8 <EEPROM_Test+0x258>)
 80004fe:	f003 fca1 	bl	8003e44 <iprintf>
      for(int i = 0; i < 10; i++) printf("%d ", num_read[i]);
 8000502:	2300      	movs	r3, #0
 8000504:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000508:	e00d      	b.n	8000526 <EEPROM_Test+0x1c6>
 800050a:	463a      	mov	r2, r7
 800050c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000510:	4413      	add	r3, r2
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	4827      	ldr	r0, [pc, #156]	@ (80005b4 <EEPROM_Test+0x254>)
 8000518:	f003 fc94 	bl	8003e44 <iprintf>
 800051c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000520:	3301      	adds	r3, #1
 8000522:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000526:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800052a:	2b09      	cmp	r3, #9
 800052c:	dded      	ble.n	800050a <EEPROM_Test+0x1aa>
      printf("\n");
 800052e:	200a      	movs	r0, #10
 8000530:	f003 fc9a 	bl	8003e68 <putchar>

      if(memcmp(num_write, num_read, 10) == 0)
 8000534:	4639      	mov	r1, r7
 8000536:	f107 030c 	add.w	r3, r7, #12
 800053a:	220a      	movs	r2, #10
 800053c:	4618      	mov	r0, r3
 800053e:	f003 fdd1 	bl	80040e4 <memcmp>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d103      	bne.n	8000550 <EEPROM_Test+0x1f0>
      {
        printf("** Number test PASSED! **\n");
 8000548:	481c      	ldr	r0, [pc, #112]	@ (80005bc <EEPROM_Test+0x25c>)
 800054a:	f003 fceb 	bl	8003f24 <puts>
 800054e:	e002      	b.n	8000556 <EEPROM_Test+0x1f6>
      }
      else
      {
        printf("** Number test FAILED! **\n");
 8000550:	481b      	ldr	r0, [pc, #108]	@ (80005c0 <EEPROM_Test+0x260>)
 8000552:	f003 fce7 	bl	8003f24 <puts>
      }
    }
  }
  printf("========================\n\n");
 8000556:	481b      	ldr	r0, [pc, #108]	@ (80005c4 <EEPROM_Test+0x264>)
 8000558:	f003 fce4 	bl	8003f24 <puts>
}
 800055c:	37b0      	adds	r7, #176	@ 0xb0
 800055e:	46bd      	mov	sp, r7
 8000560:	bdb0      	pop	{r4, r5, r7, pc}
 8000562:	bf00      	nop
 8000564:	20000121 	.word	0x20000121
 8000568:	08004db0 	.word	0x08004db0
 800056c:	08004ddc 	.word	0x08004ddc
 8000570:	08004fb8 	.word	0x08004fb8
 8000574:	08004df0 	.word	0x08004df0
 8000578:	08004e08 	.word	0x08004e08
 800057c:	08004e28 	.word	0x08004e28
 8000580:	08004e40 	.word	0x08004e40
 8000584:	08004e64 	.word	0x08004e64
 8000588:	08004e54 	.word	0x08004e54
 800058c:	08004e7c 	.word	0x08004e7c
 8000590:	08004e90 	.word	0x08004e90
 8000594:	08004eac 	.word	0x08004eac
 8000598:	08004ecc 	.word	0x08004ecc
 800059c:	08004eec 	.word	0x08004eec
 80005a0:	08004efc 	.word	0x08004efc
 80005a4:	08004f14 	.word	0x08004f14
 80005a8:	08004fe0 	.word	0x08004fe0
 80005ac:	08004f30 	.word	0x08004f30
 80005b0:	08004f5c 	.word	0x08004f5c
 80005b4:	08004f6c 	.word	0x08004f6c
 80005b8:	08004f70 	.word	0x08004f70
 80005bc:	08004f80 	.word	0x08004f80
 80005c0:	08004f9c 	.word	0x08004f9c
 80005c4:	08004d6c 	.word	0x08004d6c

080005c8 <Test_0xB0_Device>:
void Test_0xB0_Device(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b092      	sub	sp, #72	@ 0x48
 80005cc:	af04      	add	r7, sp, #16
  printf("=== Testing 0xB0 Device Identity ===\n");
 80005ce:	48be      	ldr	r0, [pc, #760]	@ (80008c8 <Test_0xB0_Device+0x300>)
 80005d0:	f003 fca8 	bl	8003f24 <puts>
  printf("Checking if 0xB0 is an extended memory block...\n\n");
 80005d4:	48bd      	ldr	r0, [pc, #756]	@ (80008cc <Test_0xB0_Device+0x304>)
 80005d6:	f003 fca5 	bl	8003f24 <puts>

  uint8_t write_data[] = "Block1Test";
 80005da:	4abd      	ldr	r2, [pc, #756]	@ (80008d0 <Test_0xB0_Device+0x308>)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005e2:	c303      	stmia	r3!, {r0, r1}
 80005e4:	801a      	strh	r2, [r3, #0]
 80005e6:	3302      	adds	r3, #2
 80005e8:	0c12      	lsrs	r2, r2, #16
 80005ea:	701a      	strb	r2, [r3, #0]
  uint8_t read_data[20] = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  uint16_t test_addr = 0x0100;
 80005fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000600:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  HAL_StatusTypeDef status;

  // 테스트 1: EEPROM처럼 동작하는지 확인
  printf("Test 1: Writing to 0xB0 at address 0x%04X...\n", test_addr);
 8000602:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000604:	4619      	mov	r1, r3
 8000606:	48b3      	ldr	r0, [pc, #716]	@ (80008d4 <Test_0xB0_Device+0x30c>)
 8000608:	f003 fc1c 	bl	8003e44 <iprintf>
  status = HAL_I2C_Mem_Write(&hi2c1, 0xB0, test_addr,
                             I2C_MEMADD_SIZE_16BIT, write_data,
                             strlen((char*)write_data), HAL_MAX_DELAY);
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fd9b 	bl	800014c <strlen>
 8000616:	4603      	mov	r3, r0
  status = HAL_I2C_Mem_Write(&hi2c1, 0xB0, test_addr,
 8000618:	b29b      	uxth	r3, r3
 800061a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800061c:	f04f 31ff 	mov.w	r1, #4294967295
 8000620:	9102      	str	r1, [sp, #8]
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2310      	movs	r3, #16
 800062c:	21b0      	movs	r1, #176	@ 0xb0
 800062e:	48aa      	ldr	r0, [pc, #680]	@ (80008d8 <Test_0xB0_Device+0x310>)
 8000630:	f001 fbf4 	bl	8001e1c <HAL_I2C_Mem_Write>
 8000634:	4603      	mov	r3, r0
 8000636:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

  if(status == HAL_OK)
 800063a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800063e:	2b00      	cmp	r3, #0
 8000640:	d15f      	bne.n	8000702 <Test_0xB0_Device+0x13a>
  {
    printf("  Write to 0xB0: SUCCESS\n");
 8000642:	48a6      	ldr	r0, [pc, #664]	@ (80008dc <Test_0xB0_Device+0x314>)
 8000644:	f003 fc6e 	bl	8003f24 <puts>
    HAL_Delay(10);
 8000648:	200a      	movs	r0, #10
 800064a:	f000 fd2d 	bl	80010a8 <HAL_Delay>

    // 읽기 시도
    printf("Test 2: Reading from 0xB0 at address 0x%04X...\n", test_addr);
 800064e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000650:	4619      	mov	r1, r3
 8000652:	48a3      	ldr	r0, [pc, #652]	@ (80008e0 <Test_0xB0_Device+0x318>)
 8000654:	f003 fbf6 	bl	8003e44 <iprintf>
    status = HAL_I2C_Mem_Read(&hi2c1, 0xB0, test_addr,
                              I2C_MEMADD_SIZE_16BIT, read_data,
                              strlen((char*)write_data), HAL_MAX_DELAY);
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff fd75 	bl	800014c <strlen>
 8000662:	4603      	mov	r3, r0
    status = HAL_I2C_Mem_Read(&hi2c1, 0xB0, test_addr,
 8000664:	b29b      	uxth	r3, r3
 8000666:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000668:	f04f 31ff 	mov.w	r1, #4294967295
 800066c:	9102      	str	r1, [sp, #8]
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2310      	movs	r3, #16
 8000678:	21b0      	movs	r1, #176	@ 0xb0
 800067a:	4897      	ldr	r0, [pc, #604]	@ (80008d8 <Test_0xB0_Device+0x310>)
 800067c:	f001 fcc8 	bl	8002010 <HAL_I2C_Mem_Read>
 8000680:	4603      	mov	r3, r0
 8000682:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if(status == HAL_OK)
 8000686:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800068a:	2b00      	cmp	r3, #0
 800068c:	d132      	bne.n	80006f4 <Test_0xB0_Device+0x12c>
    {
      printf("  Read from 0xB0: SUCCESS\n");
 800068e:	4895      	ldr	r0, [pc, #596]	@ (80008e4 <Test_0xB0_Device+0x31c>)
 8000690:	f003 fc48 	bl	8003f24 <puts>
      printf("  Write Data: \"%s\"\n", write_data);
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4619      	mov	r1, r3
 800069a:	4893      	ldr	r0, [pc, #588]	@ (80008e8 <Test_0xB0_Device+0x320>)
 800069c:	f003 fbd2 	bl	8003e44 <iprintf>
      printf("  Read Data:  \"%s\"\n", read_data);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	4891      	ldr	r0, [pc, #580]	@ (80008ec <Test_0xB0_Device+0x324>)
 80006a8:	f003 fbcc 	bl	8003e44 <iprintf>

      if(memcmp(write_data, read_data, strlen((char*)write_data)) == 0)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fd4b 	bl	800014c <strlen>
 80006b6:	4602      	mov	r2, r0
 80006b8:	f107 010c 	add.w	r1, r7, #12
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 fd0f 	bl	80040e4 <memcmp>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10f      	bne.n	80006ec <Test_0xB0_Device+0x124>
      {
        printf("\n** 0xB0 IS A VALID EEPROM BLOCK! **\n");
 80006cc:	4888      	ldr	r0, [pc, #544]	@ (80008f0 <Test_0xB0_Device+0x328>)
 80006ce:	f003 fc29 	bl	8003f24 <puts>
        printf("** Your chip is likely 64KB (512Kbit), not 32KB! **\n");
 80006d2:	4888      	ldr	r0, [pc, #544]	@ (80008f4 <Test_0xB0_Device+0x32c>)
 80006d4:	f003 fc26 	bl	8003f24 <puts>
        printf("** Block 0 (0xA0): 32KB **\n");
 80006d8:	4887      	ldr	r0, [pc, #540]	@ (80008f8 <Test_0xB0_Device+0x330>)
 80006da:	f003 fc23 	bl	8003f24 <puts>
        printf("** Block 1 (0xB0): 32KB **\n");
 80006de:	4887      	ldr	r0, [pc, #540]	@ (80008fc <Test_0xB0_Device+0x334>)
 80006e0:	f003 fc20 	bl	8003f24 <puts>
        printf("** Total: 64KB available! **\n");
 80006e4:	4886      	ldr	r0, [pc, #536]	@ (8000900 <Test_0xB0_Device+0x338>)
 80006e6:	f003 fc1d 	bl	8003f24 <puts>
 80006ea:	e07d      	b.n	80007e8 <Test_0xB0_Device+0x220>
      }
      else
      {
        printf("\n** Data mismatch - 0xB0 behavior unclear **\n");
 80006ec:	4885      	ldr	r0, [pc, #532]	@ (8000904 <Test_0xB0_Device+0x33c>)
 80006ee:	f003 fc19 	bl	8003f24 <puts>
 80006f2:	e079      	b.n	80007e8 <Test_0xB0_Device+0x220>
      }
    }
    else
    {
      printf("  Read from 0xB0: FAILED\n");
 80006f4:	4884      	ldr	r0, [pc, #528]	@ (8000908 <Test_0xB0_Device+0x340>)
 80006f6:	f003 fc15 	bl	8003f24 <puts>
      printf("** 0xB0 accepts write but not read - unusual device **\n");
 80006fa:	4884      	ldr	r0, [pc, #528]	@ (800090c <Test_0xB0_Device+0x344>)
 80006fc:	f003 fc12 	bl	8003f24 <puts>
 8000700:	e072      	b.n	80007e8 <Test_0xB0_Device+0x220>
    }
  }
  else
  {
    printf("  Write to 0xB0: FAILED\n");
 8000702:	4883      	ldr	r0, [pc, #524]	@ (8000910 <Test_0xB0_Device+0x348>)
 8000704:	f003 fc0e 	bl	8003f24 <puts>

    // 테스트 3: 다른 프로토콜 시도
    printf("\nTest 3: Trying different access methods...\n");
 8000708:	4882      	ldr	r0, [pc, #520]	@ (8000914 <Test_0xB0_Device+0x34c>)
 800070a:	f003 fc0b 	bl	8003f24 <puts>

    // 8비트 주소로 시도
    status = HAL_I2C_Mem_Read(&hi2c1, 0xB0, 0x00,
 800070e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000712:	9302      	str	r3, [sp, #8]
 8000714:	2308      	movs	r3, #8
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2301      	movs	r3, #1
 8000720:	2200      	movs	r2, #0
 8000722:	21b0      	movs	r1, #176	@ 0xb0
 8000724:	486c      	ldr	r0, [pc, #432]	@ (80008d8 <Test_0xB0_Device+0x310>)
 8000726:	f001 fc73 	bl	8002010 <HAL_I2C_Mem_Read>
 800072a:	4603      	mov	r3, r0
 800072c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                              I2C_MEMADD_SIZE_8BIT, read_data, 8, 1000);
    if(status == HAL_OK)
 8000730:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000734:	2b00      	cmp	r3, #0
 8000736:	d11e      	bne.n	8000776 <Test_0xB0_Device+0x1ae>
    {
      printf("  8-bit address read: SUCCESS\n");
 8000738:	4877      	ldr	r0, [pc, #476]	@ (8000918 <Test_0xB0_Device+0x350>)
 800073a:	f003 fbf3 	bl	8003f24 <puts>
      printf("  Data: ");
 800073e:	4877      	ldr	r0, [pc, #476]	@ (800091c <Test_0xB0_Device+0x354>)
 8000740:	f003 fb80 	bl	8003e44 <iprintf>
      for(int i=0; i<8; i++) printf("%02X ", read_data[i]);
 8000744:	2300      	movs	r3, #0
 8000746:	637b      	str	r3, [r7, #52]	@ 0x34
 8000748:	e00b      	b.n	8000762 <Test_0xB0_Device+0x19a>
 800074a:	f107 020c 	add.w	r2, r7, #12
 800074e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000750:	4413      	add	r3, r2
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	4872      	ldr	r0, [pc, #456]	@ (8000920 <Test_0xB0_Device+0x358>)
 8000758:	f003 fb74 	bl	8003e44 <iprintf>
 800075c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800075e:	3301      	adds	r3, #1
 8000760:	637b      	str	r3, [r7, #52]	@ 0x34
 8000762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000764:	2b07      	cmp	r3, #7
 8000766:	ddf0      	ble.n	800074a <Test_0xB0_Device+0x182>
      printf("\n");
 8000768:	200a      	movs	r0, #10
 800076a:	f003 fb7d 	bl	8003e68 <putchar>
      printf("** 0xB0 is likely an RTC, sensor, or other I2C device **\n");
 800076e:	486d      	ldr	r0, [pc, #436]	@ (8000924 <Test_0xB0_Device+0x35c>)
 8000770:	f003 fbd8 	bl	8003f24 <puts>
 8000774:	e038      	b.n	80007e8 <Test_0xB0_Device+0x220>
    }
    else
    {
      // 단순 수신 시도
      status = HAL_I2C_Master_Receive(&hi2c1, 0xB0, read_data, 8, 1000);
 8000776:	f107 020c 	add.w	r2, r7, #12
 800077a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2308      	movs	r3, #8
 8000782:	21b0      	movs	r1, #176	@ 0xb0
 8000784:	4854      	ldr	r0, [pc, #336]	@ (80008d8 <Test_0xB0_Device+0x310>)
 8000786:	f001 f8dd 	bl	8001944 <HAL_I2C_Master_Receive>
 800078a:	4603      	mov	r3, r0
 800078c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
      if(status == HAL_OK)
 8000790:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000794:	2b00      	cmp	r3, #0
 8000796:	d11e      	bne.n	80007d6 <Test_0xB0_Device+0x20e>
      {
        printf("  Simple receive: SUCCESS\n");
 8000798:	4863      	ldr	r0, [pc, #396]	@ (8000928 <Test_0xB0_Device+0x360>)
 800079a:	f003 fbc3 	bl	8003f24 <puts>
        printf("  Data: ");
 800079e:	485f      	ldr	r0, [pc, #380]	@ (800091c <Test_0xB0_Device+0x354>)
 80007a0:	f003 fb50 	bl	8003e44 <iprintf>
        for(int i=0; i<8; i++) printf("%02X ", read_data[i]);
 80007a4:	2300      	movs	r3, #0
 80007a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80007a8:	e00b      	b.n	80007c2 <Test_0xB0_Device+0x1fa>
 80007aa:	f107 020c 	add.w	r2, r7, #12
 80007ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	485a      	ldr	r0, [pc, #360]	@ (8000920 <Test_0xB0_Device+0x358>)
 80007b8:	f003 fb44 	bl	8003e44 <iprintf>
 80007bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007be:	3301      	adds	r3, #1
 80007c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80007c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007c4:	2b07      	cmp	r3, #7
 80007c6:	ddf0      	ble.n	80007aa <Test_0xB0_Device+0x1e2>
        printf("\n");
 80007c8:	200a      	movs	r0, #10
 80007ca:	f003 fb4d 	bl	8003e68 <putchar>
        printf("** 0xB0 responds but protocol unclear **\n");
 80007ce:	4857      	ldr	r0, [pc, #348]	@ (800092c <Test_0xB0_Device+0x364>)
 80007d0:	f003 fba8 	bl	8003f24 <puts>
 80007d4:	e008      	b.n	80007e8 <Test_0xB0_Device+0x220>
      }
      else
      {
        printf("  All access methods: FAILED\n");
 80007d6:	4856      	ldr	r0, [pc, #344]	@ (8000930 <Test_0xB0_Device+0x368>)
 80007d8:	f003 fba4 	bl	8003f24 <puts>
        printf("** 0xB0 detected but not accessible **\n");
 80007dc:	4855      	ldr	r0, [pc, #340]	@ (8000934 <Test_0xB0_Device+0x36c>)
 80007de:	f003 fba1 	bl	8003f24 <puts>
        printf("** Possible ghost address or bus issue **\n");
 80007e2:	4855      	ldr	r0, [pc, #340]	@ (8000938 <Test_0xB0_Device+0x370>)
 80007e4:	f003 fb9e 	bl	8003f24 <puts>
      }
    }
  }

  // 크로스 체크: 0xA0와 0xB0가 같은 메모리를 공유하는지 확인
  printf("\nTest 4: Cross-check with 0xA0...\n");
 80007e8:	4854      	ldr	r0, [pc, #336]	@ (800093c <Test_0xB0_Device+0x374>)
 80007ea:	f003 fb9b 	bl	8003f24 <puts>
  memset(read_data, 0, sizeof(read_data));
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2214      	movs	r2, #20
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 fc84 	bl	8004104 <memset>

  // 0xA0에 특별한 데이터 쓰기
  uint8_t marker[] = "CrossCheck";
 80007fc:	4a50      	ldr	r2, [pc, #320]	@ (8000940 <Test_0xB0_Device+0x378>)
 80007fe:	463b      	mov	r3, r7
 8000800:	ca07      	ldmia	r2, {r0, r1, r2}
 8000802:	c303      	stmia	r3!, {r0, r1}
 8000804:	801a      	strh	r2, [r3, #0]
 8000806:	3302      	adds	r3, #2
 8000808:	0c12      	lsrs	r2, r2, #16
 800080a:	701a      	strb	r2, [r3, #0]
  if(EEPROM_Write(0x0200, marker, strlen((char*)marker)) == HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fc9c 	bl	800014c <strlen>
 8000814:	4603      	mov	r3, r0
 8000816:	b29a      	uxth	r2, r3
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000820:	f7ff fd26 	bl	8000270 <EEPROM_Write>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	f040 80a4 	bne.w	8000974 <Test_0xB0_Device+0x3ac>
  {
    HAL_Delay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f000 fc3b 	bl	80010a8 <HAL_Delay>

    // 0xB0의 같은 주소에서 읽기 시도
    status = HAL_I2C_Mem_Read(&hi2c1, 0xB0, 0x0200,
                              I2C_MEMADD_SIZE_16BIT, read_data,
                              strlen((char*)marker), HAL_MAX_DELAY);
 8000832:	463b      	mov	r3, r7
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fc89 	bl	800014c <strlen>
 800083a:	4603      	mov	r3, r0
    status = HAL_I2C_Mem_Read(&hi2c1, 0xB0, 0x0200,
 800083c:	b29b      	uxth	r3, r3
 800083e:	f04f 32ff 	mov.w	r2, #4294967295
 8000842:	9202      	str	r2, [sp, #8]
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2310      	movs	r3, #16
 800084e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000852:	21b0      	movs	r1, #176	@ 0xb0
 8000854:	4820      	ldr	r0, [pc, #128]	@ (80008d8 <Test_0xB0_Device+0x310>)
 8000856:	f001 fbdb 	bl	8002010 <HAL_I2C_Mem_Read>
 800085a:	4603      	mov	r3, r0
 800085c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if(status == HAL_OK)
 8000860:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000864:	2b00      	cmp	r3, #0
 8000866:	d17f      	bne.n	8000968 <Test_0xB0_Device+0x3a0>
    {
      printf("  0xB0 read at 0x0200: SUCCESS\n");
 8000868:	4836      	ldr	r0, [pc, #216]	@ (8000944 <Test_0xB0_Device+0x37c>)
 800086a:	f003 fb5b 	bl	8003f24 <puts>
      printf("  0xA0 wrote: \"%s\"\n", marker);
 800086e:	463b      	mov	r3, r7
 8000870:	4619      	mov	r1, r3
 8000872:	4835      	ldr	r0, [pc, #212]	@ (8000948 <Test_0xB0_Device+0x380>)
 8000874:	f003 fae6 	bl	8003e44 <iprintf>
      printf("  0xB0 read:  \"%s\"\n", read_data);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	4619      	mov	r1, r3
 800087e:	4833      	ldr	r0, [pc, #204]	@ (800094c <Test_0xB0_Device+0x384>)
 8000880:	f003 fae0 	bl	8003e44 <iprintf>

      if(memcmp(marker, read_data, strlen((char*)marker)) == 0)
 8000884:	463b      	mov	r3, r7
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fc60 	bl	800014c <strlen>
 800088c:	4602      	mov	r2, r0
 800088e:	f107 010c 	add.w	r1, r7, #12
 8000892:	463b      	mov	r3, r7
 8000894:	4618      	mov	r0, r3
 8000896:	f003 fc25 	bl	80040e4 <memcmp>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d109      	bne.n	80008b4 <Test_0xB0_Device+0x2ec>
      {
        printf("\n** 0xA0 and 0xB0 share SAME memory! **\n");
 80008a0:	482b      	ldr	r0, [pc, #172]	@ (8000950 <Test_0xB0_Device+0x388>)
 80008a2:	f003 fb3f 	bl	8003f24 <puts>
        printf("** 0xB0 is an ALIAS of 0xA0 - same 32KB chip **\n");
 80008a6:	482b      	ldr	r0, [pc, #172]	@ (8000954 <Test_0xB0_Device+0x38c>)
 80008a8:	f003 fb3c 	bl	8003f24 <puts>
        printf("** Your chip reports multiple addresses **\n");
 80008ac:	482a      	ldr	r0, [pc, #168]	@ (8000958 <Test_0xB0_Device+0x390>)
 80008ae:	f003 fb39 	bl	8003f24 <puts>
 80008b2:	e05f      	b.n	8000974 <Test_0xB0_Device+0x3ac>
      }
      else
      {
        printf("\n** 0xA0 and 0xB0 have DIFFERENT data! **\n");
 80008b4:	4829      	ldr	r0, [pc, #164]	@ (800095c <Test_0xB0_Device+0x394>)
 80008b6:	f003 fb35 	bl	8003f24 <puts>
        printf("** They are INDEPENDENT memory blocks **\n");
 80008ba:	4829      	ldr	r0, [pc, #164]	@ (8000960 <Test_0xB0_Device+0x398>)
 80008bc:	f003 fb32 	bl	8003f24 <puts>
        printf("** Total 64KB confirmed! **\n");
 80008c0:	4828      	ldr	r0, [pc, #160]	@ (8000964 <Test_0xB0_Device+0x39c>)
 80008c2:	f003 fb2f 	bl	8003f24 <puts>
 80008c6:	e055      	b.n	8000974 <Test_0xB0_Device+0x3ac>
 80008c8:	08004fec 	.word	0x08004fec
 80008cc:	08005014 	.word	0x08005014
 80008d0:	08005580 	.word	0x08005580
 80008d4:	08005048 	.word	0x08005048
 80008d8:	20000084 	.word	0x20000084
 80008dc:	08005078 	.word	0x08005078
 80008e0:	08005094 	.word	0x08005094
 80008e4:	080050c4 	.word	0x080050c4
 80008e8:	080050e0 	.word	0x080050e0
 80008ec:	080050f4 	.word	0x080050f4
 80008f0:	08005108 	.word	0x08005108
 80008f4:	08005130 	.word	0x08005130
 80008f8:	08005164 	.word	0x08005164
 80008fc:	08005180 	.word	0x08005180
 8000900:	0800519c 	.word	0x0800519c
 8000904:	080051bc 	.word	0x080051bc
 8000908:	080051ec 	.word	0x080051ec
 800090c:	08005208 	.word	0x08005208
 8000910:	08005240 	.word	0x08005240
 8000914:	08005258 	.word	0x08005258
 8000918:	08005284 	.word	0x08005284
 800091c:	080052a4 	.word	0x080052a4
 8000920:	080052b0 	.word	0x080052b0
 8000924:	080052b8 	.word	0x080052b8
 8000928:	080052f4 	.word	0x080052f4
 800092c:	08005310 	.word	0x08005310
 8000930:	0800533c 	.word	0x0800533c
 8000934:	0800535c 	.word	0x0800535c
 8000938:	08005384 	.word	0x08005384
 800093c:	080053b0 	.word	0x080053b0
 8000940:	0800558c 	.word	0x0800558c
 8000944:	080053d4 	.word	0x080053d4
 8000948:	080053f4 	.word	0x080053f4
 800094c:	08005408 	.word	0x08005408
 8000950:	0800541c 	.word	0x0800541c
 8000954:	08005444 	.word	0x08005444
 8000958:	08005474 	.word	0x08005474
 800095c:	080054a0 	.word	0x080054a0
 8000960:	080054cc 	.word	0x080054cc
 8000964:	080054f8 	.word	0x080054f8
      }
    }
    else
    {
      printf("  0xB0 read at 0x0200: FAILED\n");
 8000968:	4806      	ldr	r0, [pc, #24]	@ (8000984 <Test_0xB0_Device+0x3bc>)
 800096a:	f003 fadb 	bl	8003f24 <puts>
      printf("** Cannot determine relationship **\n");
 800096e:	4806      	ldr	r0, [pc, #24]	@ (8000988 <Test_0xB0_Device+0x3c0>)
 8000970:	f003 fad8 	bl	8003f24 <puts>
    }
  }

  printf("====================================\n\n");
 8000974:	4805      	ldr	r0, [pc, #20]	@ (800098c <Test_0xB0_Device+0x3c4>)
 8000976:	f003 fad5 	bl	8003f24 <puts>
}
 800097a:	bf00      	nop
 800097c:	3738      	adds	r7, #56	@ 0x38
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	08005514 	.word	0x08005514
 8000988:	08005534 	.word	0x08005534
 800098c:	08005558 	.word	0x08005558

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000996:	f000 fb25 	bl	8000fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099a:	f000 f855 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099e:	f000 f8ed 	bl	8000b7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009a2:	f000 f8c1 	bl	8000b28 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009a6:	f000 f891 	bl	8000acc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\n");
 80009aa:	481e      	ldr	r0, [pc, #120]	@ (8000a24 <main+0x94>)
 80009ac:	f003 faba 	bl	8003f24 <puts>
    printf("========================================\n");
 80009b0:	481d      	ldr	r0, [pc, #116]	@ (8000a28 <main+0x98>)
 80009b2:	f003 fab7 	bl	8003f24 <puts>
    printf("  STM32F103 I2C EEPROM K24C256 Test    \n");
 80009b6:	481d      	ldr	r0, [pc, #116]	@ (8000a2c <main+0x9c>)
 80009b8:	f003 fab4 	bl	8003f24 <puts>
    printf("  System Clock: 64MHz                  \n");
 80009bc:	481c      	ldr	r0, [pc, #112]	@ (8000a30 <main+0xa0>)
 80009be:	f003 fab1 	bl	8003f24 <puts>
    printf("  I2C Speed: 100kHz                    \n");
 80009c2:	481c      	ldr	r0, [pc, #112]	@ (8000a34 <main+0xa4>)
 80009c4:	f003 faae 	bl	8003f24 <puts>
    printf("========================================\n");
 80009c8:	4817      	ldr	r0, [pc, #92]	@ (8000a28 <main+0x98>)
 80009ca:	f003 faab 	bl	8003f24 <puts>

    // I2C 주소 스캔
    I2C_Scan();
 80009ce:	f7ff fbe3 	bl	8000198 <I2C_Scan>

    // EEPROM 테스트
    EEPROM_Test();
 80009d2:	f7ff fcc5 	bl	8000360 <EEPROM_Test>
    Test_0xB0_Device();
 80009d6:	f7ff fdf7 	bl	80005c8 <Test_0xB0_Device>

    printf("Test completed. Entering main loop...\n\n");
 80009da:	4817      	ldr	r0, [pc, #92]	@ (8000a38 <main+0xa8>)
 80009dc:	f003 faa2 	bl	8003f24 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    uint32_t loop_count = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  // 10초마다 상태 출력
	  	    if(loop_count % 1000 == 0)
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <main+0xac>)
 80009e8:	fba3 1302 	umull	r1, r3, r3, r2
 80009ec:	099b      	lsrs	r3, r3, #6
 80009ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009f2:	fb01 f303 	mul.w	r3, r1, r3
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d10c      	bne.n	8000a16 <main+0x86>
	  	    {
	  	      printf("System running... Loop count: %lu\n", loop_count/1000);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a0f      	ldr	r2, [pc, #60]	@ (8000a3c <main+0xac>)
 8000a00:	fba2 2303 	umull	r2, r3, r2, r3
 8000a04:	099b      	lsrs	r3, r3, #6
 8000a06:	4619      	mov	r1, r3
 8000a08:	480d      	ldr	r0, [pc, #52]	@ (8000a40 <main+0xb0>)
 8000a0a:	f003 fa1b 	bl	8003e44 <iprintf>

	  	      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a0e:	2120      	movs	r1, #32
 8000a10:	480c      	ldr	r0, [pc, #48]	@ (8000a44 <main+0xb4>)
 8000a12:	f000 fe17 	bl	8001644 <HAL_GPIO_TogglePin>
	  	    }

	  	    loop_count++;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
	  	    HAL_Delay(10);
 8000a1c:	200a      	movs	r0, #10
 8000a1e:	f000 fb43 	bl	80010a8 <HAL_Delay>
	  	    if(loop_count % 1000 == 0)
 8000a22:	e7df      	b.n	80009e4 <main+0x54>
 8000a24:	08005598 	.word	0x08005598
 8000a28:	0800559c 	.word	0x0800559c
 8000a2c:	080055c8 	.word	0x080055c8
 8000a30:	080055f0 	.word	0x080055f0
 8000a34:	08005618 	.word	0x08005618
 8000a38:	08005640 	.word	0x08005640
 8000a3c:	10624dd3 	.word	0x10624dd3
 8000a40:	08005668 	.word	0x08005668
 8000a44:	40010800 	.word	0x40010800

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b090      	sub	sp, #64	@ 0x40
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 0318 	add.w	r3, r7, #24
 8000a52:	2228      	movs	r2, #40	@ 0x28
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f003 fb54 	bl	8004104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a72:	2310      	movs	r3, #16
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a76:	2302      	movs	r3, #2
 8000a78:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a7e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 fae5 	bl	8003058 <HAL_RCC_OscConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a94:	f000 f8e0 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a98:	230f      	movs	r3, #15
 8000a9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f002 fd52 	bl	800355c <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000abe:	f000 f8cb 	bl	8000c58 <Error_Handler>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3740      	adds	r7, #64	@ 0x40
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000ad2:	4a13      	ldr	r2, [pc, #76]	@ (8000b20 <MX_I2C1_Init+0x54>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000ad8:	4a12      	ldr	r2, [pc, #72]	@ (8000b24 <MX_I2C1_Init+0x58>)
 8000ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000aea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000b0a:	f000 fdd7 	bl	80016bc <HAL_I2C_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b14:	f000 f8a0 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000084 	.word	0x20000084
 8000b20:	40005400 	.word	0x40005400
 8000b24:	000186a0 	.word	0x000186a0

08000b28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	@ (8000b78 <MX_USART2_UART_Init+0x50>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b60:	f002 fe8a 	bl	8003878 <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b6a:	f000 f875 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000d8 	.word	0x200000d8
 8000b78:	40004400 	.word	0x40004400

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b90:	4b2d      	ldr	r3, [pc, #180]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a2c      	ldr	r2, [pc, #176]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000b96:	f043 0310 	orr.w	r3, r3, #16
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0310 	and.w	r3, r3, #16
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba8:	4b27      	ldr	r3, [pc, #156]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a26      	ldr	r2, [pc, #152]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000bae:	f043 0320 	orr.w	r3, r3, #32
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b24      	ldr	r3, [pc, #144]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0320 	and.w	r3, r3, #32
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a20      	ldr	r2, [pc, #128]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000bde:	f043 0308 	orr.w	r3, r3, #8
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2120      	movs	r1, #32
 8000bf4:	4815      	ldr	r0, [pc, #84]	@ (8000c4c <MX_GPIO_Init+0xd0>)
 8000bf6:	f000 fd0d 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c00:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <MX_GPIO_Init+0xd4>)
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4811      	ldr	r0, [pc, #68]	@ (8000c54 <MX_GPIO_Init+0xd8>)
 8000c10:	f000 fb7c 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c14:	2320      	movs	r3, #32
 8000c16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4808      	ldr	r0, [pc, #32]	@ (8000c4c <MX_GPIO_Init+0xd0>)
 8000c2c:	f000 fb6e 	bl	800130c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	2028      	movs	r0, #40	@ 0x28
 8000c36:	f000 fb32 	bl	800129e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c3a:	2028      	movs	r0, #40	@ 0x28
 8000c3c:	f000 fb4b 	bl	80012d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010800 	.word	0x40010800
 8000c50:	10110000 	.word	0x10110000
 8000c54:	40011000 	.word	0x40011000

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <Error_Handler+0x8>

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c6a:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6193      	str	r3, [r2, #24]
 8000c76:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c8c:	61d3      	str	r3, [r2, #28]
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <HAL_MspInit+0x5c>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <HAL_MspInit+0x60>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <HAL_MspInit+0x60>)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010000 	.word	0x40010000

08000cc8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8000d58 <HAL_I2C_MspInit+0x90>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d132      	bne.n	8000d4e <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <HAL_I2C_MspInit+0x94>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a1b      	ldr	r2, [pc, #108]	@ (8000d5c <HAL_I2C_MspInit+0x94>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <HAL_I2C_MspInit+0x94>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0308 	and.w	r3, r3, #8
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d06:	2312      	movs	r3, #18
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4812      	ldr	r0, [pc, #72]	@ (8000d60 <HAL_I2C_MspInit+0x98>)
 8000d16:	f000 faf9 	bl	800130c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000d1a:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <HAL_I2C_MspInit+0x9c>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d22:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d30:	4a0c      	ldr	r2, [pc, #48]	@ (8000d64 <HAL_I2C_MspInit+0x9c>)
 8000d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d34:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <HAL_I2C_MspInit+0x94>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4a08      	ldr	r2, [pc, #32]	@ (8000d5c <HAL_I2C_MspInit+0x94>)
 8000d3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d40:	61d3      	str	r3, [r2, #28]
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_I2C_MspInit+0x94>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	@ 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010c00 	.word	0x40010c00
 8000d64:	40010000 	.word	0x40010000

08000d68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a15      	ldr	r2, [pc, #84]	@ (8000dd8 <HAL_UART_MspInit+0x70>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d123      	bne.n	8000dd0 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d88:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <HAL_UART_MspInit+0x74>)
 8000d8a:	69db      	ldr	r3, [r3, #28]
 8000d8c:	4a13      	ldr	r2, [pc, #76]	@ (8000ddc <HAL_UART_MspInit+0x74>)
 8000d8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d92:	61d3      	str	r3, [r2, #28]
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <HAL_UART_MspInit+0x74>)
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <HAL_UART_MspInit+0x74>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ddc <HAL_UART_MspInit+0x74>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <HAL_UART_MspInit+0x74>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000db8:	230c      	movs	r3, #12
 8000dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <HAL_UART_MspInit+0x78>)
 8000dcc:	f000 fa9e 	bl	800130c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010800 	.word	0x40010800

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <NMI_Handler+0x4>

08000dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 f91c 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e40:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e44:	f000 fc18 	bl	8001678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e00a      	b.n	8000e74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e5e:	f3af 8000 	nop.w
 8000e62:	4601      	mov	r1, r0
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	60ba      	str	r2, [r7, #8]
 8000e6a:	b2ca      	uxtb	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dbf0      	blt.n	8000e5e <_read+0x12>
  }

  return len;
 8000e7c:	687b      	ldr	r3, [r7, #4]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e009      	b.n	8000eac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff f95b 	bl	800015c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbf1      	blt.n	8000e98 <_write+0x12>
  }
  return len;
 8000eb4:	687b      	ldr	r3, [r7, #4]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_close>:

int _close(int file)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ee4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr

08000ef2 <_isatty>:

int _isatty(int file)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b085      	sub	sp, #20
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
	...

08000f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f28:	4a14      	ldr	r2, [pc, #80]	@ (8000f7c <_sbrk+0x5c>)
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <_sbrk+0x60>)
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f34:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <_sbrk+0x64>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	@ (8000f88 <_sbrk+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d207      	bcs.n	8000f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f50:	f003 f926 	bl	80041a0 <__errno>
 8000f54:	4603      	mov	r3, r0
 8000f56:	220c      	movs	r2, #12
 8000f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e009      	b.n	8000f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f60:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f66:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <_sbrk+0x64>)
 8000f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20005000 	.word	0x20005000
 8000f80:	00000400 	.word	0x00000400
 8000f84:	20000124 	.word	0x20000124
 8000f88:	20000278 	.word	0x20000278

08000f8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f98:	f7ff fff8 	bl	8000f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f9c:	480b      	ldr	r0, [pc, #44]	@ (8000fcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f9e:	490c      	ldr	r1, [pc, #48]	@ (8000fd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a09      	ldr	r2, [pc, #36]	@ (8000fd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fb4:	4c09      	ldr	r4, [pc, #36]	@ (8000fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f003 f8f3 	bl	80041ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fc6:	f7ff fce3 	bl	8000990 <main>
  bx lr
 8000fca:	4770      	bx	lr
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fd4:	080056fc 	.word	0x080056fc
  ldr r2, =_sbss
 8000fd8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fdc:	20000278 	.word	0x20000278

08000fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_2_IRQHandler>
	...

08000fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <HAL_Init+0x28>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a07      	ldr	r2, [pc, #28]	@ (800100c <HAL_Init+0x28>)
 8000fee:	f043 0310 	orr.w	r3, r3, #16
 8000ff2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 f947 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 f808 	bl	8001010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001000:	f7ff fe30 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40022000 	.word	0x40022000

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <HAL_InitTick+0x54>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <HAL_InitTick+0x58>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f95f 	bl	80012f2 <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e00e      	b.n	800105c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d80a      	bhi.n	800105a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f000 f927 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001050:	4a06      	ldr	r2, [pc, #24]	@ (800106c <HAL_InitTick+0x5c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000000 	.word	0x20000000
 8001068:	20000008 	.word	0x20000008
 800106c:	20000004 	.word	0x20000004

08001070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <HAL_IncTick+0x1c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <HAL_IncTick+0x20>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a03      	ldr	r2, [pc, #12]	@ (8001090 <HAL_IncTick+0x20>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	20000008 	.word	0x20000008
 8001090:	20000128 	.word	0x20000128

08001094 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b02      	ldr	r3, [pc, #8]	@ (80010a4 <HAL_GetTick+0x10>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	20000128 	.word	0x20000128

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff fff0 	bl	8001094 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c0:	d005      	beq.n	80010ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <HAL_Delay+0x44>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ce:	bf00      	nop
 80010d0:	f7ff ffe0 	bl	8001094 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d8f7      	bhi.n	80010d0 <HAL_Delay+0x28>
  {
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4906      	ldr	r1, [pc, #24]	@ (8001188 <__NVIC_EnableIRQ+0x34>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	@ (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	@ (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	@ 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	@ 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff90 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff2d 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b0:	f7ff ff42 	bl	8001138 <__NVIC_GetPriorityGrouping>
 80012b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff ff90 	bl	80011e0 <NVIC_EncodePriority>
 80012c0:	4602      	mov	r2, r0
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff5f 	bl	800118c <__NVIC_SetPriority>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff35 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffa2 	bl	8001244 <SysTick_Config>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800130c:	b480      	push	{r7}
 800130e:	b08b      	sub	sp, #44	@ 0x2c
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131e:	e169      	b.n	80015f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001320:	2201      	movs	r2, #1
 8001322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	429a      	cmp	r2, r3
 800133a:	f040 8158 	bne.w	80015ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	4a9a      	ldr	r2, [pc, #616]	@ (80015ac <HAL_GPIO_Init+0x2a0>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d05e      	beq.n	8001406 <HAL_GPIO_Init+0xfa>
 8001348:	4a98      	ldr	r2, [pc, #608]	@ (80015ac <HAL_GPIO_Init+0x2a0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d875      	bhi.n	800143a <HAL_GPIO_Init+0x12e>
 800134e:	4a98      	ldr	r2, [pc, #608]	@ (80015b0 <HAL_GPIO_Init+0x2a4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d058      	beq.n	8001406 <HAL_GPIO_Init+0xfa>
 8001354:	4a96      	ldr	r2, [pc, #600]	@ (80015b0 <HAL_GPIO_Init+0x2a4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d86f      	bhi.n	800143a <HAL_GPIO_Init+0x12e>
 800135a:	4a96      	ldr	r2, [pc, #600]	@ (80015b4 <HAL_GPIO_Init+0x2a8>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d052      	beq.n	8001406 <HAL_GPIO_Init+0xfa>
 8001360:	4a94      	ldr	r2, [pc, #592]	@ (80015b4 <HAL_GPIO_Init+0x2a8>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d869      	bhi.n	800143a <HAL_GPIO_Init+0x12e>
 8001366:	4a94      	ldr	r2, [pc, #592]	@ (80015b8 <HAL_GPIO_Init+0x2ac>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d04c      	beq.n	8001406 <HAL_GPIO_Init+0xfa>
 800136c:	4a92      	ldr	r2, [pc, #584]	@ (80015b8 <HAL_GPIO_Init+0x2ac>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d863      	bhi.n	800143a <HAL_GPIO_Init+0x12e>
 8001372:	4a92      	ldr	r2, [pc, #584]	@ (80015bc <HAL_GPIO_Init+0x2b0>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d046      	beq.n	8001406 <HAL_GPIO_Init+0xfa>
 8001378:	4a90      	ldr	r2, [pc, #576]	@ (80015bc <HAL_GPIO_Init+0x2b0>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d85d      	bhi.n	800143a <HAL_GPIO_Init+0x12e>
 800137e:	2b12      	cmp	r3, #18
 8001380:	d82a      	bhi.n	80013d8 <HAL_GPIO_Init+0xcc>
 8001382:	2b12      	cmp	r3, #18
 8001384:	d859      	bhi.n	800143a <HAL_GPIO_Init+0x12e>
 8001386:	a201      	add	r2, pc, #4	@ (adr r2, 800138c <HAL_GPIO_Init+0x80>)
 8001388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138c:	08001407 	.word	0x08001407
 8001390:	080013e1 	.word	0x080013e1
 8001394:	080013f3 	.word	0x080013f3
 8001398:	08001435 	.word	0x08001435
 800139c:	0800143b 	.word	0x0800143b
 80013a0:	0800143b 	.word	0x0800143b
 80013a4:	0800143b 	.word	0x0800143b
 80013a8:	0800143b 	.word	0x0800143b
 80013ac:	0800143b 	.word	0x0800143b
 80013b0:	0800143b 	.word	0x0800143b
 80013b4:	0800143b 	.word	0x0800143b
 80013b8:	0800143b 	.word	0x0800143b
 80013bc:	0800143b 	.word	0x0800143b
 80013c0:	0800143b 	.word	0x0800143b
 80013c4:	0800143b 	.word	0x0800143b
 80013c8:	0800143b 	.word	0x0800143b
 80013cc:	0800143b 	.word	0x0800143b
 80013d0:	080013e9 	.word	0x080013e9
 80013d4:	080013fd 	.word	0x080013fd
 80013d8:	4a79      	ldr	r2, [pc, #484]	@ (80015c0 <HAL_GPIO_Init+0x2b4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d013      	beq.n	8001406 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013de:	e02c      	b.n	800143a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	623b      	str	r3, [r7, #32]
          break;
 80013e6:	e029      	b.n	800143c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	3304      	adds	r3, #4
 80013ee:	623b      	str	r3, [r7, #32]
          break;
 80013f0:	e024      	b.n	800143c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	3308      	adds	r3, #8
 80013f8:	623b      	str	r3, [r7, #32]
          break;
 80013fa:	e01f      	b.n	800143c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	330c      	adds	r3, #12
 8001402:	623b      	str	r3, [r7, #32]
          break;
 8001404:	e01a      	b.n	800143c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d102      	bne.n	8001414 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800140e:	2304      	movs	r3, #4
 8001410:	623b      	str	r3, [r7, #32]
          break;
 8001412:	e013      	b.n	800143c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d105      	bne.n	8001428 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800141c:	2308      	movs	r3, #8
 800141e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	611a      	str	r2, [r3, #16]
          break;
 8001426:	e009      	b.n	800143c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001428:	2308      	movs	r3, #8
 800142a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	615a      	str	r2, [r3, #20]
          break;
 8001432:	e003      	b.n	800143c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
          break;
 8001438:	e000      	b.n	800143c <HAL_GPIO_Init+0x130>
          break;
 800143a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2bff      	cmp	r3, #255	@ 0xff
 8001440:	d801      	bhi.n	8001446 <HAL_GPIO_Init+0x13a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	e001      	b.n	800144a <HAL_GPIO_Init+0x13e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3304      	adds	r3, #4
 800144a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2bff      	cmp	r3, #255	@ 0xff
 8001450:	d802      	bhi.n	8001458 <HAL_GPIO_Init+0x14c>
 8001452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	e002      	b.n	800145e <HAL_GPIO_Init+0x152>
 8001458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145a:	3b08      	subs	r3, #8
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	210f      	movs	r1, #15
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	401a      	ands	r2, r3
 8001470:	6a39      	ldr	r1, [r7, #32]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	431a      	orrs	r2, r3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 80b1 	beq.w	80015ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800148c:	4b4d      	ldr	r3, [pc, #308]	@ (80015c4 <HAL_GPIO_Init+0x2b8>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a4c      	ldr	r2, [pc, #304]	@ (80015c4 <HAL_GPIO_Init+0x2b8>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b4a      	ldr	r3, [pc, #296]	@ (80015c4 <HAL_GPIO_Init+0x2b8>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014a4:	4a48      	ldr	r2, [pc, #288]	@ (80015c8 <HAL_GPIO_Init+0x2bc>)
 80014a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3302      	adds	r3, #2
 80014ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	220f      	movs	r2, #15
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4013      	ands	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a40      	ldr	r2, [pc, #256]	@ (80015cc <HAL_GPIO_Init+0x2c0>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d013      	beq.n	80014f8 <HAL_GPIO_Init+0x1ec>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a3f      	ldr	r2, [pc, #252]	@ (80015d0 <HAL_GPIO_Init+0x2c4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d00d      	beq.n	80014f4 <HAL_GPIO_Init+0x1e8>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a3e      	ldr	r2, [pc, #248]	@ (80015d4 <HAL_GPIO_Init+0x2c8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d007      	beq.n	80014f0 <HAL_GPIO_Init+0x1e4>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a3d      	ldr	r2, [pc, #244]	@ (80015d8 <HAL_GPIO_Init+0x2cc>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d101      	bne.n	80014ec <HAL_GPIO_Init+0x1e0>
 80014e8:	2303      	movs	r3, #3
 80014ea:	e006      	b.n	80014fa <HAL_GPIO_Init+0x1ee>
 80014ec:	2304      	movs	r3, #4
 80014ee:	e004      	b.n	80014fa <HAL_GPIO_Init+0x1ee>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_Init+0x1ee>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_GPIO_Init+0x1ee>
 80014f8:	2300      	movs	r3, #0
 80014fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014fc:	f002 0203 	and.w	r2, r2, #3
 8001500:	0092      	lsls	r2, r2, #2
 8001502:	4093      	lsls	r3, r2
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800150a:	492f      	ldr	r1, [pc, #188]	@ (80015c8 <HAL_GPIO_Init+0x2bc>)
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001524:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <HAL_GPIO_Init+0x2d0>)
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	492c      	ldr	r1, [pc, #176]	@ (80015dc <HAL_GPIO_Init+0x2d0>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	608b      	str	r3, [r1, #8]
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001532:	4b2a      	ldr	r3, [pc, #168]	@ (80015dc <HAL_GPIO_Init+0x2d0>)
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	43db      	mvns	r3, r3
 800153a:	4928      	ldr	r1, [pc, #160]	@ (80015dc <HAL_GPIO_Init+0x2d0>)
 800153c:	4013      	ands	r3, r2
 800153e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d006      	beq.n	800155a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800154c:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <HAL_GPIO_Init+0x2d0>)
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	4922      	ldr	r1, [pc, #136]	@ (80015dc <HAL_GPIO_Init+0x2d0>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	60cb      	str	r3, [r1, #12]
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800155a:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <HAL_GPIO_Init+0x2d0>)
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	43db      	mvns	r3, r3
 8001562:	491e      	ldr	r1, [pc, #120]	@ (80015dc <HAL_GPIO_Init+0x2d0>)
 8001564:	4013      	ands	r3, r2
 8001566:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001574:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <HAL_GPIO_Init+0x2d0>)
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4918      	ldr	r1, [pc, #96]	@ (80015dc <HAL_GPIO_Init+0x2d0>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001582:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <HAL_GPIO_Init+0x2d0>)
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	43db      	mvns	r3, r3
 800158a:	4914      	ldr	r1, [pc, #80]	@ (80015dc <HAL_GPIO_Init+0x2d0>)
 800158c:	4013      	ands	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d021      	beq.n	80015e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800159c:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <HAL_GPIO_Init+0x2d0>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	490e      	ldr	r1, [pc, #56]	@ (80015dc <HAL_GPIO_Init+0x2d0>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
 80015a8:	e021      	b.n	80015ee <HAL_GPIO_Init+0x2e2>
 80015aa:	bf00      	nop
 80015ac:	10320000 	.word	0x10320000
 80015b0:	10310000 	.word	0x10310000
 80015b4:	10220000 	.word	0x10220000
 80015b8:	10210000 	.word	0x10210000
 80015bc:	10120000 	.word	0x10120000
 80015c0:	10110000 	.word	0x10110000
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010000 	.word	0x40010000
 80015cc:	40010800 	.word	0x40010800
 80015d0:	40010c00 	.word	0x40010c00
 80015d4:	40011000 	.word	0x40011000
 80015d8:	40011400 	.word	0x40011400
 80015dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <HAL_GPIO_Init+0x304>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	4909      	ldr	r1, [pc, #36]	@ (8001610 <HAL_GPIO_Init+0x304>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	3301      	adds	r3, #1
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	fa22 f303 	lsr.w	r3, r2, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f47f ae8e 	bne.w	8001320 <HAL_GPIO_Init+0x14>
  }
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	372c      	adds	r7, #44	@ 0x2c
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	40010400 	.word	0x40010400

08001614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	807b      	strh	r3, [r7, #2]
 8001620:	4613      	mov	r3, r2
 8001622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001624:	787b      	ldrb	r3, [r7, #1]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001630:	e003      	b.n	800163a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001632:	887b      	ldrh	r3, [r7, #2]
 8001634:	041a      	lsls	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	611a      	str	r2, [r3, #16]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4013      	ands	r3, r2
 800165c:	041a      	lsls	r2, r3, #16
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	43d9      	mvns	r1, r3
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	400b      	ands	r3, r1
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	611a      	str	r2, [r3, #16]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
	...

08001678 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	4013      	ands	r3, r2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f806 	bl	80016a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40010400 	.word	0x40010400

080016a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e12b      	b.n	8001926 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d106      	bne.n	80016e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff faf0 	bl	8000cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2224      	movs	r2, #36	@ 0x24
 80016ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0201 	bic.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800170e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800171e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001720:	f002 f864 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8001724:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4a81      	ldr	r2, [pc, #516]	@ (8001930 <HAL_I2C_Init+0x274>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d807      	bhi.n	8001740 <HAL_I2C_Init+0x84>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4a80      	ldr	r2, [pc, #512]	@ (8001934 <HAL_I2C_Init+0x278>)
 8001734:	4293      	cmp	r3, r2
 8001736:	bf94      	ite	ls
 8001738:	2301      	movls	r3, #1
 800173a:	2300      	movhi	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	e006      	b.n	800174e <HAL_I2C_Init+0x92>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4a7d      	ldr	r2, [pc, #500]	@ (8001938 <HAL_I2C_Init+0x27c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	bf94      	ite	ls
 8001748:	2301      	movls	r3, #1
 800174a:	2300      	movhi	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e0e7      	b.n	8001926 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4a78      	ldr	r2, [pc, #480]	@ (800193c <HAL_I2C_Init+0x280>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0c9b      	lsrs	r3, r3, #18
 8001760:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	430a      	orrs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	4a6a      	ldr	r2, [pc, #424]	@ (8001930 <HAL_I2C_Init+0x274>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d802      	bhi.n	8001790 <HAL_I2C_Init+0xd4>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	3301      	adds	r3, #1
 800178e:	e009      	b.n	80017a4 <HAL_I2C_Init+0xe8>
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001796:	fb02 f303 	mul.w	r3, r2, r3
 800179a:	4a69      	ldr	r2, [pc, #420]	@ (8001940 <HAL_I2C_Init+0x284>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	099b      	lsrs	r3, r3, #6
 80017a2:	3301      	adds	r3, #1
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	430b      	orrs	r3, r1
 80017aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	495c      	ldr	r1, [pc, #368]	@ (8001930 <HAL_I2C_Init+0x274>)
 80017c0:	428b      	cmp	r3, r1
 80017c2:	d819      	bhi.n	80017f8 <HAL_I2C_Init+0x13c>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	1e59      	subs	r1, r3, #1
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80017d2:	1c59      	adds	r1, r3, #1
 80017d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017d8:	400b      	ands	r3, r1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00a      	beq.n	80017f4 <HAL_I2C_Init+0x138>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1e59      	subs	r1, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ec:	3301      	adds	r3, #1
 80017ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f2:	e051      	b.n	8001898 <HAL_I2C_Init+0x1dc>
 80017f4:	2304      	movs	r3, #4
 80017f6:	e04f      	b.n	8001898 <HAL_I2C_Init+0x1dc>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d111      	bne.n	8001824 <HAL_I2C_Init+0x168>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1e58      	subs	r0, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	440b      	add	r3, r1
 800180e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001812:	3301      	adds	r3, #1
 8001814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001818:	2b00      	cmp	r3, #0
 800181a:	bf0c      	ite	eq
 800181c:	2301      	moveq	r3, #1
 800181e:	2300      	movne	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	e012      	b.n	800184a <HAL_I2C_Init+0x18e>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1e58      	subs	r0, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	0099      	lsls	r1, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	fbb0 f3f3 	udiv	r3, r0, r3
 800183a:	3301      	adds	r3, #1
 800183c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf0c      	ite	eq
 8001844:	2301      	moveq	r3, #1
 8001846:	2300      	movne	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_I2C_Init+0x196>
 800184e:	2301      	movs	r3, #1
 8001850:	e022      	b.n	8001898 <HAL_I2C_Init+0x1dc>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10e      	bne.n	8001878 <HAL_I2C_Init+0x1bc>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1e58      	subs	r0, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6859      	ldr	r1, [r3, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	440b      	add	r3, r1
 8001868:	fbb0 f3f3 	udiv	r3, r0, r3
 800186c:	3301      	adds	r3, #1
 800186e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001876:	e00f      	b.n	8001898 <HAL_I2C_Init+0x1dc>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1e58      	subs	r0, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6859      	ldr	r1, [r3, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	0099      	lsls	r1, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	fbb0 f3f3 	udiv	r3, r0, r3
 800188e:	3301      	adds	r3, #1
 8001890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001894:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	6809      	ldr	r1, [r1, #0]
 800189c:	4313      	orrs	r3, r2
 800189e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69da      	ldr	r2, [r3, #28]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6911      	ldr	r1, [r2, #16]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	68d2      	ldr	r2, [r2, #12]
 80018d2:	4311      	orrs	r1, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	430b      	orrs	r3, r1
 80018da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695a      	ldr	r2, [r3, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2220      	movs	r2, #32
 8001912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	000186a0 	.word	0x000186a0
 8001934:	001e847f 	.word	0x001e847f
 8001938:	003d08ff 	.word	0x003d08ff
 800193c:	431bde83 	.word	0x431bde83
 8001940:	10624dd3 	.word	0x10624dd3

08001944 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08c      	sub	sp, #48	@ 0x30
 8001948:	af02      	add	r7, sp, #8
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	461a      	mov	r2, r3
 8001950:	460b      	mov	r3, r1
 8001952:	817b      	strh	r3, [r7, #10]
 8001954:	4613      	mov	r3, r2
 8001956:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff fb9a 	bl	8001094 <HAL_GetTick>
 8001960:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b20      	cmp	r3, #32
 800196c:	f040 824b 	bne.w	8001e06 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2319      	movs	r3, #25
 8001976:	2201      	movs	r2, #1
 8001978:	497f      	ldr	r1, [pc, #508]	@ (8001b78 <HAL_I2C_Master_Receive+0x234>)
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f001 f936 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001986:	2302      	movs	r3, #2
 8001988:	e23e      	b.n	8001e08 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_I2C_Master_Receive+0x54>
 8001994:	2302      	movs	r3, #2
 8001996:	e237      	b.n	8001e08 <HAL_I2C_Master_Receive+0x4c4>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d007      	beq.n	80019be <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 0201 	orr.w	r2, r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2222      	movs	r2, #34	@ 0x22
 80019d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2210      	movs	r2, #16
 80019da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	893a      	ldrh	r2, [r7, #8]
 80019ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4a5f      	ldr	r2, [pc, #380]	@ (8001b7c <HAL_I2C_Master_Receive+0x238>)
 80019fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a00:	8979      	ldrh	r1, [r7, #10]
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fea4 	bl	8002754 <I2C_MasterRequestRead>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e1f8      	b.n	8001e08 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d113      	bne.n	8001a46 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e1cc      	b.n	8001de0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d11e      	bne.n	8001a8c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5e:	b672      	cpsid	i
}
 8001a60:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a88:	b662      	cpsie	i
}
 8001a8a:	e035      	b.n	8001af8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d11e      	bne.n	8001ad2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001aa2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001acc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ace:	b662      	cpsie	i
}
 8001ad0:	e012      	b.n	8001af8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ae0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001af8:	e172      	b.n	8001de0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	f200 811f 	bhi.w	8001d42 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d123      	bne.n	8001b54 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f001 fa15 	bl	8002f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e173      	b.n	8001e08 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b52:	e145      	b.n	8001de0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d152      	bne.n	8001c02 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b62:	2200      	movs	r2, #0
 8001b64:	4906      	ldr	r1, [pc, #24]	@ (8001b80 <HAL_I2C_Master_Receive+0x23c>)
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f001 f840 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d008      	beq.n	8001b84 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e148      	b.n	8001e08 <HAL_I2C_Master_Receive+0x4c4>
 8001b76:	bf00      	nop
 8001b78:	00100002 	.word	0x00100002
 8001b7c:	ffff0000 	.word	0xffff0000
 8001b80:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001bca:	b662      	cpsie	i
}
 8001bcc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c00:	e0ee      	b.n	8001de0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4981      	ldr	r1, [pc, #516]	@ (8001e10 <HAL_I2C_Master_Receive+0x4cc>)
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 ffed 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0f5      	b.n	8001e08 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001c62:	4b6c      	ldr	r3, [pc, #432]	@ (8001e14 <HAL_I2C_Master_Receive+0x4d0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	08db      	lsrs	r3, r3, #3
 8001c68:	4a6b      	ldr	r2, [pc, #428]	@ (8001e18 <HAL_I2C_Master_Receive+0x4d4>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0a1a      	lsrs	r2, r3, #8
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	00da      	lsls	r2, r3, #3
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d118      	bne.n	8001cba <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2220      	movs	r2, #32
 8001c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	f043 0220 	orr.w	r2, r3, #32
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001caa:	b662      	cpsie	i
}
 8001cac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e0a6      	b.n	8001e08 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d1d9      	bne.n	8001c7c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d0a:	b662      	cpsie	i
}
 8001d0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d40:	e04e      	b.n	8001de0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f001 f8fa 	bl	8002f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e058      	b.n	8001e08 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d124      	bne.n	8001de0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d107      	bne.n	8001dae <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dac:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f47f ae88 	bne.w	8001afa <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2220      	movs	r2, #32
 8001dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001e06:	2302      	movs	r3, #2
  }
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3728      	adds	r7, #40	@ 0x28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	00010004 	.word	0x00010004
 8001e14:	20000000 	.word	0x20000000
 8001e18:	14f8b589 	.word	0x14f8b589

08001e1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	4608      	mov	r0, r1
 8001e26:	4611      	mov	r1, r2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	817b      	strh	r3, [r7, #10]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	813b      	strh	r3, [r7, #8]
 8001e32:	4613      	mov	r3, r2
 8001e34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e36:	f7ff f92d 	bl	8001094 <HAL_GetTick>
 8001e3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b20      	cmp	r3, #32
 8001e46:	f040 80d9 	bne.w	8001ffc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2319      	movs	r3, #25
 8001e50:	2201      	movs	r2, #1
 8001e52:	496d      	ldr	r1, [pc, #436]	@ (8002008 <HAL_I2C_Mem_Write+0x1ec>)
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 fec9 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e60:	2302      	movs	r3, #2
 8001e62:	e0cc      	b.n	8001ffe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_I2C_Mem_Write+0x56>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e0c5      	b.n	8001ffe <HAL_I2C_Mem_Write+0x1e2>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d007      	beq.n	8001e98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ea6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2221      	movs	r2, #33	@ 0x21
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2240      	movs	r2, #64	@ 0x40
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6a3a      	ldr	r2, [r7, #32]
 8001ec2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4a4d      	ldr	r2, [pc, #308]	@ (800200c <HAL_I2C_Mem_Write+0x1f0>)
 8001ed8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001eda:	88f8      	ldrh	r0, [r7, #6]
 8001edc:	893a      	ldrh	r2, [r7, #8]
 8001ede:	8979      	ldrh	r1, [r7, #10]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	4603      	mov	r3, r0
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 fd00 	bl	80028f0 <I2C_RequestMemoryWrite>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d052      	beq.n	8001f9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e081      	b.n	8001ffe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 ff8e 	bl	8002e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00d      	beq.n	8001f26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d107      	bne.n	8001f22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e06b      	b.n	8001ffe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2a:	781a      	ldrb	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d11b      	bne.n	8001f9c <HAL_I2C_Mem_Write+0x180>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d017      	beq.n	8001f9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f70:	781a      	ldrb	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1aa      	bne.n	8001efa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 ff81 	bl	8002eb0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00d      	beq.n	8001fd0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d107      	bne.n	8001fcc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e016      	b.n	8001ffe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e000      	b.n	8001ffe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ffc:	2302      	movs	r3, #2
  }
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	00100002 	.word	0x00100002
 800200c:	ffff0000 	.word	0xffff0000

08002010 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08c      	sub	sp, #48	@ 0x30
 8002014:	af02      	add	r7, sp, #8
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	4608      	mov	r0, r1
 800201a:	4611      	mov	r1, r2
 800201c:	461a      	mov	r2, r3
 800201e:	4603      	mov	r3, r0
 8002020:	817b      	strh	r3, [r7, #10]
 8002022:	460b      	mov	r3, r1
 8002024:	813b      	strh	r3, [r7, #8]
 8002026:	4613      	mov	r3, r2
 8002028:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800202e:	f7ff f831 	bl	8001094 <HAL_GetTick>
 8002032:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b20      	cmp	r3, #32
 800203e:	f040 8250 	bne.w	80024e2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2319      	movs	r3, #25
 8002048:	2201      	movs	r2, #1
 800204a:	4982      	ldr	r1, [pc, #520]	@ (8002254 <HAL_I2C_Mem_Read+0x244>)
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 fdcd 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002058:	2302      	movs	r3, #2
 800205a:	e243      	b.n	80024e4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_I2C_Mem_Read+0x5a>
 8002066:	2302      	movs	r3, #2
 8002068:	e23c      	b.n	80024e4 <HAL_I2C_Mem_Read+0x4d4>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d007      	beq.n	8002090 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800209e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2222      	movs	r2, #34	@ 0x22
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2240      	movs	r2, #64	@ 0x40
 80020ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80020c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4a62      	ldr	r2, [pc, #392]	@ (8002258 <HAL_I2C_Mem_Read+0x248>)
 80020d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020d2:	88f8      	ldrh	r0, [r7, #6]
 80020d4:	893a      	ldrh	r2, [r7, #8]
 80020d6:	8979      	ldrh	r1, [r7, #10]
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	4603      	mov	r3, r0
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fc9a 	bl	8002a1c <I2C_RequestMemoryRead>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e1f8      	b.n	80024e4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d113      	bne.n	8002122 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	e1cc      	b.n	80024bc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002126:	2b01      	cmp	r3, #1
 8002128:	d11e      	bne.n	8002168 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002138:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800213a:	b672      	cpsid	i
}
 800213c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002162:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002164:	b662      	cpsie	i
}
 8002166:	e035      	b.n	80021d4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800216c:	2b02      	cmp	r3, #2
 800216e:	d11e      	bne.n	80021ae <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800217e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002180:	b672      	cpsid	i
}
 8002182:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021aa:	b662      	cpsie	i
}
 80021ac:	e012      	b.n	80021d4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021bc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80021d4:	e172      	b.n	80024bc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021da:	2b03      	cmp	r3, #3
 80021dc:	f200 811f 	bhi.w	800241e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d123      	bne.n	8002230 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 fea7 	bl	8002f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e173      	b.n	80024e4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800222e:	e145      	b.n	80024bc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002234:	2b02      	cmp	r3, #2
 8002236:	d152      	bne.n	80022de <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800223e:	2200      	movs	r2, #0
 8002240:	4906      	ldr	r1, [pc, #24]	@ (800225c <HAL_I2C_Mem_Read+0x24c>)
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 fcd2 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d008      	beq.n	8002260 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e148      	b.n	80024e4 <HAL_I2C_Mem_Read+0x4d4>
 8002252:	bf00      	nop
 8002254:	00100002 	.word	0x00100002
 8002258:	ffff0000 	.word	0xffff0000
 800225c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002260:	b672      	cpsid	i
}
 8002262:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022a6:	b662      	cpsie	i
}
 80022a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022dc:	e0ee      	b.n	80024bc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e4:	2200      	movs	r2, #0
 80022e6:	4981      	ldr	r1, [pc, #516]	@ (80024ec <HAL_I2C_Mem_Read+0x4dc>)
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 fc7f 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0f5      	b.n	80024e4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002306:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002308:	b672      	cpsid	i
}
 800230a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002334:	b29b      	uxth	r3, r3
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800233e:	4b6c      	ldr	r3, [pc, #432]	@ (80024f0 <HAL_I2C_Mem_Read+0x4e0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	08db      	lsrs	r3, r3, #3
 8002344:	4a6b      	ldr	r2, [pc, #428]	@ (80024f4 <HAL_I2C_Mem_Read+0x4e4>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0a1a      	lsrs	r2, r3, #8
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	00da      	lsls	r2, r3, #3
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	3b01      	subs	r3, #1
 800235c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d118      	bne.n	8002396 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2220      	movs	r2, #32
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	f043 0220 	orr.w	r2, r3, #32
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002386:	b662      	cpsie	i
}
 8002388:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0a6      	b.n	80024e4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d1d9      	bne.n	8002358 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023e6:	b662      	cpsie	i
}
 80023e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800241c:	e04e      	b.n	80024bc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800241e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002420:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 fd8c 	bl	8002f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e058      	b.n	80024e4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b04      	cmp	r3, #4
 8002470:	d124      	bne.n	80024bc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002476:	2b03      	cmp	r3, #3
 8002478:	d107      	bne.n	800248a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002488:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f47f ae88 	bne.w	80021d6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80024e2:	2302      	movs	r3, #2
  }
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3728      	adds	r7, #40	@ 0x28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	00010004 	.word	0x00010004
 80024f0:	20000000 	.word	0x20000000
 80024f4:	14f8b589 	.word	0x14f8b589

080024f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	@ 0x28
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	460b      	mov	r3, r1
 8002506:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002508:	f7fe fdc4 	bl	8001094 <HAL_GetTick>
 800250c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b20      	cmp	r3, #32
 800251c:	f040 8111 	bne.w	8002742 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2319      	movs	r3, #25
 8002526:	2201      	movs	r2, #1
 8002528:	4988      	ldr	r1, [pc, #544]	@ (800274c <HAL_I2C_IsDeviceReady+0x254>)
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fb5e 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002536:	2302      	movs	r3, #2
 8002538:	e104      	b.n	8002744 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_I2C_IsDeviceReady+0x50>
 8002544:	2302      	movs	r3, #2
 8002546:	e0fd      	b.n	8002744 <HAL_I2C_IsDeviceReady+0x24c>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d007      	beq.n	800256e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800257c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2224      	movs	r2, #36	@ 0x24
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4a70      	ldr	r2, [pc, #448]	@ (8002750 <HAL_I2C_IsDeviceReady+0x258>)
 8002590:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fb1c 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00d      	beq.n	80025d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025c8:	d103      	bne.n	80025d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025d0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e0b6      	b.n	8002744 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025d6:	897b      	ldrh	r3, [r7, #10]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80025e6:	f7fe fd55 	bl	8001094 <HAL_GetTick>
 80025ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	bf0c      	ite	eq
 80025fa:	2301      	moveq	r3, #1
 80025fc:	2300      	movne	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800260c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800261a:	e025      	b.n	8002668 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800261c:	f7fe fd3a 	bl	8001094 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d302      	bcc.n	8002632 <HAL_I2C_IsDeviceReady+0x13a>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	22a0      	movs	r2, #160	@ 0xa0
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b02      	cmp	r3, #2
 8002646:	bf0c      	ite	eq
 8002648:	2301      	moveq	r3, #1
 800264a:	2300      	movne	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800265a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2ba0      	cmp	r3, #160	@ 0xa0
 8002672:	d005      	beq.n	8002680 <HAL_I2C_IsDeviceReady+0x188>
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <HAL_I2C_IsDeviceReady+0x188>
 800267a:	7dbb      	ldrb	r3, [r7, #22]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0cd      	beq.n	800261c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b02      	cmp	r3, #2
 8002694:	d129      	bne.n	80026ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2319      	movs	r3, #25
 80026c2:	2201      	movs	r2, #1
 80026c4:	4921      	ldr	r1, [pc, #132]	@ (800274c <HAL_I2C_IsDeviceReady+0x254>)
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 fa90 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e036      	b.n	8002744 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e02c      	b.n	8002744 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002702:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	2319      	movs	r3, #25
 800270a:	2201      	movs	r2, #1
 800270c:	490f      	ldr	r1, [pc, #60]	@ (800274c <HAL_I2C_IsDeviceReady+0x254>)
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fa6c 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e012      	b.n	8002744 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	3301      	adds	r3, #1
 8002722:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	429a      	cmp	r2, r3
 800272a:	f4ff af32 	bcc.w	8002592 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002742:	2302      	movs	r3, #2
  }
}
 8002744:	4618      	mov	r0, r3
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	00100002 	.word	0x00100002
 8002750:	ffff0000 	.word	0xffff0000

08002754 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af02      	add	r7, sp, #8
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	460b      	mov	r3, r1
 8002762:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002778:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d006      	beq.n	800278e <I2C_MasterRequestRead+0x3a>
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d003      	beq.n	800278e <I2C_MasterRequestRead+0x3a>
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800278c:	d108      	bne.n	80027a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	e00b      	b.n	80027b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a4:	2b11      	cmp	r3, #17
 80027a6:	d107      	bne.n	80027b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 fa11 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027de:	d103      	bne.n	80027e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e079      	b.n	80028e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027f4:	d108      	bne.n	8002808 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027f6:	897b      	ldrh	r3, [r7, #10]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	611a      	str	r2, [r3, #16]
 8002806:	e05f      	b.n	80028c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002808:	897b      	ldrh	r3, [r7, #10]
 800280a:	11db      	asrs	r3, r3, #7
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f003 0306 	and.w	r3, r3, #6
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f063 030f 	orn	r3, r3, #15
 8002818:	b2da      	uxtb	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	4930      	ldr	r1, [pc, #192]	@ (80028e8 <I2C_MasterRequestRead+0x194>)
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 fa5a 	bl	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e054      	b.n	80028e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002836:	897b      	ldrh	r3, [r7, #10]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4929      	ldr	r1, [pc, #164]	@ (80028ec <I2C_MasterRequestRead+0x198>)
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fa4a 	bl	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e044      	b.n	80028e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800287a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f9af 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00d      	beq.n	80028b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028a2:	d103      	bne.n	80028ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e017      	b.n	80028e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80028b0:	897b      	ldrh	r3, [r7, #10]
 80028b2:	11db      	asrs	r3, r3, #7
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f003 0306 	and.w	r3, r3, #6
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f063 030e 	orn	r3, r3, #14
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4907      	ldr	r1, [pc, #28]	@ (80028ec <I2C_MasterRequestRead+0x198>)
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fa06 	bl	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	00010008 	.word	0x00010008
 80028ec:	00010002 	.word	0x00010002

080028f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	4608      	mov	r0, r1
 80028fa:	4611      	mov	r1, r2
 80028fc:	461a      	mov	r2, r3
 80028fe:	4603      	mov	r3, r0
 8002900:	817b      	strh	r3, [r7, #10]
 8002902:	460b      	mov	r3, r1
 8002904:	813b      	strh	r3, [r7, #8]
 8002906:	4613      	mov	r3, r2
 8002908:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002918:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	2200      	movs	r2, #0
 8002922:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f960 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00d      	beq.n	800294e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002940:	d103      	bne.n	800294a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002948:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e05f      	b.n	8002a0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800294e:	897b      	ldrh	r3, [r7, #10]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800295c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	492d      	ldr	r1, [pc, #180]	@ (8002a18 <I2C_RequestMemoryWrite+0x128>)
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f9bb 	bl	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e04c      	b.n	8002a0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800298a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800298c:	6a39      	ldr	r1, [r7, #32]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fa46 	bl	8002e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00d      	beq.n	80029b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d107      	bne.n	80029b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e02b      	b.n	8002a0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029bc:	893b      	ldrh	r3, [r7, #8]
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	611a      	str	r2, [r3, #16]
 80029c6:	e021      	b.n	8002a0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029c8:	893b      	ldrh	r3, [r7, #8]
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d8:	6a39      	ldr	r1, [r7, #32]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fa20 	bl	8002e20 <I2C_WaitOnTXEFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d107      	bne.n	80029fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e005      	b.n	8002a0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a02:	893b      	ldrh	r3, [r7, #8]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	00010002 	.word	0x00010002

08002a1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	4608      	mov	r0, r1
 8002a26:	4611      	mov	r1, r2
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	817b      	strh	r3, [r7, #10]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	813b      	strh	r3, [r7, #8]
 8002a32:	4613      	mov	r3, r2
 8002a34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f8c2 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00d      	beq.n	8002a8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a7c:	d103      	bne.n	8002a86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0aa      	b.n	8002be0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a8a:	897b      	ldrh	r3, [r7, #10]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	4952      	ldr	r1, [pc, #328]	@ (8002be8 <I2C_RequestMemoryRead+0x1cc>)
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f91d 	bl	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e097      	b.n	8002be0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac8:	6a39      	ldr	r1, [r7, #32]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f9a8 	bl	8002e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00d      	beq.n	8002af2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d107      	bne.n	8002aee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e076      	b.n	8002be0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d105      	bne.n	8002b04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002af8:	893b      	ldrh	r3, [r7, #8]
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	611a      	str	r2, [r3, #16]
 8002b02:	e021      	b.n	8002b48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b04:	893b      	ldrh	r3, [r7, #8]
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b14:	6a39      	ldr	r1, [r7, #32]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f982 	bl	8002e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00d      	beq.n	8002b3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d107      	bne.n	8002b3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e050      	b.n	8002be0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b3e:	893b      	ldrh	r3, [r7, #8]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b4a:	6a39      	ldr	r1, [r7, #32]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f967 	bl	8002e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00d      	beq.n	8002b74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d107      	bne.n	8002b70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e035      	b.n	8002be0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f82b 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00d      	beq.n	8002bb8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002baa:	d103      	bne.n	8002bb4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e013      	b.n	8002be0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bb8:	897b      	ldrh	r3, [r7, #10]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bca:	6a3a      	ldr	r2, [r7, #32]
 8002bcc:	4906      	ldr	r1, [pc, #24]	@ (8002be8 <I2C_RequestMemoryRead+0x1cc>)
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f886 	bl	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	00010002 	.word	0x00010002

08002bec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bfc:	e048      	b.n	8002c90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d044      	beq.n	8002c90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c06:	f7fe fa45 	bl	8001094 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d302      	bcc.n	8002c1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d139      	bne.n	8002c90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	0c1b      	lsrs	r3, r3, #16
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d10d      	bne.n	8002c42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	43da      	mvns	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4013      	ands	r3, r2
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	e00c      	b.n	8002c5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	43da      	mvns	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d116      	bne.n	8002c90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7c:	f043 0220 	orr.w	r2, r3, #32
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e023      	b.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	0c1b      	lsrs	r3, r3, #16
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d10d      	bne.n	8002cb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	43da      	mvns	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	e00c      	b.n	8002cd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d093      	beq.n	8002bfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cee:	e071      	b.n	8002dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cfe:	d123      	bne.n	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	f043 0204 	orr.w	r2, r3, #4
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e067      	b.n	8002e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4e:	d041      	beq.n	8002dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d50:	f7fe f9a0 	bl	8001094 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d302      	bcc.n	8002d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d136      	bne.n	8002dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	0c1b      	lsrs	r3, r3, #16
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d10c      	bne.n	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	43da      	mvns	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bf14      	ite	ne
 8002d82:	2301      	movne	r3, #1
 8002d84:	2300      	moveq	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	e00b      	b.n	8002da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	43da      	mvns	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4013      	ands	r3, r2
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bf14      	ite	ne
 8002d9c:	2301      	movne	r3, #1
 8002d9e:	2300      	moveq	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d016      	beq.n	8002dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	f043 0220 	orr.w	r2, r3, #32
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e021      	b.n	8002e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	0c1b      	lsrs	r3, r3, #16
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d10c      	bne.n	8002df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	43da      	mvns	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	4013      	ands	r3, r2
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e00b      	b.n	8002e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4013      	ands	r3, r2
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bf14      	ite	ne
 8002e0a:	2301      	movne	r3, #1
 8002e0c:	2300      	moveq	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f47f af6d 	bne.w	8002cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e2c:	e034      	b.n	8002e98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f8e3 	bl	8002ffa <I2C_IsAcknowledgeFailed>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e034      	b.n	8002ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e44:	d028      	beq.n	8002e98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e46:	f7fe f925 	bl	8001094 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d302      	bcc.n	8002e5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d11d      	bne.n	8002e98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e66:	2b80      	cmp	r3, #128	@ 0x80
 8002e68:	d016      	beq.n	8002e98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	f043 0220 	orr.w	r2, r3, #32
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e007      	b.n	8002ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea2:	2b80      	cmp	r3, #128	@ 0x80
 8002ea4:	d1c3      	bne.n	8002e2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ebc:	e034      	b.n	8002f28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f89b 	bl	8002ffa <I2C_IsAcknowledgeFailed>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e034      	b.n	8002f38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d028      	beq.n	8002f28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed6:	f7fe f8dd 	bl	8001094 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d302      	bcc.n	8002eec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d11d      	bne.n	8002f28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d016      	beq.n	8002f28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e007      	b.n	8002f38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d1c3      	bne.n	8002ebe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f4c:	e049      	b.n	8002fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b10      	cmp	r3, #16
 8002f5a:	d119      	bne.n	8002f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f06f 0210 	mvn.w	r2, #16
 8002f64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e030      	b.n	8002ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f90:	f7fe f880 	bl	8001094 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d302      	bcc.n	8002fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d11d      	bne.n	8002fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb0:	2b40      	cmp	r3, #64	@ 0x40
 8002fb2:	d016      	beq.n	8002fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e007      	b.n	8002ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fec:	2b40      	cmp	r3, #64	@ 0x40
 8002fee:	d1ae      	bne.n	8002f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003010:	d11b      	bne.n	800304a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800301a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	f043 0204 	orr.w	r2, r3, #4
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr
	...

08003058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e272      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 8087 	beq.w	8003186 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003078:	4b92      	ldr	r3, [pc, #584]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b04      	cmp	r3, #4
 8003082:	d00c      	beq.n	800309e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003084:	4b8f      	ldr	r3, [pc, #572]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 030c 	and.w	r3, r3, #12
 800308c:	2b08      	cmp	r3, #8
 800308e:	d112      	bne.n	80030b6 <HAL_RCC_OscConfig+0x5e>
 8003090:	4b8c      	ldr	r3, [pc, #560]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800309c:	d10b      	bne.n	80030b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309e:	4b89      	ldr	r3, [pc, #548]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d06c      	beq.n	8003184 <HAL_RCC_OscConfig+0x12c>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d168      	bne.n	8003184 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e24c      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030be:	d106      	bne.n	80030ce <HAL_RCC_OscConfig+0x76>
 80030c0:	4b80      	ldr	r3, [pc, #512]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a7f      	ldr	r2, [pc, #508]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	e02e      	b.n	800312c <HAL_RCC_OscConfig+0xd4>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x98>
 80030d6:	4b7b      	ldr	r3, [pc, #492]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a7a      	ldr	r2, [pc, #488]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b78      	ldr	r3, [pc, #480]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a77      	ldr	r2, [pc, #476]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80030e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e01d      	b.n	800312c <HAL_RCC_OscConfig+0xd4>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030f8:	d10c      	bne.n	8003114 <HAL_RCC_OscConfig+0xbc>
 80030fa:	4b72      	ldr	r3, [pc, #456]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a71      	ldr	r2, [pc, #452]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	4b6f      	ldr	r3, [pc, #444]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a6e      	ldr	r2, [pc, #440]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e00b      	b.n	800312c <HAL_RCC_OscConfig+0xd4>
 8003114:	4b6b      	ldr	r3, [pc, #428]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a6a      	ldr	r2, [pc, #424]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 800311a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	4b68      	ldr	r3, [pc, #416]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a67      	ldr	r2, [pc, #412]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800312a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d013      	beq.n	800315c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7fd ffae 	bl	8001094 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800313c:	f7fd ffaa 	bl	8001094 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	@ 0x64
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e200      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	4b5d      	ldr	r3, [pc, #372]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0xe4>
 800315a:	e014      	b.n	8003186 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fd ff9a 	bl	8001094 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003164:	f7fd ff96 	bl	8001094 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	@ 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e1ec      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003176:	4b53      	ldr	r3, [pc, #332]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x10c>
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d063      	beq.n	800325a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003192:	4b4c      	ldr	r3, [pc, #304]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800319e:	4b49      	ldr	r3, [pc, #292]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d11c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x18c>
 80031aa:	4b46      	ldr	r3, [pc, #280]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d116      	bne.n	80031e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	4b43      	ldr	r3, [pc, #268]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_RCC_OscConfig+0x176>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d001      	beq.n	80031ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e1c0      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ce:	4b3d      	ldr	r3, [pc, #244]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4939      	ldr	r1, [pc, #228]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e2:	e03a      	b.n	800325a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d020      	beq.n	800322e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ec:	4b36      	ldr	r3, [pc, #216]	@ (80032c8 <HAL_RCC_OscConfig+0x270>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f2:	f7fd ff4f 	bl	8001094 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fa:	f7fd ff4b 	bl	8001094 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e1a1      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320c:	4b2d      	ldr	r3, [pc, #180]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003218:	4b2a      	ldr	r3, [pc, #168]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4927      	ldr	r1, [pc, #156]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]
 800322c:	e015      	b.n	800325a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800322e:	4b26      	ldr	r3, [pc, #152]	@ (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fd ff2e 	bl	8001094 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800323c:	f7fd ff2a 	bl	8001094 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e180      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324e:	4b1d      	ldr	r3, [pc, #116]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d03a      	beq.n	80032dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d019      	beq.n	80032a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800326e:	4b17      	ldr	r3, [pc, #92]	@ (80032cc <HAL_RCC_OscConfig+0x274>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003274:	f7fd ff0e 	bl	8001094 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800327c:	f7fd ff0a 	bl	8001094 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e160      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328e:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800329a:	2001      	movs	r0, #1
 800329c:	f000 face 	bl	800383c <RCC_Delay>
 80032a0:	e01c      	b.n	80032dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a2:	4b0a      	ldr	r3, [pc, #40]	@ (80032cc <HAL_RCC_OscConfig+0x274>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a8:	f7fd fef4 	bl	8001094 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ae:	e00f      	b.n	80032d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b0:	f7fd fef0 	bl	8001094 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d908      	bls.n	80032d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e146      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
 80032c8:	42420000 	.word	0x42420000
 80032cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	4b92      	ldr	r3, [pc, #584]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1e9      	bne.n	80032b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80a6 	beq.w	8003436 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ea:	2300      	movs	r3, #0
 80032ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ee:	4b8b      	ldr	r3, [pc, #556]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10d      	bne.n	8003316 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fa:	4b88      	ldr	r3, [pc, #544]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	4a87      	ldr	r2, [pc, #540]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 8003300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003304:	61d3      	str	r3, [r2, #28]
 8003306:	4b85      	ldr	r3, [pc, #532]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003316:	4b82      	ldr	r3, [pc, #520]	@ (8003520 <HAL_RCC_OscConfig+0x4c8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d118      	bne.n	8003354 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003322:	4b7f      	ldr	r3, [pc, #508]	@ (8003520 <HAL_RCC_OscConfig+0x4c8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a7e      	ldr	r2, [pc, #504]	@ (8003520 <HAL_RCC_OscConfig+0x4c8>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800332c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332e:	f7fd feb1 	bl	8001094 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003336:	f7fd fead 	bl	8001094 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b64      	cmp	r3, #100	@ 0x64
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e103      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	4b75      	ldr	r3, [pc, #468]	@ (8003520 <HAL_RCC_OscConfig+0x4c8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x312>
 800335c:	4b6f      	ldr	r3, [pc, #444]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	4a6e      	ldr	r2, [pc, #440]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6213      	str	r3, [r2, #32]
 8003368:	e02d      	b.n	80033c6 <HAL_RCC_OscConfig+0x36e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x334>
 8003372:	4b6a      	ldr	r3, [pc, #424]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	4a69      	ldr	r2, [pc, #420]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	6213      	str	r3, [r2, #32]
 800337e:	4b67      	ldr	r3, [pc, #412]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	4a66      	ldr	r2, [pc, #408]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 8003384:	f023 0304 	bic.w	r3, r3, #4
 8003388:	6213      	str	r3, [r2, #32]
 800338a:	e01c      	b.n	80033c6 <HAL_RCC_OscConfig+0x36e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b05      	cmp	r3, #5
 8003392:	d10c      	bne.n	80033ae <HAL_RCC_OscConfig+0x356>
 8003394:	4b61      	ldr	r3, [pc, #388]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	4a60      	ldr	r2, [pc, #384]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 800339a:	f043 0304 	orr.w	r3, r3, #4
 800339e:	6213      	str	r3, [r2, #32]
 80033a0:	4b5e      	ldr	r3, [pc, #376]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4a5d      	ldr	r2, [pc, #372]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6213      	str	r3, [r2, #32]
 80033ac:	e00b      	b.n	80033c6 <HAL_RCC_OscConfig+0x36e>
 80033ae:	4b5b      	ldr	r3, [pc, #364]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4a5a      	ldr	r2, [pc, #360]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	6213      	str	r3, [r2, #32]
 80033ba:	4b58      	ldr	r3, [pc, #352]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4a57      	ldr	r2, [pc, #348]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d015      	beq.n	80033fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ce:	f7fd fe61 	bl	8001094 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fd fe5d 	bl	8001094 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e0b1      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ec:	4b4b      	ldr	r3, [pc, #300]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ee      	beq.n	80033d6 <HAL_RCC_OscConfig+0x37e>
 80033f8:	e014      	b.n	8003424 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fa:	f7fd fe4b 	bl	8001094 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fd fe47 	bl	8001094 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e09b      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003418:	4b40      	ldr	r3, [pc, #256]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ee      	bne.n	8003402 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d105      	bne.n	8003436 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342a:	4b3c      	ldr	r3, [pc, #240]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	4a3b      	ldr	r2, [pc, #236]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 8003430:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003434:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8087 	beq.w	800354e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003440:	4b36      	ldr	r3, [pc, #216]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b08      	cmp	r3, #8
 800344a:	d061      	beq.n	8003510 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d146      	bne.n	80034e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003454:	4b33      	ldr	r3, [pc, #204]	@ (8003524 <HAL_RCC_OscConfig+0x4cc>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345a:	f7fd fe1b 	bl	8001094 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003462:	f7fd fe17 	bl	8001094 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e06d      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003474:	4b29      	ldr	r3, [pc, #164]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f0      	bne.n	8003462 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003488:	d108      	bne.n	800349c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800348a:	4b24      	ldr	r3, [pc, #144]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	4921      	ldr	r1, [pc, #132]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800349c:	4b1f      	ldr	r3, [pc, #124]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a19      	ldr	r1, [r3, #32]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	430b      	orrs	r3, r1
 80034ae:	491b      	ldr	r1, [pc, #108]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ba:	f7fd fdeb 	bl	8001094 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c2:	f7fd fde7 	bl	8001094 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e03d      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d4:	4b11      	ldr	r3, [pc, #68]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x46a>
 80034e0:	e035      	b.n	800354e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e2:	4b10      	ldr	r3, [pc, #64]	@ (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fd fdd4 	bl	8001094 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fd fdd0 	bl	8001094 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e026      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003502:	4b06      	ldr	r3, [pc, #24]	@ (800351c <HAL_RCC_OscConfig+0x4c4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x498>
 800350e:	e01e      	b.n	800354e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d107      	bne.n	8003528 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e019      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>
 800351c:	40021000 	.word	0x40021000
 8003520:	40007000 	.word	0x40007000
 8003524:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003528:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <HAL_RCC_OscConfig+0x500>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	429a      	cmp	r2, r3
 800353a:	d106      	bne.n	800354a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d001      	beq.n	800354e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000

0800355c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0d0      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003570:	4b6a      	ldr	r3, [pc, #424]	@ (800371c <HAL_RCC_ClockConfig+0x1c0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d910      	bls.n	80035a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b67      	ldr	r3, [pc, #412]	@ (800371c <HAL_RCC_ClockConfig+0x1c0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 0207 	bic.w	r2, r3, #7
 8003586:	4965      	ldr	r1, [pc, #404]	@ (800371c <HAL_RCC_ClockConfig+0x1c0>)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800358e:	4b63      	ldr	r3, [pc, #396]	@ (800371c <HAL_RCC_ClockConfig+0x1c0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0b8      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d020      	beq.n	80035ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035b8:	4b59      	ldr	r3, [pc, #356]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4a58      	ldr	r2, [pc, #352]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035d0:	4b53      	ldr	r3, [pc, #332]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4a52      	ldr	r2, [pc, #328]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80035da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035dc:	4b50      	ldr	r3, [pc, #320]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	494d      	ldr	r1, [pc, #308]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d040      	beq.n	800367c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d107      	bne.n	8003612 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	4b47      	ldr	r3, [pc, #284]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d115      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e07f      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d107      	bne.n	800362a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361a:	4b41      	ldr	r3, [pc, #260]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e073      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362a:	4b3d      	ldr	r3, [pc, #244]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e06b      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363a:	4b39      	ldr	r3, [pc, #228]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f023 0203 	bic.w	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4936      	ldr	r1, [pc, #216]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800364c:	f7fd fd22 	bl	8001094 <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	e00a      	b.n	800366a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003654:	f7fd fd1e 	bl	8001094 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e053      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	4b2d      	ldr	r3, [pc, #180]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 020c 	and.w	r2, r3, #12
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	429a      	cmp	r2, r3
 800367a:	d1eb      	bne.n	8003654 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800367c:	4b27      	ldr	r3, [pc, #156]	@ (800371c <HAL_RCC_ClockConfig+0x1c0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d210      	bcs.n	80036ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b24      	ldr	r3, [pc, #144]	@ (800371c <HAL_RCC_ClockConfig+0x1c0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 0207 	bic.w	r2, r3, #7
 8003692:	4922      	ldr	r1, [pc, #136]	@ (800371c <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b20      	ldr	r3, [pc, #128]	@ (800371c <HAL_RCC_ClockConfig+0x1c0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e032      	b.n	8003712 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b8:	4b19      	ldr	r3, [pc, #100]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4916      	ldr	r1, [pc, #88]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036d6:	4b12      	ldr	r3, [pc, #72]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	490e      	ldr	r1, [pc, #56]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036ea:	f000 f821 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 80036ee:	4602      	mov	r2, r0
 80036f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	490a      	ldr	r1, [pc, #40]	@ (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80036fc:	5ccb      	ldrb	r3, [r1, r3]
 80036fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003702:	4a09      	ldr	r2, [pc, #36]	@ (8003728 <HAL_RCC_ClockConfig+0x1cc>)
 8003704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003706:	4b09      	ldr	r3, [pc, #36]	@ (800372c <HAL_RCC_ClockConfig+0x1d0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fd fc80 	bl	8001010 <HAL_InitTick>

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40022000 	.word	0x40022000
 8003720:	40021000 	.word	0x40021000
 8003724:	0800568c 	.word	0x0800568c
 8003728:	20000000 	.word	0x20000000
 800372c:	20000004 	.word	0x20000004

08003730 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	2300      	movs	r3, #0
 8003744:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800374a:	4b1e      	ldr	r3, [pc, #120]	@ (80037c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 030c 	and.w	r3, r3, #12
 8003756:	2b04      	cmp	r3, #4
 8003758:	d002      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0x30>
 800375a:	2b08      	cmp	r3, #8
 800375c:	d003      	beq.n	8003766 <HAL_RCC_GetSysClockFreq+0x36>
 800375e:	e027      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003760:	4b19      	ldr	r3, [pc, #100]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003762:	613b      	str	r3, [r7, #16]
      break;
 8003764:	e027      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	0c9b      	lsrs	r3, r3, #18
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	4a17      	ldr	r2, [pc, #92]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003770:	5cd3      	ldrb	r3, [r2, r3]
 8003772:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d010      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800377e:	4b11      	ldr	r3, [pc, #68]	@ (80037c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	0c5b      	lsrs	r3, r3, #17
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	4a11      	ldr	r2, [pc, #68]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800378a:	5cd3      	ldrb	r3, [r2, r3]
 800378c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a0d      	ldr	r2, [pc, #52]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003792:	fb03 f202 	mul.w	r2, r3, r2
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	fbb2 f3f3 	udiv	r3, r2, r3
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	e004      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a0c      	ldr	r2, [pc, #48]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037a4:	fb02 f303 	mul.w	r3, r2, r3
 80037a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	613b      	str	r3, [r7, #16]
      break;
 80037ae:	e002      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037b0:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80037b2:	613b      	str	r3, [r7, #16]
      break;
 80037b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b6:	693b      	ldr	r3, [r7, #16]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40021000 	.word	0x40021000
 80037c8:	007a1200 	.word	0x007a1200
 80037cc:	080056a4 	.word	0x080056a4
 80037d0:	080056b4 	.word	0x080056b4
 80037d4:	003d0900 	.word	0x003d0900

080037d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037dc:	4b02      	ldr	r3, [pc, #8]	@ (80037e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80037de:	681b      	ldr	r3, [r3, #0]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr
 80037e8:	20000000 	.word	0x20000000

080037ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037f0:	f7ff fff2 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b05      	ldr	r3, [pc, #20]	@ (800380c <HAL_RCC_GetPCLK1Freq+0x20>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4903      	ldr	r1, [pc, #12]	@ (8003810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000
 8003810:	0800569c 	.word	0x0800569c

08003814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003818:	f7ff ffde 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b05      	ldr	r3, [pc, #20]	@ (8003834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	0adb      	lsrs	r3, r3, #11
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4903      	ldr	r1, [pc, #12]	@ (8003838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40021000 	.word	0x40021000
 8003838:	0800569c 	.word	0x0800569c

0800383c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003844:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <RCC_Delay+0x34>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a0a      	ldr	r2, [pc, #40]	@ (8003874 <RCC_Delay+0x38>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	0a5b      	lsrs	r3, r3, #9
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003858:	bf00      	nop
  }
  while (Delay --);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1e5a      	subs	r2, r3, #1
 800385e:	60fa      	str	r2, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f9      	bne.n	8003858 <RCC_Delay+0x1c>
}
 8003864:	bf00      	nop
 8003866:	bf00      	nop
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr
 8003870:	20000000 	.word	0x20000000
 8003874:	10624dd3 	.word	0x10624dd3

08003878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e042      	b.n	8003910 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd fa62 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	@ 0x24
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f971 	bl	8003ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	@ 0x28
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b20      	cmp	r3, #32
 8003936:	d175      	bne.n	8003a24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_UART_Transmit+0x2c>
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e06e      	b.n	8003a26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2221      	movs	r2, #33	@ 0x21
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003956:	f7fd fb9d 	bl	8001094 <HAL_GetTick>
 800395a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	88fa      	ldrh	r2, [r7, #6]
 8003966:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003970:	d108      	bne.n	8003984 <HAL_UART_Transmit+0x6c>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d104      	bne.n	8003984 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	e003      	b.n	800398c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003988:	2300      	movs	r3, #0
 800398a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800398c:	e02e      	b.n	80039ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2200      	movs	r2, #0
 8003996:	2180      	movs	r1, #128	@ 0x80
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f848 	bl	8003a2e <UART_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e03a      	b.n	8003a26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10b      	bne.n	80039ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	3302      	adds	r3, #2
 80039ca:	61bb      	str	r3, [r7, #24]
 80039cc:	e007      	b.n	80039de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	781a      	ldrb	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	3301      	adds	r3, #1
 80039dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1cb      	bne.n	800398e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2200      	movs	r2, #0
 80039fe:	2140      	movs	r1, #64	@ 0x40
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f814 	bl	8003a2e <UART_WaitOnFlagUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e006      	b.n	8003a26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e000      	b.n	8003a26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b086      	sub	sp, #24
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	603b      	str	r3, [r7, #0]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a3e:	e03b      	b.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d037      	beq.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a48:	f7fd fb24 	bl	8001094 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	6a3a      	ldr	r2, [r7, #32]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d302      	bcc.n	8003a5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e03a      	b.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d023      	beq.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b80      	cmp	r3, #128	@ 0x80
 8003a74:	d020      	beq.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b40      	cmp	r3, #64	@ 0x40
 8003a7a:	d01d      	beq.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d116      	bne.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f81d 	bl	8003ae0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e00f      	b.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d0b4      	beq.n	8003a40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b095      	sub	sp, #84	@ 0x54
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	330c      	adds	r3, #12
 8003aee:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	330c      	adds	r3, #12
 8003b06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b08:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e5      	bne.n	8003ae8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3314      	adds	r3, #20
 8003b22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3314      	adds	r3, #20
 8003b3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b44:	e841 2300 	strex	r3, r2, [r1]
 8003b48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e5      	bne.n	8003b1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d119      	bne.n	8003b8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	e853 3f00 	ldrex	r3, [r3]
 8003b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f023 0310 	bic.w	r3, r3, #16
 8003b6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	330c      	adds	r3, #12
 8003b76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b78:	61ba      	str	r2, [r7, #24]
 8003b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	6979      	ldr	r1, [r7, #20]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	e841 2300 	strex	r3, r2, [r1]
 8003b84:	613b      	str	r3, [r7, #16]
   return(result);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e5      	bne.n	8003b58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b9a:	bf00      	nop
 8003b9c:	3754      	adds	r7, #84	@ 0x54
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003bde:	f023 030c 	bic.w	r3, r3, #12
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a2c      	ldr	r2, [pc, #176]	@ (8003cb8 <UART_SetConfig+0x114>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d103      	bne.n	8003c14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c0c:	f7ff fe02 	bl	8003814 <HAL_RCC_GetPCLK2Freq>
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	e002      	b.n	8003c1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c14:	f7ff fdea 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8003c18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	009a      	lsls	r2, r3, #2
 8003c24:	441a      	add	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	4a22      	ldr	r2, [pc, #136]	@ (8003cbc <UART_SetConfig+0x118>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	0119      	lsls	r1, r3, #4
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	009a      	lsls	r2, r3, #2
 8003c44:	441a      	add	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c50:	4b1a      	ldr	r3, [pc, #104]	@ (8003cbc <UART_SetConfig+0x118>)
 8003c52:	fba3 0302 	umull	r0, r3, r3, r2
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	2064      	movs	r0, #100	@ 0x64
 8003c5a:	fb00 f303 	mul.w	r3, r0, r3
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	3332      	adds	r3, #50	@ 0x32
 8003c64:	4a15      	ldr	r2, [pc, #84]	@ (8003cbc <UART_SetConfig+0x118>)
 8003c66:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c70:	4419      	add	r1, r3
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	009a      	lsls	r2, r3, #2
 8003c7c:	441a      	add	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c88:	4b0c      	ldr	r3, [pc, #48]	@ (8003cbc <UART_SetConfig+0x118>)
 8003c8a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	2064      	movs	r0, #100	@ 0x64
 8003c92:	fb00 f303 	mul.w	r3, r0, r3
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	3332      	adds	r3, #50	@ 0x32
 8003c9c:	4a07      	ldr	r2, [pc, #28]	@ (8003cbc <UART_SetConfig+0x118>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	f003 020f 	and.w	r2, r3, #15
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	440a      	add	r2, r1
 8003cae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cb0:	bf00      	nop
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40013800 	.word	0x40013800
 8003cbc:	51eb851f 	.word	0x51eb851f

08003cc0 <std>:
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	b510      	push	{r4, lr}
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	e9c0 3300 	strd	r3, r3, [r0]
 8003cca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cce:	6083      	str	r3, [r0, #8]
 8003cd0:	8181      	strh	r1, [r0, #12]
 8003cd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8003cd4:	81c2      	strh	r2, [r0, #14]
 8003cd6:	6183      	str	r3, [r0, #24]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	2208      	movs	r2, #8
 8003cdc:	305c      	adds	r0, #92	@ 0x5c
 8003cde:	f000 fa11 	bl	8004104 <memset>
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d18 <std+0x58>)
 8003ce4:	6224      	str	r4, [r4, #32]
 8003ce6:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8003d1c <std+0x5c>)
 8003cea:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003cec:	4b0c      	ldr	r3, [pc, #48]	@ (8003d20 <std+0x60>)
 8003cee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d24 <std+0x64>)
 8003cf2:	6323      	str	r3, [r4, #48]	@ 0x30
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d28 <std+0x68>)
 8003cf6:	429c      	cmp	r4, r3
 8003cf8:	d006      	beq.n	8003d08 <std+0x48>
 8003cfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003cfe:	4294      	cmp	r4, r2
 8003d00:	d002      	beq.n	8003d08 <std+0x48>
 8003d02:	33d0      	adds	r3, #208	@ 0xd0
 8003d04:	429c      	cmp	r4, r3
 8003d06:	d105      	bne.n	8003d14 <std+0x54>
 8003d08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d10:	f000 ba70 	b.w	80041f4 <__retarget_lock_init_recursive>
 8003d14:	bd10      	pop	{r4, pc}
 8003d16:	bf00      	nop
 8003d18:	08003f35 	.word	0x08003f35
 8003d1c:	08003f57 	.word	0x08003f57
 8003d20:	08003f8f 	.word	0x08003f8f
 8003d24:	08003fb3 	.word	0x08003fb3
 8003d28:	2000012c 	.word	0x2000012c

08003d2c <stdio_exit_handler>:
 8003d2c:	4a02      	ldr	r2, [pc, #8]	@ (8003d38 <stdio_exit_handler+0xc>)
 8003d2e:	4903      	ldr	r1, [pc, #12]	@ (8003d3c <stdio_exit_handler+0x10>)
 8003d30:	4803      	ldr	r0, [pc, #12]	@ (8003d40 <stdio_exit_handler+0x14>)
 8003d32:	f000 b869 	b.w	8003e08 <_fwalk_sglue>
 8003d36:	bf00      	nop
 8003d38:	2000000c 	.word	0x2000000c
 8003d3c:	08004a89 	.word	0x08004a89
 8003d40:	2000001c 	.word	0x2000001c

08003d44 <cleanup_stdio>:
 8003d44:	6841      	ldr	r1, [r0, #4]
 8003d46:	4b0c      	ldr	r3, [pc, #48]	@ (8003d78 <cleanup_stdio+0x34>)
 8003d48:	b510      	push	{r4, lr}
 8003d4a:	4299      	cmp	r1, r3
 8003d4c:	4604      	mov	r4, r0
 8003d4e:	d001      	beq.n	8003d54 <cleanup_stdio+0x10>
 8003d50:	f000 fe9a 	bl	8004a88 <_fflush_r>
 8003d54:	68a1      	ldr	r1, [r4, #8]
 8003d56:	4b09      	ldr	r3, [pc, #36]	@ (8003d7c <cleanup_stdio+0x38>)
 8003d58:	4299      	cmp	r1, r3
 8003d5a:	d002      	beq.n	8003d62 <cleanup_stdio+0x1e>
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	f000 fe93 	bl	8004a88 <_fflush_r>
 8003d62:	68e1      	ldr	r1, [r4, #12]
 8003d64:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <cleanup_stdio+0x3c>)
 8003d66:	4299      	cmp	r1, r3
 8003d68:	d004      	beq.n	8003d74 <cleanup_stdio+0x30>
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d70:	f000 be8a 	b.w	8004a88 <_fflush_r>
 8003d74:	bd10      	pop	{r4, pc}
 8003d76:	bf00      	nop
 8003d78:	2000012c 	.word	0x2000012c
 8003d7c:	20000194 	.word	0x20000194
 8003d80:	200001fc 	.word	0x200001fc

08003d84 <global_stdio_init.part.0>:
 8003d84:	b510      	push	{r4, lr}
 8003d86:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <global_stdio_init.part.0+0x30>)
 8003d88:	4c0b      	ldr	r4, [pc, #44]	@ (8003db8 <global_stdio_init.part.0+0x34>)
 8003d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8003dbc <global_stdio_init.part.0+0x38>)
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	2104      	movs	r1, #4
 8003d92:	2200      	movs	r2, #0
 8003d94:	f7ff ff94 	bl	8003cc0 <std>
 8003d98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	2109      	movs	r1, #9
 8003da0:	f7ff ff8e 	bl	8003cc0 <std>
 8003da4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003da8:	2202      	movs	r2, #2
 8003daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dae:	2112      	movs	r1, #18
 8003db0:	f7ff bf86 	b.w	8003cc0 <std>
 8003db4:	20000264 	.word	0x20000264
 8003db8:	2000012c 	.word	0x2000012c
 8003dbc:	08003d2d 	.word	0x08003d2d

08003dc0 <__sfp_lock_acquire>:
 8003dc0:	4801      	ldr	r0, [pc, #4]	@ (8003dc8 <__sfp_lock_acquire+0x8>)
 8003dc2:	f000 ba18 	b.w	80041f6 <__retarget_lock_acquire_recursive>
 8003dc6:	bf00      	nop
 8003dc8:	2000026d 	.word	0x2000026d

08003dcc <__sfp_lock_release>:
 8003dcc:	4801      	ldr	r0, [pc, #4]	@ (8003dd4 <__sfp_lock_release+0x8>)
 8003dce:	f000 ba13 	b.w	80041f8 <__retarget_lock_release_recursive>
 8003dd2:	bf00      	nop
 8003dd4:	2000026d 	.word	0x2000026d

08003dd8 <__sinit>:
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	4604      	mov	r4, r0
 8003ddc:	f7ff fff0 	bl	8003dc0 <__sfp_lock_acquire>
 8003de0:	6a23      	ldr	r3, [r4, #32]
 8003de2:	b11b      	cbz	r3, 8003dec <__sinit+0x14>
 8003de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003de8:	f7ff bff0 	b.w	8003dcc <__sfp_lock_release>
 8003dec:	4b04      	ldr	r3, [pc, #16]	@ (8003e00 <__sinit+0x28>)
 8003dee:	6223      	str	r3, [r4, #32]
 8003df0:	4b04      	ldr	r3, [pc, #16]	@ (8003e04 <__sinit+0x2c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f5      	bne.n	8003de4 <__sinit+0xc>
 8003df8:	f7ff ffc4 	bl	8003d84 <global_stdio_init.part.0>
 8003dfc:	e7f2      	b.n	8003de4 <__sinit+0xc>
 8003dfe:	bf00      	nop
 8003e00:	08003d45 	.word	0x08003d45
 8003e04:	20000264 	.word	0x20000264

08003e08 <_fwalk_sglue>:
 8003e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e0c:	4607      	mov	r7, r0
 8003e0e:	4688      	mov	r8, r1
 8003e10:	4614      	mov	r4, r2
 8003e12:	2600      	movs	r6, #0
 8003e14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e18:	f1b9 0901 	subs.w	r9, r9, #1
 8003e1c:	d505      	bpl.n	8003e2a <_fwalk_sglue+0x22>
 8003e1e:	6824      	ldr	r4, [r4, #0]
 8003e20:	2c00      	cmp	r4, #0
 8003e22:	d1f7      	bne.n	8003e14 <_fwalk_sglue+0xc>
 8003e24:	4630      	mov	r0, r6
 8003e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e2a:	89ab      	ldrh	r3, [r5, #12]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d907      	bls.n	8003e40 <_fwalk_sglue+0x38>
 8003e30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e34:	3301      	adds	r3, #1
 8003e36:	d003      	beq.n	8003e40 <_fwalk_sglue+0x38>
 8003e38:	4629      	mov	r1, r5
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	47c0      	blx	r8
 8003e3e:	4306      	orrs	r6, r0
 8003e40:	3568      	adds	r5, #104	@ 0x68
 8003e42:	e7e9      	b.n	8003e18 <_fwalk_sglue+0x10>

08003e44 <iprintf>:
 8003e44:	b40f      	push	{r0, r1, r2, r3}
 8003e46:	b507      	push	{r0, r1, r2, lr}
 8003e48:	4906      	ldr	r1, [pc, #24]	@ (8003e64 <iprintf+0x20>)
 8003e4a:	ab04      	add	r3, sp, #16
 8003e4c:	6808      	ldr	r0, [r1, #0]
 8003e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e52:	6881      	ldr	r1, [r0, #8]
 8003e54:	9301      	str	r3, [sp, #4]
 8003e56:	f000 faef 	bl	8004438 <_vfiprintf_r>
 8003e5a:	b003      	add	sp, #12
 8003e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e60:	b004      	add	sp, #16
 8003e62:	4770      	bx	lr
 8003e64:	20000018 	.word	0x20000018

08003e68 <putchar>:
 8003e68:	4b02      	ldr	r3, [pc, #8]	@ (8003e74 <putchar+0xc>)
 8003e6a:	4601      	mov	r1, r0
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	6882      	ldr	r2, [r0, #8]
 8003e70:	f000 be93 	b.w	8004b9a <_putc_r>
 8003e74:	20000018 	.word	0x20000018

08003e78 <_puts_r>:
 8003e78:	6a03      	ldr	r3, [r0, #32]
 8003e7a:	b570      	push	{r4, r5, r6, lr}
 8003e7c:	4605      	mov	r5, r0
 8003e7e:	460e      	mov	r6, r1
 8003e80:	6884      	ldr	r4, [r0, #8]
 8003e82:	b90b      	cbnz	r3, 8003e88 <_puts_r+0x10>
 8003e84:	f7ff ffa8 	bl	8003dd8 <__sinit>
 8003e88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e8a:	07db      	lsls	r3, r3, #31
 8003e8c:	d405      	bmi.n	8003e9a <_puts_r+0x22>
 8003e8e:	89a3      	ldrh	r3, [r4, #12]
 8003e90:	0598      	lsls	r0, r3, #22
 8003e92:	d402      	bmi.n	8003e9a <_puts_r+0x22>
 8003e94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e96:	f000 f9ae 	bl	80041f6 <__retarget_lock_acquire_recursive>
 8003e9a:	89a3      	ldrh	r3, [r4, #12]
 8003e9c:	0719      	lsls	r1, r3, #28
 8003e9e:	d502      	bpl.n	8003ea6 <_puts_r+0x2e>
 8003ea0:	6923      	ldr	r3, [r4, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d135      	bne.n	8003f12 <_puts_r+0x9a>
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	f000 f8c5 	bl	8004038 <__swsetup_r>
 8003eae:	b380      	cbz	r0, 8003f12 <_puts_r+0x9a>
 8003eb0:	f04f 35ff 	mov.w	r5, #4294967295
 8003eb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003eb6:	07da      	lsls	r2, r3, #31
 8003eb8:	d405      	bmi.n	8003ec6 <_puts_r+0x4e>
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	059b      	lsls	r3, r3, #22
 8003ebe:	d402      	bmi.n	8003ec6 <_puts_r+0x4e>
 8003ec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ec2:	f000 f999 	bl	80041f8 <__retarget_lock_release_recursive>
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	bd70      	pop	{r4, r5, r6, pc}
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	da04      	bge.n	8003ed8 <_puts_r+0x60>
 8003ece:	69a2      	ldr	r2, [r4, #24]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	dc17      	bgt.n	8003f04 <_puts_r+0x8c>
 8003ed4:	290a      	cmp	r1, #10
 8003ed6:	d015      	beq.n	8003f04 <_puts_r+0x8c>
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	6022      	str	r2, [r4, #0]
 8003ede:	7019      	strb	r1, [r3, #0]
 8003ee0:	68a3      	ldr	r3, [r4, #8]
 8003ee2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	60a3      	str	r3, [r4, #8]
 8003eea:	2900      	cmp	r1, #0
 8003eec:	d1ed      	bne.n	8003eca <_puts_r+0x52>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	da11      	bge.n	8003f16 <_puts_r+0x9e>
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	210a      	movs	r1, #10
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f000 f85f 	bl	8003fba <__swbuf_r>
 8003efc:	3001      	adds	r0, #1
 8003efe:	d0d7      	beq.n	8003eb0 <_puts_r+0x38>
 8003f00:	250a      	movs	r5, #10
 8003f02:	e7d7      	b.n	8003eb4 <_puts_r+0x3c>
 8003f04:	4622      	mov	r2, r4
 8003f06:	4628      	mov	r0, r5
 8003f08:	f000 f857 	bl	8003fba <__swbuf_r>
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d1e7      	bne.n	8003ee0 <_puts_r+0x68>
 8003f10:	e7ce      	b.n	8003eb0 <_puts_r+0x38>
 8003f12:	3e01      	subs	r6, #1
 8003f14:	e7e4      	b.n	8003ee0 <_puts_r+0x68>
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	6022      	str	r2, [r4, #0]
 8003f1c:	220a      	movs	r2, #10
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	e7ee      	b.n	8003f00 <_puts_r+0x88>
	...

08003f24 <puts>:
 8003f24:	4b02      	ldr	r3, [pc, #8]	@ (8003f30 <puts+0xc>)
 8003f26:	4601      	mov	r1, r0
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	f7ff bfa5 	b.w	8003e78 <_puts_r>
 8003f2e:	bf00      	nop
 8003f30:	20000018 	.word	0x20000018

08003f34 <__sread>:
 8003f34:	b510      	push	{r4, lr}
 8003f36:	460c      	mov	r4, r1
 8003f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f3c:	f000 f90c 	bl	8004158 <_read_r>
 8003f40:	2800      	cmp	r0, #0
 8003f42:	bfab      	itete	ge
 8003f44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f46:	89a3      	ldrhlt	r3, [r4, #12]
 8003f48:	181b      	addge	r3, r3, r0
 8003f4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f4e:	bfac      	ite	ge
 8003f50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f52:	81a3      	strhlt	r3, [r4, #12]
 8003f54:	bd10      	pop	{r4, pc}

08003f56 <__swrite>:
 8003f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5a:	461f      	mov	r7, r3
 8003f5c:	898b      	ldrh	r3, [r1, #12]
 8003f5e:	4605      	mov	r5, r0
 8003f60:	05db      	lsls	r3, r3, #23
 8003f62:	460c      	mov	r4, r1
 8003f64:	4616      	mov	r6, r2
 8003f66:	d505      	bpl.n	8003f74 <__swrite+0x1e>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f70:	f000 f8e0 	bl	8004134 <_lseek_r>
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	4632      	mov	r2, r6
 8003f78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f7c:	81a3      	strh	r3, [r4, #12]
 8003f7e:	4628      	mov	r0, r5
 8003f80:	463b      	mov	r3, r7
 8003f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8a:	f000 b8f7 	b.w	800417c <_write_r>

08003f8e <__sseek>:
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	460c      	mov	r4, r1
 8003f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f96:	f000 f8cd 	bl	8004134 <_lseek_r>
 8003f9a:	1c43      	adds	r3, r0, #1
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	bf15      	itete	ne
 8003fa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003fa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003fa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003faa:	81a3      	strheq	r3, [r4, #12]
 8003fac:	bf18      	it	ne
 8003fae:	81a3      	strhne	r3, [r4, #12]
 8003fb0:	bd10      	pop	{r4, pc}

08003fb2 <__sclose>:
 8003fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb6:	f000 b8ad 	b.w	8004114 <_close_r>

08003fba <__swbuf_r>:
 8003fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbc:	460e      	mov	r6, r1
 8003fbe:	4614      	mov	r4, r2
 8003fc0:	4605      	mov	r5, r0
 8003fc2:	b118      	cbz	r0, 8003fcc <__swbuf_r+0x12>
 8003fc4:	6a03      	ldr	r3, [r0, #32]
 8003fc6:	b90b      	cbnz	r3, 8003fcc <__swbuf_r+0x12>
 8003fc8:	f7ff ff06 	bl	8003dd8 <__sinit>
 8003fcc:	69a3      	ldr	r3, [r4, #24]
 8003fce:	60a3      	str	r3, [r4, #8]
 8003fd0:	89a3      	ldrh	r3, [r4, #12]
 8003fd2:	071a      	lsls	r2, r3, #28
 8003fd4:	d501      	bpl.n	8003fda <__swbuf_r+0x20>
 8003fd6:	6923      	ldr	r3, [r4, #16]
 8003fd8:	b943      	cbnz	r3, 8003fec <__swbuf_r+0x32>
 8003fda:	4621      	mov	r1, r4
 8003fdc:	4628      	mov	r0, r5
 8003fde:	f000 f82b 	bl	8004038 <__swsetup_r>
 8003fe2:	b118      	cbz	r0, 8003fec <__swbuf_r+0x32>
 8003fe4:	f04f 37ff 	mov.w	r7, #4294967295
 8003fe8:	4638      	mov	r0, r7
 8003fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	6922      	ldr	r2, [r4, #16]
 8003ff0:	b2f6      	uxtb	r6, r6
 8003ff2:	1a98      	subs	r0, r3, r2
 8003ff4:	6963      	ldr	r3, [r4, #20]
 8003ff6:	4637      	mov	r7, r6
 8003ff8:	4283      	cmp	r3, r0
 8003ffa:	dc05      	bgt.n	8004008 <__swbuf_r+0x4e>
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	4628      	mov	r0, r5
 8004000:	f000 fd42 	bl	8004a88 <_fflush_r>
 8004004:	2800      	cmp	r0, #0
 8004006:	d1ed      	bne.n	8003fe4 <__swbuf_r+0x2a>
 8004008:	68a3      	ldr	r3, [r4, #8]
 800400a:	3b01      	subs	r3, #1
 800400c:	60a3      	str	r3, [r4, #8]
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	6022      	str	r2, [r4, #0]
 8004014:	701e      	strb	r6, [r3, #0]
 8004016:	6962      	ldr	r2, [r4, #20]
 8004018:	1c43      	adds	r3, r0, #1
 800401a:	429a      	cmp	r2, r3
 800401c:	d004      	beq.n	8004028 <__swbuf_r+0x6e>
 800401e:	89a3      	ldrh	r3, [r4, #12]
 8004020:	07db      	lsls	r3, r3, #31
 8004022:	d5e1      	bpl.n	8003fe8 <__swbuf_r+0x2e>
 8004024:	2e0a      	cmp	r6, #10
 8004026:	d1df      	bne.n	8003fe8 <__swbuf_r+0x2e>
 8004028:	4621      	mov	r1, r4
 800402a:	4628      	mov	r0, r5
 800402c:	f000 fd2c 	bl	8004a88 <_fflush_r>
 8004030:	2800      	cmp	r0, #0
 8004032:	d0d9      	beq.n	8003fe8 <__swbuf_r+0x2e>
 8004034:	e7d6      	b.n	8003fe4 <__swbuf_r+0x2a>
	...

08004038 <__swsetup_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	4b29      	ldr	r3, [pc, #164]	@ (80040e0 <__swsetup_r+0xa8>)
 800403c:	4605      	mov	r5, r0
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	460c      	mov	r4, r1
 8004042:	b118      	cbz	r0, 800404c <__swsetup_r+0x14>
 8004044:	6a03      	ldr	r3, [r0, #32]
 8004046:	b90b      	cbnz	r3, 800404c <__swsetup_r+0x14>
 8004048:	f7ff fec6 	bl	8003dd8 <__sinit>
 800404c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004050:	0719      	lsls	r1, r3, #28
 8004052:	d422      	bmi.n	800409a <__swsetup_r+0x62>
 8004054:	06da      	lsls	r2, r3, #27
 8004056:	d407      	bmi.n	8004068 <__swsetup_r+0x30>
 8004058:	2209      	movs	r2, #9
 800405a:	602a      	str	r2, [r5, #0]
 800405c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004060:	f04f 30ff 	mov.w	r0, #4294967295
 8004064:	81a3      	strh	r3, [r4, #12]
 8004066:	e033      	b.n	80040d0 <__swsetup_r+0x98>
 8004068:	0758      	lsls	r0, r3, #29
 800406a:	d512      	bpl.n	8004092 <__swsetup_r+0x5a>
 800406c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800406e:	b141      	cbz	r1, 8004082 <__swsetup_r+0x4a>
 8004070:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004074:	4299      	cmp	r1, r3
 8004076:	d002      	beq.n	800407e <__swsetup_r+0x46>
 8004078:	4628      	mov	r0, r5
 800407a:	f000 f8bf 	bl	80041fc <_free_r>
 800407e:	2300      	movs	r3, #0
 8004080:	6363      	str	r3, [r4, #52]	@ 0x34
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004088:	81a3      	strh	r3, [r4, #12]
 800408a:	2300      	movs	r3, #0
 800408c:	6063      	str	r3, [r4, #4]
 800408e:	6923      	ldr	r3, [r4, #16]
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	89a3      	ldrh	r3, [r4, #12]
 8004094:	f043 0308 	orr.w	r3, r3, #8
 8004098:	81a3      	strh	r3, [r4, #12]
 800409a:	6923      	ldr	r3, [r4, #16]
 800409c:	b94b      	cbnz	r3, 80040b2 <__swsetup_r+0x7a>
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80040a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040a8:	d003      	beq.n	80040b2 <__swsetup_r+0x7a>
 80040aa:	4621      	mov	r1, r4
 80040ac:	4628      	mov	r0, r5
 80040ae:	f000 fd38 	bl	8004b22 <__smakebuf_r>
 80040b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b6:	f013 0201 	ands.w	r2, r3, #1
 80040ba:	d00a      	beq.n	80040d2 <__swsetup_r+0x9a>
 80040bc:	2200      	movs	r2, #0
 80040be:	60a2      	str	r2, [r4, #8]
 80040c0:	6962      	ldr	r2, [r4, #20]
 80040c2:	4252      	negs	r2, r2
 80040c4:	61a2      	str	r2, [r4, #24]
 80040c6:	6922      	ldr	r2, [r4, #16]
 80040c8:	b942      	cbnz	r2, 80040dc <__swsetup_r+0xa4>
 80040ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80040ce:	d1c5      	bne.n	800405c <__swsetup_r+0x24>
 80040d0:	bd38      	pop	{r3, r4, r5, pc}
 80040d2:	0799      	lsls	r1, r3, #30
 80040d4:	bf58      	it	pl
 80040d6:	6962      	ldrpl	r2, [r4, #20]
 80040d8:	60a2      	str	r2, [r4, #8]
 80040da:	e7f4      	b.n	80040c6 <__swsetup_r+0x8e>
 80040dc:	2000      	movs	r0, #0
 80040de:	e7f7      	b.n	80040d0 <__swsetup_r+0x98>
 80040e0:	20000018 	.word	0x20000018

080040e4 <memcmp>:
 80040e4:	b510      	push	{r4, lr}
 80040e6:	3901      	subs	r1, #1
 80040e8:	4402      	add	r2, r0
 80040ea:	4290      	cmp	r0, r2
 80040ec:	d101      	bne.n	80040f2 <memcmp+0xe>
 80040ee:	2000      	movs	r0, #0
 80040f0:	e005      	b.n	80040fe <memcmp+0x1a>
 80040f2:	7803      	ldrb	r3, [r0, #0]
 80040f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80040f8:	42a3      	cmp	r3, r4
 80040fa:	d001      	beq.n	8004100 <memcmp+0x1c>
 80040fc:	1b18      	subs	r0, r3, r4
 80040fe:	bd10      	pop	{r4, pc}
 8004100:	3001      	adds	r0, #1
 8004102:	e7f2      	b.n	80040ea <memcmp+0x6>

08004104 <memset>:
 8004104:	4603      	mov	r3, r0
 8004106:	4402      	add	r2, r0
 8004108:	4293      	cmp	r3, r2
 800410a:	d100      	bne.n	800410e <memset+0xa>
 800410c:	4770      	bx	lr
 800410e:	f803 1b01 	strb.w	r1, [r3], #1
 8004112:	e7f9      	b.n	8004108 <memset+0x4>

08004114 <_close_r>:
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	2300      	movs	r3, #0
 8004118:	4d05      	ldr	r5, [pc, #20]	@ (8004130 <_close_r+0x1c>)
 800411a:	4604      	mov	r4, r0
 800411c:	4608      	mov	r0, r1
 800411e:	602b      	str	r3, [r5, #0]
 8004120:	f7fc fecd 	bl	8000ebe <_close>
 8004124:	1c43      	adds	r3, r0, #1
 8004126:	d102      	bne.n	800412e <_close_r+0x1a>
 8004128:	682b      	ldr	r3, [r5, #0]
 800412a:	b103      	cbz	r3, 800412e <_close_r+0x1a>
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	bd38      	pop	{r3, r4, r5, pc}
 8004130:	20000268 	.word	0x20000268

08004134 <_lseek_r>:
 8004134:	b538      	push	{r3, r4, r5, lr}
 8004136:	4604      	mov	r4, r0
 8004138:	4608      	mov	r0, r1
 800413a:	4611      	mov	r1, r2
 800413c:	2200      	movs	r2, #0
 800413e:	4d05      	ldr	r5, [pc, #20]	@ (8004154 <_lseek_r+0x20>)
 8004140:	602a      	str	r2, [r5, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	f7fc fedf 	bl	8000f06 <_lseek>
 8004148:	1c43      	adds	r3, r0, #1
 800414a:	d102      	bne.n	8004152 <_lseek_r+0x1e>
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	b103      	cbz	r3, 8004152 <_lseek_r+0x1e>
 8004150:	6023      	str	r3, [r4, #0]
 8004152:	bd38      	pop	{r3, r4, r5, pc}
 8004154:	20000268 	.word	0x20000268

08004158 <_read_r>:
 8004158:	b538      	push	{r3, r4, r5, lr}
 800415a:	4604      	mov	r4, r0
 800415c:	4608      	mov	r0, r1
 800415e:	4611      	mov	r1, r2
 8004160:	2200      	movs	r2, #0
 8004162:	4d05      	ldr	r5, [pc, #20]	@ (8004178 <_read_r+0x20>)
 8004164:	602a      	str	r2, [r5, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	f7fc fe70 	bl	8000e4c <_read>
 800416c:	1c43      	adds	r3, r0, #1
 800416e:	d102      	bne.n	8004176 <_read_r+0x1e>
 8004170:	682b      	ldr	r3, [r5, #0]
 8004172:	b103      	cbz	r3, 8004176 <_read_r+0x1e>
 8004174:	6023      	str	r3, [r4, #0]
 8004176:	bd38      	pop	{r3, r4, r5, pc}
 8004178:	20000268 	.word	0x20000268

0800417c <_write_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4604      	mov	r4, r0
 8004180:	4608      	mov	r0, r1
 8004182:	4611      	mov	r1, r2
 8004184:	2200      	movs	r2, #0
 8004186:	4d05      	ldr	r5, [pc, #20]	@ (800419c <_write_r+0x20>)
 8004188:	602a      	str	r2, [r5, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	f7fc fe7b 	bl	8000e86 <_write>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d102      	bne.n	800419a <_write_r+0x1e>
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	b103      	cbz	r3, 800419a <_write_r+0x1e>
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	bd38      	pop	{r3, r4, r5, pc}
 800419c:	20000268 	.word	0x20000268

080041a0 <__errno>:
 80041a0:	4b01      	ldr	r3, [pc, #4]	@ (80041a8 <__errno+0x8>)
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20000018 	.word	0x20000018

080041ac <__libc_init_array>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	2600      	movs	r6, #0
 80041b0:	4d0c      	ldr	r5, [pc, #48]	@ (80041e4 <__libc_init_array+0x38>)
 80041b2:	4c0d      	ldr	r4, [pc, #52]	@ (80041e8 <__libc_init_array+0x3c>)
 80041b4:	1b64      	subs	r4, r4, r5
 80041b6:	10a4      	asrs	r4, r4, #2
 80041b8:	42a6      	cmp	r6, r4
 80041ba:	d109      	bne.n	80041d0 <__libc_init_array+0x24>
 80041bc:	f000 fd62 	bl	8004c84 <_init>
 80041c0:	2600      	movs	r6, #0
 80041c2:	4d0a      	ldr	r5, [pc, #40]	@ (80041ec <__libc_init_array+0x40>)
 80041c4:	4c0a      	ldr	r4, [pc, #40]	@ (80041f0 <__libc_init_array+0x44>)
 80041c6:	1b64      	subs	r4, r4, r5
 80041c8:	10a4      	asrs	r4, r4, #2
 80041ca:	42a6      	cmp	r6, r4
 80041cc:	d105      	bne.n	80041da <__libc_init_array+0x2e>
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
 80041d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d4:	4798      	blx	r3
 80041d6:	3601      	adds	r6, #1
 80041d8:	e7ee      	b.n	80041b8 <__libc_init_array+0xc>
 80041da:	f855 3b04 	ldr.w	r3, [r5], #4
 80041de:	4798      	blx	r3
 80041e0:	3601      	adds	r6, #1
 80041e2:	e7f2      	b.n	80041ca <__libc_init_array+0x1e>
 80041e4:	080056f4 	.word	0x080056f4
 80041e8:	080056f4 	.word	0x080056f4
 80041ec:	080056f4 	.word	0x080056f4
 80041f0:	080056f8 	.word	0x080056f8

080041f4 <__retarget_lock_init_recursive>:
 80041f4:	4770      	bx	lr

080041f6 <__retarget_lock_acquire_recursive>:
 80041f6:	4770      	bx	lr

080041f8 <__retarget_lock_release_recursive>:
 80041f8:	4770      	bx	lr
	...

080041fc <_free_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	4605      	mov	r5, r0
 8004200:	2900      	cmp	r1, #0
 8004202:	d040      	beq.n	8004286 <_free_r+0x8a>
 8004204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004208:	1f0c      	subs	r4, r1, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	bfb8      	it	lt
 800420e:	18e4      	addlt	r4, r4, r3
 8004210:	f000 f8de 	bl	80043d0 <__malloc_lock>
 8004214:	4a1c      	ldr	r2, [pc, #112]	@ (8004288 <_free_r+0x8c>)
 8004216:	6813      	ldr	r3, [r2, #0]
 8004218:	b933      	cbnz	r3, 8004228 <_free_r+0x2c>
 800421a:	6063      	str	r3, [r4, #4]
 800421c:	6014      	str	r4, [r2, #0]
 800421e:	4628      	mov	r0, r5
 8004220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004224:	f000 b8da 	b.w	80043dc <__malloc_unlock>
 8004228:	42a3      	cmp	r3, r4
 800422a:	d908      	bls.n	800423e <_free_r+0x42>
 800422c:	6820      	ldr	r0, [r4, #0]
 800422e:	1821      	adds	r1, r4, r0
 8004230:	428b      	cmp	r3, r1
 8004232:	bf01      	itttt	eq
 8004234:	6819      	ldreq	r1, [r3, #0]
 8004236:	685b      	ldreq	r3, [r3, #4]
 8004238:	1809      	addeq	r1, r1, r0
 800423a:	6021      	streq	r1, [r4, #0]
 800423c:	e7ed      	b.n	800421a <_free_r+0x1e>
 800423e:	461a      	mov	r2, r3
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	b10b      	cbz	r3, 8004248 <_free_r+0x4c>
 8004244:	42a3      	cmp	r3, r4
 8004246:	d9fa      	bls.n	800423e <_free_r+0x42>
 8004248:	6811      	ldr	r1, [r2, #0]
 800424a:	1850      	adds	r0, r2, r1
 800424c:	42a0      	cmp	r0, r4
 800424e:	d10b      	bne.n	8004268 <_free_r+0x6c>
 8004250:	6820      	ldr	r0, [r4, #0]
 8004252:	4401      	add	r1, r0
 8004254:	1850      	adds	r0, r2, r1
 8004256:	4283      	cmp	r3, r0
 8004258:	6011      	str	r1, [r2, #0]
 800425a:	d1e0      	bne.n	800421e <_free_r+0x22>
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4408      	add	r0, r1
 8004262:	6010      	str	r0, [r2, #0]
 8004264:	6053      	str	r3, [r2, #4]
 8004266:	e7da      	b.n	800421e <_free_r+0x22>
 8004268:	d902      	bls.n	8004270 <_free_r+0x74>
 800426a:	230c      	movs	r3, #12
 800426c:	602b      	str	r3, [r5, #0]
 800426e:	e7d6      	b.n	800421e <_free_r+0x22>
 8004270:	6820      	ldr	r0, [r4, #0]
 8004272:	1821      	adds	r1, r4, r0
 8004274:	428b      	cmp	r3, r1
 8004276:	bf01      	itttt	eq
 8004278:	6819      	ldreq	r1, [r3, #0]
 800427a:	685b      	ldreq	r3, [r3, #4]
 800427c:	1809      	addeq	r1, r1, r0
 800427e:	6021      	streq	r1, [r4, #0]
 8004280:	6063      	str	r3, [r4, #4]
 8004282:	6054      	str	r4, [r2, #4]
 8004284:	e7cb      	b.n	800421e <_free_r+0x22>
 8004286:	bd38      	pop	{r3, r4, r5, pc}
 8004288:	20000274 	.word	0x20000274

0800428c <sbrk_aligned>:
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	4e0f      	ldr	r6, [pc, #60]	@ (80042cc <sbrk_aligned+0x40>)
 8004290:	460c      	mov	r4, r1
 8004292:	6831      	ldr	r1, [r6, #0]
 8004294:	4605      	mov	r5, r0
 8004296:	b911      	cbnz	r1, 800429e <sbrk_aligned+0x12>
 8004298:	f000 fcd6 	bl	8004c48 <_sbrk_r>
 800429c:	6030      	str	r0, [r6, #0]
 800429e:	4621      	mov	r1, r4
 80042a0:	4628      	mov	r0, r5
 80042a2:	f000 fcd1 	bl	8004c48 <_sbrk_r>
 80042a6:	1c43      	adds	r3, r0, #1
 80042a8:	d103      	bne.n	80042b2 <sbrk_aligned+0x26>
 80042aa:	f04f 34ff 	mov.w	r4, #4294967295
 80042ae:	4620      	mov	r0, r4
 80042b0:	bd70      	pop	{r4, r5, r6, pc}
 80042b2:	1cc4      	adds	r4, r0, #3
 80042b4:	f024 0403 	bic.w	r4, r4, #3
 80042b8:	42a0      	cmp	r0, r4
 80042ba:	d0f8      	beq.n	80042ae <sbrk_aligned+0x22>
 80042bc:	1a21      	subs	r1, r4, r0
 80042be:	4628      	mov	r0, r5
 80042c0:	f000 fcc2 	bl	8004c48 <_sbrk_r>
 80042c4:	3001      	adds	r0, #1
 80042c6:	d1f2      	bne.n	80042ae <sbrk_aligned+0x22>
 80042c8:	e7ef      	b.n	80042aa <sbrk_aligned+0x1e>
 80042ca:	bf00      	nop
 80042cc:	20000270 	.word	0x20000270

080042d0 <_malloc_r>:
 80042d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042d4:	1ccd      	adds	r5, r1, #3
 80042d6:	f025 0503 	bic.w	r5, r5, #3
 80042da:	3508      	adds	r5, #8
 80042dc:	2d0c      	cmp	r5, #12
 80042de:	bf38      	it	cc
 80042e0:	250c      	movcc	r5, #12
 80042e2:	2d00      	cmp	r5, #0
 80042e4:	4606      	mov	r6, r0
 80042e6:	db01      	blt.n	80042ec <_malloc_r+0x1c>
 80042e8:	42a9      	cmp	r1, r5
 80042ea:	d904      	bls.n	80042f6 <_malloc_r+0x26>
 80042ec:	230c      	movs	r3, #12
 80042ee:	6033      	str	r3, [r6, #0]
 80042f0:	2000      	movs	r0, #0
 80042f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043cc <_malloc_r+0xfc>
 80042fa:	f000 f869 	bl	80043d0 <__malloc_lock>
 80042fe:	f8d8 3000 	ldr.w	r3, [r8]
 8004302:	461c      	mov	r4, r3
 8004304:	bb44      	cbnz	r4, 8004358 <_malloc_r+0x88>
 8004306:	4629      	mov	r1, r5
 8004308:	4630      	mov	r0, r6
 800430a:	f7ff ffbf 	bl	800428c <sbrk_aligned>
 800430e:	1c43      	adds	r3, r0, #1
 8004310:	4604      	mov	r4, r0
 8004312:	d158      	bne.n	80043c6 <_malloc_r+0xf6>
 8004314:	f8d8 4000 	ldr.w	r4, [r8]
 8004318:	4627      	mov	r7, r4
 800431a:	2f00      	cmp	r7, #0
 800431c:	d143      	bne.n	80043a6 <_malloc_r+0xd6>
 800431e:	2c00      	cmp	r4, #0
 8004320:	d04b      	beq.n	80043ba <_malloc_r+0xea>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	4639      	mov	r1, r7
 8004326:	4630      	mov	r0, r6
 8004328:	eb04 0903 	add.w	r9, r4, r3
 800432c:	f000 fc8c 	bl	8004c48 <_sbrk_r>
 8004330:	4581      	cmp	r9, r0
 8004332:	d142      	bne.n	80043ba <_malloc_r+0xea>
 8004334:	6821      	ldr	r1, [r4, #0]
 8004336:	4630      	mov	r0, r6
 8004338:	1a6d      	subs	r5, r5, r1
 800433a:	4629      	mov	r1, r5
 800433c:	f7ff ffa6 	bl	800428c <sbrk_aligned>
 8004340:	3001      	adds	r0, #1
 8004342:	d03a      	beq.n	80043ba <_malloc_r+0xea>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	442b      	add	r3, r5
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	f8d8 3000 	ldr.w	r3, [r8]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	bb62      	cbnz	r2, 80043ac <_malloc_r+0xdc>
 8004352:	f8c8 7000 	str.w	r7, [r8]
 8004356:	e00f      	b.n	8004378 <_malloc_r+0xa8>
 8004358:	6822      	ldr	r2, [r4, #0]
 800435a:	1b52      	subs	r2, r2, r5
 800435c:	d420      	bmi.n	80043a0 <_malloc_r+0xd0>
 800435e:	2a0b      	cmp	r2, #11
 8004360:	d917      	bls.n	8004392 <_malloc_r+0xc2>
 8004362:	1961      	adds	r1, r4, r5
 8004364:	42a3      	cmp	r3, r4
 8004366:	6025      	str	r5, [r4, #0]
 8004368:	bf18      	it	ne
 800436a:	6059      	strne	r1, [r3, #4]
 800436c:	6863      	ldr	r3, [r4, #4]
 800436e:	bf08      	it	eq
 8004370:	f8c8 1000 	streq.w	r1, [r8]
 8004374:	5162      	str	r2, [r4, r5]
 8004376:	604b      	str	r3, [r1, #4]
 8004378:	4630      	mov	r0, r6
 800437a:	f000 f82f 	bl	80043dc <__malloc_unlock>
 800437e:	f104 000b 	add.w	r0, r4, #11
 8004382:	1d23      	adds	r3, r4, #4
 8004384:	f020 0007 	bic.w	r0, r0, #7
 8004388:	1ac2      	subs	r2, r0, r3
 800438a:	bf1c      	itt	ne
 800438c:	1a1b      	subne	r3, r3, r0
 800438e:	50a3      	strne	r3, [r4, r2]
 8004390:	e7af      	b.n	80042f2 <_malloc_r+0x22>
 8004392:	6862      	ldr	r2, [r4, #4]
 8004394:	42a3      	cmp	r3, r4
 8004396:	bf0c      	ite	eq
 8004398:	f8c8 2000 	streq.w	r2, [r8]
 800439c:	605a      	strne	r2, [r3, #4]
 800439e:	e7eb      	b.n	8004378 <_malloc_r+0xa8>
 80043a0:	4623      	mov	r3, r4
 80043a2:	6864      	ldr	r4, [r4, #4]
 80043a4:	e7ae      	b.n	8004304 <_malloc_r+0x34>
 80043a6:	463c      	mov	r4, r7
 80043a8:	687f      	ldr	r7, [r7, #4]
 80043aa:	e7b6      	b.n	800431a <_malloc_r+0x4a>
 80043ac:	461a      	mov	r2, r3
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	42a3      	cmp	r3, r4
 80043b2:	d1fb      	bne.n	80043ac <_malloc_r+0xdc>
 80043b4:	2300      	movs	r3, #0
 80043b6:	6053      	str	r3, [r2, #4]
 80043b8:	e7de      	b.n	8004378 <_malloc_r+0xa8>
 80043ba:	230c      	movs	r3, #12
 80043bc:	4630      	mov	r0, r6
 80043be:	6033      	str	r3, [r6, #0]
 80043c0:	f000 f80c 	bl	80043dc <__malloc_unlock>
 80043c4:	e794      	b.n	80042f0 <_malloc_r+0x20>
 80043c6:	6005      	str	r5, [r0, #0]
 80043c8:	e7d6      	b.n	8004378 <_malloc_r+0xa8>
 80043ca:	bf00      	nop
 80043cc:	20000274 	.word	0x20000274

080043d0 <__malloc_lock>:
 80043d0:	4801      	ldr	r0, [pc, #4]	@ (80043d8 <__malloc_lock+0x8>)
 80043d2:	f7ff bf10 	b.w	80041f6 <__retarget_lock_acquire_recursive>
 80043d6:	bf00      	nop
 80043d8:	2000026c 	.word	0x2000026c

080043dc <__malloc_unlock>:
 80043dc:	4801      	ldr	r0, [pc, #4]	@ (80043e4 <__malloc_unlock+0x8>)
 80043de:	f7ff bf0b 	b.w	80041f8 <__retarget_lock_release_recursive>
 80043e2:	bf00      	nop
 80043e4:	2000026c 	.word	0x2000026c

080043e8 <__sfputc_r>:
 80043e8:	6893      	ldr	r3, [r2, #8]
 80043ea:	b410      	push	{r4}
 80043ec:	3b01      	subs	r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	6093      	str	r3, [r2, #8]
 80043f2:	da07      	bge.n	8004404 <__sfputc_r+0x1c>
 80043f4:	6994      	ldr	r4, [r2, #24]
 80043f6:	42a3      	cmp	r3, r4
 80043f8:	db01      	blt.n	80043fe <__sfputc_r+0x16>
 80043fa:	290a      	cmp	r1, #10
 80043fc:	d102      	bne.n	8004404 <__sfputc_r+0x1c>
 80043fe:	bc10      	pop	{r4}
 8004400:	f7ff bddb 	b.w	8003fba <__swbuf_r>
 8004404:	6813      	ldr	r3, [r2, #0]
 8004406:	1c58      	adds	r0, r3, #1
 8004408:	6010      	str	r0, [r2, #0]
 800440a:	7019      	strb	r1, [r3, #0]
 800440c:	4608      	mov	r0, r1
 800440e:	bc10      	pop	{r4}
 8004410:	4770      	bx	lr

08004412 <__sfputs_r>:
 8004412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004414:	4606      	mov	r6, r0
 8004416:	460f      	mov	r7, r1
 8004418:	4614      	mov	r4, r2
 800441a:	18d5      	adds	r5, r2, r3
 800441c:	42ac      	cmp	r4, r5
 800441e:	d101      	bne.n	8004424 <__sfputs_r+0x12>
 8004420:	2000      	movs	r0, #0
 8004422:	e007      	b.n	8004434 <__sfputs_r+0x22>
 8004424:	463a      	mov	r2, r7
 8004426:	4630      	mov	r0, r6
 8004428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800442c:	f7ff ffdc 	bl	80043e8 <__sfputc_r>
 8004430:	1c43      	adds	r3, r0, #1
 8004432:	d1f3      	bne.n	800441c <__sfputs_r+0xa>
 8004434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004438 <_vfiprintf_r>:
 8004438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443c:	460d      	mov	r5, r1
 800443e:	4614      	mov	r4, r2
 8004440:	4698      	mov	r8, r3
 8004442:	4606      	mov	r6, r0
 8004444:	b09d      	sub	sp, #116	@ 0x74
 8004446:	b118      	cbz	r0, 8004450 <_vfiprintf_r+0x18>
 8004448:	6a03      	ldr	r3, [r0, #32]
 800444a:	b90b      	cbnz	r3, 8004450 <_vfiprintf_r+0x18>
 800444c:	f7ff fcc4 	bl	8003dd8 <__sinit>
 8004450:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004452:	07d9      	lsls	r1, r3, #31
 8004454:	d405      	bmi.n	8004462 <_vfiprintf_r+0x2a>
 8004456:	89ab      	ldrh	r3, [r5, #12]
 8004458:	059a      	lsls	r2, r3, #22
 800445a:	d402      	bmi.n	8004462 <_vfiprintf_r+0x2a>
 800445c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800445e:	f7ff feca 	bl	80041f6 <__retarget_lock_acquire_recursive>
 8004462:	89ab      	ldrh	r3, [r5, #12]
 8004464:	071b      	lsls	r3, r3, #28
 8004466:	d501      	bpl.n	800446c <_vfiprintf_r+0x34>
 8004468:	692b      	ldr	r3, [r5, #16]
 800446a:	b99b      	cbnz	r3, 8004494 <_vfiprintf_r+0x5c>
 800446c:	4629      	mov	r1, r5
 800446e:	4630      	mov	r0, r6
 8004470:	f7ff fde2 	bl	8004038 <__swsetup_r>
 8004474:	b170      	cbz	r0, 8004494 <_vfiprintf_r+0x5c>
 8004476:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004478:	07dc      	lsls	r4, r3, #31
 800447a:	d504      	bpl.n	8004486 <_vfiprintf_r+0x4e>
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	b01d      	add	sp, #116	@ 0x74
 8004482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004486:	89ab      	ldrh	r3, [r5, #12]
 8004488:	0598      	lsls	r0, r3, #22
 800448a:	d4f7      	bmi.n	800447c <_vfiprintf_r+0x44>
 800448c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800448e:	f7ff feb3 	bl	80041f8 <__retarget_lock_release_recursive>
 8004492:	e7f3      	b.n	800447c <_vfiprintf_r+0x44>
 8004494:	2300      	movs	r3, #0
 8004496:	9309      	str	r3, [sp, #36]	@ 0x24
 8004498:	2320      	movs	r3, #32
 800449a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800449e:	2330      	movs	r3, #48	@ 0x30
 80044a0:	f04f 0901 	mov.w	r9, #1
 80044a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80044a8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004654 <_vfiprintf_r+0x21c>
 80044ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044b0:	4623      	mov	r3, r4
 80044b2:	469a      	mov	sl, r3
 80044b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044b8:	b10a      	cbz	r2, 80044be <_vfiprintf_r+0x86>
 80044ba:	2a25      	cmp	r2, #37	@ 0x25
 80044bc:	d1f9      	bne.n	80044b2 <_vfiprintf_r+0x7a>
 80044be:	ebba 0b04 	subs.w	fp, sl, r4
 80044c2:	d00b      	beq.n	80044dc <_vfiprintf_r+0xa4>
 80044c4:	465b      	mov	r3, fp
 80044c6:	4622      	mov	r2, r4
 80044c8:	4629      	mov	r1, r5
 80044ca:	4630      	mov	r0, r6
 80044cc:	f7ff ffa1 	bl	8004412 <__sfputs_r>
 80044d0:	3001      	adds	r0, #1
 80044d2:	f000 80a7 	beq.w	8004624 <_vfiprintf_r+0x1ec>
 80044d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044d8:	445a      	add	r2, fp
 80044da:	9209      	str	r2, [sp, #36]	@ 0x24
 80044dc:	f89a 3000 	ldrb.w	r3, [sl]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 809f 	beq.w	8004624 <_vfiprintf_r+0x1ec>
 80044e6:	2300      	movs	r3, #0
 80044e8:	f04f 32ff 	mov.w	r2, #4294967295
 80044ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044f0:	f10a 0a01 	add.w	sl, sl, #1
 80044f4:	9304      	str	r3, [sp, #16]
 80044f6:	9307      	str	r3, [sp, #28]
 80044f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80044fe:	4654      	mov	r4, sl
 8004500:	2205      	movs	r2, #5
 8004502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004506:	4853      	ldr	r0, [pc, #332]	@ (8004654 <_vfiprintf_r+0x21c>)
 8004508:	f000 fbae 	bl	8004c68 <memchr>
 800450c:	9a04      	ldr	r2, [sp, #16]
 800450e:	b9d8      	cbnz	r0, 8004548 <_vfiprintf_r+0x110>
 8004510:	06d1      	lsls	r1, r2, #27
 8004512:	bf44      	itt	mi
 8004514:	2320      	movmi	r3, #32
 8004516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800451a:	0713      	lsls	r3, r2, #28
 800451c:	bf44      	itt	mi
 800451e:	232b      	movmi	r3, #43	@ 0x2b
 8004520:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004524:	f89a 3000 	ldrb.w	r3, [sl]
 8004528:	2b2a      	cmp	r3, #42	@ 0x2a
 800452a:	d015      	beq.n	8004558 <_vfiprintf_r+0x120>
 800452c:	4654      	mov	r4, sl
 800452e:	2000      	movs	r0, #0
 8004530:	f04f 0c0a 	mov.w	ip, #10
 8004534:	9a07      	ldr	r2, [sp, #28]
 8004536:	4621      	mov	r1, r4
 8004538:	f811 3b01 	ldrb.w	r3, [r1], #1
 800453c:	3b30      	subs	r3, #48	@ 0x30
 800453e:	2b09      	cmp	r3, #9
 8004540:	d94b      	bls.n	80045da <_vfiprintf_r+0x1a2>
 8004542:	b1b0      	cbz	r0, 8004572 <_vfiprintf_r+0x13a>
 8004544:	9207      	str	r2, [sp, #28]
 8004546:	e014      	b.n	8004572 <_vfiprintf_r+0x13a>
 8004548:	eba0 0308 	sub.w	r3, r0, r8
 800454c:	fa09 f303 	lsl.w	r3, r9, r3
 8004550:	4313      	orrs	r3, r2
 8004552:	46a2      	mov	sl, r4
 8004554:	9304      	str	r3, [sp, #16]
 8004556:	e7d2      	b.n	80044fe <_vfiprintf_r+0xc6>
 8004558:	9b03      	ldr	r3, [sp, #12]
 800455a:	1d19      	adds	r1, r3, #4
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	9103      	str	r1, [sp, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	bfbb      	ittet	lt
 8004564:	425b      	neglt	r3, r3
 8004566:	f042 0202 	orrlt.w	r2, r2, #2
 800456a:	9307      	strge	r3, [sp, #28]
 800456c:	9307      	strlt	r3, [sp, #28]
 800456e:	bfb8      	it	lt
 8004570:	9204      	strlt	r2, [sp, #16]
 8004572:	7823      	ldrb	r3, [r4, #0]
 8004574:	2b2e      	cmp	r3, #46	@ 0x2e
 8004576:	d10a      	bne.n	800458e <_vfiprintf_r+0x156>
 8004578:	7863      	ldrb	r3, [r4, #1]
 800457a:	2b2a      	cmp	r3, #42	@ 0x2a
 800457c:	d132      	bne.n	80045e4 <_vfiprintf_r+0x1ac>
 800457e:	9b03      	ldr	r3, [sp, #12]
 8004580:	3402      	adds	r4, #2
 8004582:	1d1a      	adds	r2, r3, #4
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	9203      	str	r2, [sp, #12]
 8004588:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800458c:	9305      	str	r3, [sp, #20]
 800458e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004658 <_vfiprintf_r+0x220>
 8004592:	2203      	movs	r2, #3
 8004594:	4650      	mov	r0, sl
 8004596:	7821      	ldrb	r1, [r4, #0]
 8004598:	f000 fb66 	bl	8004c68 <memchr>
 800459c:	b138      	cbz	r0, 80045ae <_vfiprintf_r+0x176>
 800459e:	2240      	movs	r2, #64	@ 0x40
 80045a0:	9b04      	ldr	r3, [sp, #16]
 80045a2:	eba0 000a 	sub.w	r0, r0, sl
 80045a6:	4082      	lsls	r2, r0
 80045a8:	4313      	orrs	r3, r2
 80045aa:	3401      	adds	r4, #1
 80045ac:	9304      	str	r3, [sp, #16]
 80045ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045b2:	2206      	movs	r2, #6
 80045b4:	4829      	ldr	r0, [pc, #164]	@ (800465c <_vfiprintf_r+0x224>)
 80045b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045ba:	f000 fb55 	bl	8004c68 <memchr>
 80045be:	2800      	cmp	r0, #0
 80045c0:	d03f      	beq.n	8004642 <_vfiprintf_r+0x20a>
 80045c2:	4b27      	ldr	r3, [pc, #156]	@ (8004660 <_vfiprintf_r+0x228>)
 80045c4:	bb1b      	cbnz	r3, 800460e <_vfiprintf_r+0x1d6>
 80045c6:	9b03      	ldr	r3, [sp, #12]
 80045c8:	3307      	adds	r3, #7
 80045ca:	f023 0307 	bic.w	r3, r3, #7
 80045ce:	3308      	adds	r3, #8
 80045d0:	9303      	str	r3, [sp, #12]
 80045d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045d4:	443b      	add	r3, r7
 80045d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80045d8:	e76a      	b.n	80044b0 <_vfiprintf_r+0x78>
 80045da:	460c      	mov	r4, r1
 80045dc:	2001      	movs	r0, #1
 80045de:	fb0c 3202 	mla	r2, ip, r2, r3
 80045e2:	e7a8      	b.n	8004536 <_vfiprintf_r+0xfe>
 80045e4:	2300      	movs	r3, #0
 80045e6:	f04f 0c0a 	mov.w	ip, #10
 80045ea:	4619      	mov	r1, r3
 80045ec:	3401      	adds	r4, #1
 80045ee:	9305      	str	r3, [sp, #20]
 80045f0:	4620      	mov	r0, r4
 80045f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045f6:	3a30      	subs	r2, #48	@ 0x30
 80045f8:	2a09      	cmp	r2, #9
 80045fa:	d903      	bls.n	8004604 <_vfiprintf_r+0x1cc>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0c6      	beq.n	800458e <_vfiprintf_r+0x156>
 8004600:	9105      	str	r1, [sp, #20]
 8004602:	e7c4      	b.n	800458e <_vfiprintf_r+0x156>
 8004604:	4604      	mov	r4, r0
 8004606:	2301      	movs	r3, #1
 8004608:	fb0c 2101 	mla	r1, ip, r1, r2
 800460c:	e7f0      	b.n	80045f0 <_vfiprintf_r+0x1b8>
 800460e:	ab03      	add	r3, sp, #12
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	462a      	mov	r2, r5
 8004614:	4630      	mov	r0, r6
 8004616:	4b13      	ldr	r3, [pc, #76]	@ (8004664 <_vfiprintf_r+0x22c>)
 8004618:	a904      	add	r1, sp, #16
 800461a:	f3af 8000 	nop.w
 800461e:	4607      	mov	r7, r0
 8004620:	1c78      	adds	r0, r7, #1
 8004622:	d1d6      	bne.n	80045d2 <_vfiprintf_r+0x19a>
 8004624:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004626:	07d9      	lsls	r1, r3, #31
 8004628:	d405      	bmi.n	8004636 <_vfiprintf_r+0x1fe>
 800462a:	89ab      	ldrh	r3, [r5, #12]
 800462c:	059a      	lsls	r2, r3, #22
 800462e:	d402      	bmi.n	8004636 <_vfiprintf_r+0x1fe>
 8004630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004632:	f7ff fde1 	bl	80041f8 <__retarget_lock_release_recursive>
 8004636:	89ab      	ldrh	r3, [r5, #12]
 8004638:	065b      	lsls	r3, r3, #25
 800463a:	f53f af1f 	bmi.w	800447c <_vfiprintf_r+0x44>
 800463e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004640:	e71e      	b.n	8004480 <_vfiprintf_r+0x48>
 8004642:	ab03      	add	r3, sp, #12
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	462a      	mov	r2, r5
 8004648:	4630      	mov	r0, r6
 800464a:	4b06      	ldr	r3, [pc, #24]	@ (8004664 <_vfiprintf_r+0x22c>)
 800464c:	a904      	add	r1, sp, #16
 800464e:	f000 f87d 	bl	800474c <_printf_i>
 8004652:	e7e4      	b.n	800461e <_vfiprintf_r+0x1e6>
 8004654:	080056b6 	.word	0x080056b6
 8004658:	080056bc 	.word	0x080056bc
 800465c:	080056c0 	.word	0x080056c0
 8004660:	00000000 	.word	0x00000000
 8004664:	08004413 	.word	0x08004413

08004668 <_printf_common>:
 8004668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800466c:	4616      	mov	r6, r2
 800466e:	4698      	mov	r8, r3
 8004670:	688a      	ldr	r2, [r1, #8]
 8004672:	690b      	ldr	r3, [r1, #16]
 8004674:	4607      	mov	r7, r0
 8004676:	4293      	cmp	r3, r2
 8004678:	bfb8      	it	lt
 800467a:	4613      	movlt	r3, r2
 800467c:	6033      	str	r3, [r6, #0]
 800467e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004682:	460c      	mov	r4, r1
 8004684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004688:	b10a      	cbz	r2, 800468e <_printf_common+0x26>
 800468a:	3301      	adds	r3, #1
 800468c:	6033      	str	r3, [r6, #0]
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	0699      	lsls	r1, r3, #26
 8004692:	bf42      	ittt	mi
 8004694:	6833      	ldrmi	r3, [r6, #0]
 8004696:	3302      	addmi	r3, #2
 8004698:	6033      	strmi	r3, [r6, #0]
 800469a:	6825      	ldr	r5, [r4, #0]
 800469c:	f015 0506 	ands.w	r5, r5, #6
 80046a0:	d106      	bne.n	80046b0 <_printf_common+0x48>
 80046a2:	f104 0a19 	add.w	sl, r4, #25
 80046a6:	68e3      	ldr	r3, [r4, #12]
 80046a8:	6832      	ldr	r2, [r6, #0]
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	42ab      	cmp	r3, r5
 80046ae:	dc2b      	bgt.n	8004708 <_printf_common+0xa0>
 80046b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046b4:	6822      	ldr	r2, [r4, #0]
 80046b6:	3b00      	subs	r3, #0
 80046b8:	bf18      	it	ne
 80046ba:	2301      	movne	r3, #1
 80046bc:	0692      	lsls	r2, r2, #26
 80046be:	d430      	bmi.n	8004722 <_printf_common+0xba>
 80046c0:	4641      	mov	r1, r8
 80046c2:	4638      	mov	r0, r7
 80046c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046c8:	47c8      	blx	r9
 80046ca:	3001      	adds	r0, #1
 80046cc:	d023      	beq.n	8004716 <_printf_common+0xae>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	6922      	ldr	r2, [r4, #16]
 80046d2:	f003 0306 	and.w	r3, r3, #6
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	bf14      	ite	ne
 80046da:	2500      	movne	r5, #0
 80046dc:	6833      	ldreq	r3, [r6, #0]
 80046de:	f04f 0600 	mov.w	r6, #0
 80046e2:	bf08      	it	eq
 80046e4:	68e5      	ldreq	r5, [r4, #12]
 80046e6:	f104 041a 	add.w	r4, r4, #26
 80046ea:	bf08      	it	eq
 80046ec:	1aed      	subeq	r5, r5, r3
 80046ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80046f2:	bf08      	it	eq
 80046f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046f8:	4293      	cmp	r3, r2
 80046fa:	bfc4      	itt	gt
 80046fc:	1a9b      	subgt	r3, r3, r2
 80046fe:	18ed      	addgt	r5, r5, r3
 8004700:	42b5      	cmp	r5, r6
 8004702:	d11a      	bne.n	800473a <_printf_common+0xd2>
 8004704:	2000      	movs	r0, #0
 8004706:	e008      	b.n	800471a <_printf_common+0xb2>
 8004708:	2301      	movs	r3, #1
 800470a:	4652      	mov	r2, sl
 800470c:	4641      	mov	r1, r8
 800470e:	4638      	mov	r0, r7
 8004710:	47c8      	blx	r9
 8004712:	3001      	adds	r0, #1
 8004714:	d103      	bne.n	800471e <_printf_common+0xb6>
 8004716:	f04f 30ff 	mov.w	r0, #4294967295
 800471a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800471e:	3501      	adds	r5, #1
 8004720:	e7c1      	b.n	80046a6 <_printf_common+0x3e>
 8004722:	2030      	movs	r0, #48	@ 0x30
 8004724:	18e1      	adds	r1, r4, r3
 8004726:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004730:	4422      	add	r2, r4
 8004732:	3302      	adds	r3, #2
 8004734:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004738:	e7c2      	b.n	80046c0 <_printf_common+0x58>
 800473a:	2301      	movs	r3, #1
 800473c:	4622      	mov	r2, r4
 800473e:	4641      	mov	r1, r8
 8004740:	4638      	mov	r0, r7
 8004742:	47c8      	blx	r9
 8004744:	3001      	adds	r0, #1
 8004746:	d0e6      	beq.n	8004716 <_printf_common+0xae>
 8004748:	3601      	adds	r6, #1
 800474a:	e7d9      	b.n	8004700 <_printf_common+0x98>

0800474c <_printf_i>:
 800474c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004750:	7e0f      	ldrb	r7, [r1, #24]
 8004752:	4691      	mov	r9, r2
 8004754:	2f78      	cmp	r7, #120	@ 0x78
 8004756:	4680      	mov	r8, r0
 8004758:	460c      	mov	r4, r1
 800475a:	469a      	mov	sl, r3
 800475c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800475e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004762:	d807      	bhi.n	8004774 <_printf_i+0x28>
 8004764:	2f62      	cmp	r7, #98	@ 0x62
 8004766:	d80a      	bhi.n	800477e <_printf_i+0x32>
 8004768:	2f00      	cmp	r7, #0
 800476a:	f000 80d1 	beq.w	8004910 <_printf_i+0x1c4>
 800476e:	2f58      	cmp	r7, #88	@ 0x58
 8004770:	f000 80b8 	beq.w	80048e4 <_printf_i+0x198>
 8004774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004778:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800477c:	e03a      	b.n	80047f4 <_printf_i+0xa8>
 800477e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004782:	2b15      	cmp	r3, #21
 8004784:	d8f6      	bhi.n	8004774 <_printf_i+0x28>
 8004786:	a101      	add	r1, pc, #4	@ (adr r1, 800478c <_printf_i+0x40>)
 8004788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800478c:	080047e5 	.word	0x080047e5
 8004790:	080047f9 	.word	0x080047f9
 8004794:	08004775 	.word	0x08004775
 8004798:	08004775 	.word	0x08004775
 800479c:	08004775 	.word	0x08004775
 80047a0:	08004775 	.word	0x08004775
 80047a4:	080047f9 	.word	0x080047f9
 80047a8:	08004775 	.word	0x08004775
 80047ac:	08004775 	.word	0x08004775
 80047b0:	08004775 	.word	0x08004775
 80047b4:	08004775 	.word	0x08004775
 80047b8:	080048f7 	.word	0x080048f7
 80047bc:	08004823 	.word	0x08004823
 80047c0:	080048b1 	.word	0x080048b1
 80047c4:	08004775 	.word	0x08004775
 80047c8:	08004775 	.word	0x08004775
 80047cc:	08004919 	.word	0x08004919
 80047d0:	08004775 	.word	0x08004775
 80047d4:	08004823 	.word	0x08004823
 80047d8:	08004775 	.word	0x08004775
 80047dc:	08004775 	.word	0x08004775
 80047e0:	080048b9 	.word	0x080048b9
 80047e4:	6833      	ldr	r3, [r6, #0]
 80047e6:	1d1a      	adds	r2, r3, #4
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6032      	str	r2, [r6, #0]
 80047ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047f4:	2301      	movs	r3, #1
 80047f6:	e09c      	b.n	8004932 <_printf_i+0x1e6>
 80047f8:	6833      	ldr	r3, [r6, #0]
 80047fa:	6820      	ldr	r0, [r4, #0]
 80047fc:	1d19      	adds	r1, r3, #4
 80047fe:	6031      	str	r1, [r6, #0]
 8004800:	0606      	lsls	r6, r0, #24
 8004802:	d501      	bpl.n	8004808 <_printf_i+0xbc>
 8004804:	681d      	ldr	r5, [r3, #0]
 8004806:	e003      	b.n	8004810 <_printf_i+0xc4>
 8004808:	0645      	lsls	r5, r0, #25
 800480a:	d5fb      	bpl.n	8004804 <_printf_i+0xb8>
 800480c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004810:	2d00      	cmp	r5, #0
 8004812:	da03      	bge.n	800481c <_printf_i+0xd0>
 8004814:	232d      	movs	r3, #45	@ 0x2d
 8004816:	426d      	negs	r5, r5
 8004818:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800481c:	230a      	movs	r3, #10
 800481e:	4858      	ldr	r0, [pc, #352]	@ (8004980 <_printf_i+0x234>)
 8004820:	e011      	b.n	8004846 <_printf_i+0xfa>
 8004822:	6821      	ldr	r1, [r4, #0]
 8004824:	6833      	ldr	r3, [r6, #0]
 8004826:	0608      	lsls	r0, r1, #24
 8004828:	f853 5b04 	ldr.w	r5, [r3], #4
 800482c:	d402      	bmi.n	8004834 <_printf_i+0xe8>
 800482e:	0649      	lsls	r1, r1, #25
 8004830:	bf48      	it	mi
 8004832:	b2ad      	uxthmi	r5, r5
 8004834:	2f6f      	cmp	r7, #111	@ 0x6f
 8004836:	6033      	str	r3, [r6, #0]
 8004838:	bf14      	ite	ne
 800483a:	230a      	movne	r3, #10
 800483c:	2308      	moveq	r3, #8
 800483e:	4850      	ldr	r0, [pc, #320]	@ (8004980 <_printf_i+0x234>)
 8004840:	2100      	movs	r1, #0
 8004842:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004846:	6866      	ldr	r6, [r4, #4]
 8004848:	2e00      	cmp	r6, #0
 800484a:	60a6      	str	r6, [r4, #8]
 800484c:	db05      	blt.n	800485a <_printf_i+0x10e>
 800484e:	6821      	ldr	r1, [r4, #0]
 8004850:	432e      	orrs	r6, r5
 8004852:	f021 0104 	bic.w	r1, r1, #4
 8004856:	6021      	str	r1, [r4, #0]
 8004858:	d04b      	beq.n	80048f2 <_printf_i+0x1a6>
 800485a:	4616      	mov	r6, r2
 800485c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004860:	fb03 5711 	mls	r7, r3, r1, r5
 8004864:	5dc7      	ldrb	r7, [r0, r7]
 8004866:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800486a:	462f      	mov	r7, r5
 800486c:	42bb      	cmp	r3, r7
 800486e:	460d      	mov	r5, r1
 8004870:	d9f4      	bls.n	800485c <_printf_i+0x110>
 8004872:	2b08      	cmp	r3, #8
 8004874:	d10b      	bne.n	800488e <_printf_i+0x142>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	07df      	lsls	r7, r3, #31
 800487a:	d508      	bpl.n	800488e <_printf_i+0x142>
 800487c:	6923      	ldr	r3, [r4, #16]
 800487e:	6861      	ldr	r1, [r4, #4]
 8004880:	4299      	cmp	r1, r3
 8004882:	bfde      	ittt	le
 8004884:	2330      	movle	r3, #48	@ 0x30
 8004886:	f806 3c01 	strble.w	r3, [r6, #-1]
 800488a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800488e:	1b92      	subs	r2, r2, r6
 8004890:	6122      	str	r2, [r4, #16]
 8004892:	464b      	mov	r3, r9
 8004894:	4621      	mov	r1, r4
 8004896:	4640      	mov	r0, r8
 8004898:	f8cd a000 	str.w	sl, [sp]
 800489c:	aa03      	add	r2, sp, #12
 800489e:	f7ff fee3 	bl	8004668 <_printf_common>
 80048a2:	3001      	adds	r0, #1
 80048a4:	d14a      	bne.n	800493c <_printf_i+0x1f0>
 80048a6:	f04f 30ff 	mov.w	r0, #4294967295
 80048aa:	b004      	add	sp, #16
 80048ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	f043 0320 	orr.w	r3, r3, #32
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	2778      	movs	r7, #120	@ 0x78
 80048ba:	4832      	ldr	r0, [pc, #200]	@ (8004984 <_printf_i+0x238>)
 80048bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	6831      	ldr	r1, [r6, #0]
 80048c4:	061f      	lsls	r7, r3, #24
 80048c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80048ca:	d402      	bmi.n	80048d2 <_printf_i+0x186>
 80048cc:	065f      	lsls	r7, r3, #25
 80048ce:	bf48      	it	mi
 80048d0:	b2ad      	uxthmi	r5, r5
 80048d2:	6031      	str	r1, [r6, #0]
 80048d4:	07d9      	lsls	r1, r3, #31
 80048d6:	bf44      	itt	mi
 80048d8:	f043 0320 	orrmi.w	r3, r3, #32
 80048dc:	6023      	strmi	r3, [r4, #0]
 80048de:	b11d      	cbz	r5, 80048e8 <_printf_i+0x19c>
 80048e0:	2310      	movs	r3, #16
 80048e2:	e7ad      	b.n	8004840 <_printf_i+0xf4>
 80048e4:	4826      	ldr	r0, [pc, #152]	@ (8004980 <_printf_i+0x234>)
 80048e6:	e7e9      	b.n	80048bc <_printf_i+0x170>
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	f023 0320 	bic.w	r3, r3, #32
 80048ee:	6023      	str	r3, [r4, #0]
 80048f0:	e7f6      	b.n	80048e0 <_printf_i+0x194>
 80048f2:	4616      	mov	r6, r2
 80048f4:	e7bd      	b.n	8004872 <_printf_i+0x126>
 80048f6:	6833      	ldr	r3, [r6, #0]
 80048f8:	6825      	ldr	r5, [r4, #0]
 80048fa:	1d18      	adds	r0, r3, #4
 80048fc:	6961      	ldr	r1, [r4, #20]
 80048fe:	6030      	str	r0, [r6, #0]
 8004900:	062e      	lsls	r6, r5, #24
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	d501      	bpl.n	800490a <_printf_i+0x1be>
 8004906:	6019      	str	r1, [r3, #0]
 8004908:	e002      	b.n	8004910 <_printf_i+0x1c4>
 800490a:	0668      	lsls	r0, r5, #25
 800490c:	d5fb      	bpl.n	8004906 <_printf_i+0x1ba>
 800490e:	8019      	strh	r1, [r3, #0]
 8004910:	2300      	movs	r3, #0
 8004912:	4616      	mov	r6, r2
 8004914:	6123      	str	r3, [r4, #16]
 8004916:	e7bc      	b.n	8004892 <_printf_i+0x146>
 8004918:	6833      	ldr	r3, [r6, #0]
 800491a:	2100      	movs	r1, #0
 800491c:	1d1a      	adds	r2, r3, #4
 800491e:	6032      	str	r2, [r6, #0]
 8004920:	681e      	ldr	r6, [r3, #0]
 8004922:	6862      	ldr	r2, [r4, #4]
 8004924:	4630      	mov	r0, r6
 8004926:	f000 f99f 	bl	8004c68 <memchr>
 800492a:	b108      	cbz	r0, 8004930 <_printf_i+0x1e4>
 800492c:	1b80      	subs	r0, r0, r6
 800492e:	6060      	str	r0, [r4, #4]
 8004930:	6863      	ldr	r3, [r4, #4]
 8004932:	6123      	str	r3, [r4, #16]
 8004934:	2300      	movs	r3, #0
 8004936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800493a:	e7aa      	b.n	8004892 <_printf_i+0x146>
 800493c:	4632      	mov	r2, r6
 800493e:	4649      	mov	r1, r9
 8004940:	4640      	mov	r0, r8
 8004942:	6923      	ldr	r3, [r4, #16]
 8004944:	47d0      	blx	sl
 8004946:	3001      	adds	r0, #1
 8004948:	d0ad      	beq.n	80048a6 <_printf_i+0x15a>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	079b      	lsls	r3, r3, #30
 800494e:	d413      	bmi.n	8004978 <_printf_i+0x22c>
 8004950:	68e0      	ldr	r0, [r4, #12]
 8004952:	9b03      	ldr	r3, [sp, #12]
 8004954:	4298      	cmp	r0, r3
 8004956:	bfb8      	it	lt
 8004958:	4618      	movlt	r0, r3
 800495a:	e7a6      	b.n	80048aa <_printf_i+0x15e>
 800495c:	2301      	movs	r3, #1
 800495e:	4632      	mov	r2, r6
 8004960:	4649      	mov	r1, r9
 8004962:	4640      	mov	r0, r8
 8004964:	47d0      	blx	sl
 8004966:	3001      	adds	r0, #1
 8004968:	d09d      	beq.n	80048a6 <_printf_i+0x15a>
 800496a:	3501      	adds	r5, #1
 800496c:	68e3      	ldr	r3, [r4, #12]
 800496e:	9903      	ldr	r1, [sp, #12]
 8004970:	1a5b      	subs	r3, r3, r1
 8004972:	42ab      	cmp	r3, r5
 8004974:	dcf2      	bgt.n	800495c <_printf_i+0x210>
 8004976:	e7eb      	b.n	8004950 <_printf_i+0x204>
 8004978:	2500      	movs	r5, #0
 800497a:	f104 0619 	add.w	r6, r4, #25
 800497e:	e7f5      	b.n	800496c <_printf_i+0x220>
 8004980:	080056c7 	.word	0x080056c7
 8004984:	080056d8 	.word	0x080056d8

08004988 <__sflush_r>:
 8004988:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	0716      	lsls	r6, r2, #28
 8004990:	4605      	mov	r5, r0
 8004992:	460c      	mov	r4, r1
 8004994:	d454      	bmi.n	8004a40 <__sflush_r+0xb8>
 8004996:	684b      	ldr	r3, [r1, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	dc02      	bgt.n	80049a2 <__sflush_r+0x1a>
 800499c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	dd48      	ble.n	8004a34 <__sflush_r+0xac>
 80049a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049a4:	2e00      	cmp	r6, #0
 80049a6:	d045      	beq.n	8004a34 <__sflush_r+0xac>
 80049a8:	2300      	movs	r3, #0
 80049aa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80049ae:	682f      	ldr	r7, [r5, #0]
 80049b0:	6a21      	ldr	r1, [r4, #32]
 80049b2:	602b      	str	r3, [r5, #0]
 80049b4:	d030      	beq.n	8004a18 <__sflush_r+0x90>
 80049b6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	0759      	lsls	r1, r3, #29
 80049bc:	d505      	bpl.n	80049ca <__sflush_r+0x42>
 80049be:	6863      	ldr	r3, [r4, #4]
 80049c0:	1ad2      	subs	r2, r2, r3
 80049c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80049c4:	b10b      	cbz	r3, 80049ca <__sflush_r+0x42>
 80049c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049c8:	1ad2      	subs	r2, r2, r3
 80049ca:	2300      	movs	r3, #0
 80049cc:	4628      	mov	r0, r5
 80049ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049d0:	6a21      	ldr	r1, [r4, #32]
 80049d2:	47b0      	blx	r6
 80049d4:	1c43      	adds	r3, r0, #1
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	d106      	bne.n	80049e8 <__sflush_r+0x60>
 80049da:	6829      	ldr	r1, [r5, #0]
 80049dc:	291d      	cmp	r1, #29
 80049de:	d82b      	bhi.n	8004a38 <__sflush_r+0xb0>
 80049e0:	4a28      	ldr	r2, [pc, #160]	@ (8004a84 <__sflush_r+0xfc>)
 80049e2:	40ca      	lsrs	r2, r1
 80049e4:	07d6      	lsls	r6, r2, #31
 80049e6:	d527      	bpl.n	8004a38 <__sflush_r+0xb0>
 80049e8:	2200      	movs	r2, #0
 80049ea:	6062      	str	r2, [r4, #4]
 80049ec:	6922      	ldr	r2, [r4, #16]
 80049ee:	04d9      	lsls	r1, r3, #19
 80049f0:	6022      	str	r2, [r4, #0]
 80049f2:	d504      	bpl.n	80049fe <__sflush_r+0x76>
 80049f4:	1c42      	adds	r2, r0, #1
 80049f6:	d101      	bne.n	80049fc <__sflush_r+0x74>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	b903      	cbnz	r3, 80049fe <__sflush_r+0x76>
 80049fc:	6560      	str	r0, [r4, #84]	@ 0x54
 80049fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a00:	602f      	str	r7, [r5, #0]
 8004a02:	b1b9      	cbz	r1, 8004a34 <__sflush_r+0xac>
 8004a04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a08:	4299      	cmp	r1, r3
 8004a0a:	d002      	beq.n	8004a12 <__sflush_r+0x8a>
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f7ff fbf5 	bl	80041fc <_free_r>
 8004a12:	2300      	movs	r3, #0
 8004a14:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a16:	e00d      	b.n	8004a34 <__sflush_r+0xac>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	47b0      	blx	r6
 8004a1e:	4602      	mov	r2, r0
 8004a20:	1c50      	adds	r0, r2, #1
 8004a22:	d1c9      	bne.n	80049b8 <__sflush_r+0x30>
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0c6      	beq.n	80049b8 <__sflush_r+0x30>
 8004a2a:	2b1d      	cmp	r3, #29
 8004a2c:	d001      	beq.n	8004a32 <__sflush_r+0xaa>
 8004a2e:	2b16      	cmp	r3, #22
 8004a30:	d11d      	bne.n	8004a6e <__sflush_r+0xe6>
 8004a32:	602f      	str	r7, [r5, #0]
 8004a34:	2000      	movs	r0, #0
 8004a36:	e021      	b.n	8004a7c <__sflush_r+0xf4>
 8004a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a3c:	b21b      	sxth	r3, r3
 8004a3e:	e01a      	b.n	8004a76 <__sflush_r+0xee>
 8004a40:	690f      	ldr	r7, [r1, #16]
 8004a42:	2f00      	cmp	r7, #0
 8004a44:	d0f6      	beq.n	8004a34 <__sflush_r+0xac>
 8004a46:	0793      	lsls	r3, r2, #30
 8004a48:	bf18      	it	ne
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	680e      	ldr	r6, [r1, #0]
 8004a4e:	bf08      	it	eq
 8004a50:	694b      	ldreq	r3, [r1, #20]
 8004a52:	1bf6      	subs	r6, r6, r7
 8004a54:	600f      	str	r7, [r1, #0]
 8004a56:	608b      	str	r3, [r1, #8]
 8004a58:	2e00      	cmp	r6, #0
 8004a5a:	ddeb      	ble.n	8004a34 <__sflush_r+0xac>
 8004a5c:	4633      	mov	r3, r6
 8004a5e:	463a      	mov	r2, r7
 8004a60:	4628      	mov	r0, r5
 8004a62:	6a21      	ldr	r1, [r4, #32]
 8004a64:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004a68:	47e0      	blx	ip
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	dc07      	bgt.n	8004a7e <__sflush_r+0xf6>
 8004a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a76:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7a:	81a3      	strh	r3, [r4, #12]
 8004a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a7e:	4407      	add	r7, r0
 8004a80:	1a36      	subs	r6, r6, r0
 8004a82:	e7e9      	b.n	8004a58 <__sflush_r+0xd0>
 8004a84:	20400001 	.word	0x20400001

08004a88 <_fflush_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	690b      	ldr	r3, [r1, #16]
 8004a8c:	4605      	mov	r5, r0
 8004a8e:	460c      	mov	r4, r1
 8004a90:	b913      	cbnz	r3, 8004a98 <_fflush_r+0x10>
 8004a92:	2500      	movs	r5, #0
 8004a94:	4628      	mov	r0, r5
 8004a96:	bd38      	pop	{r3, r4, r5, pc}
 8004a98:	b118      	cbz	r0, 8004aa2 <_fflush_r+0x1a>
 8004a9a:	6a03      	ldr	r3, [r0, #32]
 8004a9c:	b90b      	cbnz	r3, 8004aa2 <_fflush_r+0x1a>
 8004a9e:	f7ff f99b 	bl	8003dd8 <__sinit>
 8004aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f3      	beq.n	8004a92 <_fflush_r+0xa>
 8004aaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004aac:	07d0      	lsls	r0, r2, #31
 8004aae:	d404      	bmi.n	8004aba <_fflush_r+0x32>
 8004ab0:	0599      	lsls	r1, r3, #22
 8004ab2:	d402      	bmi.n	8004aba <_fflush_r+0x32>
 8004ab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ab6:	f7ff fb9e 	bl	80041f6 <__retarget_lock_acquire_recursive>
 8004aba:	4628      	mov	r0, r5
 8004abc:	4621      	mov	r1, r4
 8004abe:	f7ff ff63 	bl	8004988 <__sflush_r>
 8004ac2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ac4:	4605      	mov	r5, r0
 8004ac6:	07da      	lsls	r2, r3, #31
 8004ac8:	d4e4      	bmi.n	8004a94 <_fflush_r+0xc>
 8004aca:	89a3      	ldrh	r3, [r4, #12]
 8004acc:	059b      	lsls	r3, r3, #22
 8004ace:	d4e1      	bmi.n	8004a94 <_fflush_r+0xc>
 8004ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ad2:	f7ff fb91 	bl	80041f8 <__retarget_lock_release_recursive>
 8004ad6:	e7dd      	b.n	8004a94 <_fflush_r+0xc>

08004ad8 <__swhatbuf_r>:
 8004ad8:	b570      	push	{r4, r5, r6, lr}
 8004ada:	460c      	mov	r4, r1
 8004adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae0:	4615      	mov	r5, r2
 8004ae2:	2900      	cmp	r1, #0
 8004ae4:	461e      	mov	r6, r3
 8004ae6:	b096      	sub	sp, #88	@ 0x58
 8004ae8:	da0c      	bge.n	8004b04 <__swhatbuf_r+0x2c>
 8004aea:	89a3      	ldrh	r3, [r4, #12]
 8004aec:	2100      	movs	r1, #0
 8004aee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004af2:	bf14      	ite	ne
 8004af4:	2340      	movne	r3, #64	@ 0x40
 8004af6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004afa:	2000      	movs	r0, #0
 8004afc:	6031      	str	r1, [r6, #0]
 8004afe:	602b      	str	r3, [r5, #0]
 8004b00:	b016      	add	sp, #88	@ 0x58
 8004b02:	bd70      	pop	{r4, r5, r6, pc}
 8004b04:	466a      	mov	r2, sp
 8004b06:	f000 f87d 	bl	8004c04 <_fstat_r>
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	dbed      	blt.n	8004aea <__swhatbuf_r+0x12>
 8004b0e:	9901      	ldr	r1, [sp, #4]
 8004b10:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b14:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b18:	4259      	negs	r1, r3
 8004b1a:	4159      	adcs	r1, r3
 8004b1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b20:	e7eb      	b.n	8004afa <__swhatbuf_r+0x22>

08004b22 <__smakebuf_r>:
 8004b22:	898b      	ldrh	r3, [r1, #12]
 8004b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b26:	079d      	lsls	r5, r3, #30
 8004b28:	4606      	mov	r6, r0
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	d507      	bpl.n	8004b3e <__smakebuf_r+0x1c>
 8004b2e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004b32:	6023      	str	r3, [r4, #0]
 8004b34:	6123      	str	r3, [r4, #16]
 8004b36:	2301      	movs	r3, #1
 8004b38:	6163      	str	r3, [r4, #20]
 8004b3a:	b003      	add	sp, #12
 8004b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b3e:	466a      	mov	r2, sp
 8004b40:	ab01      	add	r3, sp, #4
 8004b42:	f7ff ffc9 	bl	8004ad8 <__swhatbuf_r>
 8004b46:	9f00      	ldr	r7, [sp, #0]
 8004b48:	4605      	mov	r5, r0
 8004b4a:	4639      	mov	r1, r7
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f7ff fbbf 	bl	80042d0 <_malloc_r>
 8004b52:	b948      	cbnz	r0, 8004b68 <__smakebuf_r+0x46>
 8004b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b58:	059a      	lsls	r2, r3, #22
 8004b5a:	d4ee      	bmi.n	8004b3a <__smakebuf_r+0x18>
 8004b5c:	f023 0303 	bic.w	r3, r3, #3
 8004b60:	f043 0302 	orr.w	r3, r3, #2
 8004b64:	81a3      	strh	r3, [r4, #12]
 8004b66:	e7e2      	b.n	8004b2e <__smakebuf_r+0xc>
 8004b68:	89a3      	ldrh	r3, [r4, #12]
 8004b6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b72:	81a3      	strh	r3, [r4, #12]
 8004b74:	9b01      	ldr	r3, [sp, #4]
 8004b76:	6020      	str	r0, [r4, #0]
 8004b78:	b15b      	cbz	r3, 8004b92 <__smakebuf_r+0x70>
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b80:	f000 f852 	bl	8004c28 <_isatty_r>
 8004b84:	b128      	cbz	r0, 8004b92 <__smakebuf_r+0x70>
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	f023 0303 	bic.w	r3, r3, #3
 8004b8c:	f043 0301 	orr.w	r3, r3, #1
 8004b90:	81a3      	strh	r3, [r4, #12]
 8004b92:	89a3      	ldrh	r3, [r4, #12]
 8004b94:	431d      	orrs	r5, r3
 8004b96:	81a5      	strh	r5, [r4, #12]
 8004b98:	e7cf      	b.n	8004b3a <__smakebuf_r+0x18>

08004b9a <_putc_r>:
 8004b9a:	b570      	push	{r4, r5, r6, lr}
 8004b9c:	460d      	mov	r5, r1
 8004b9e:	4614      	mov	r4, r2
 8004ba0:	4606      	mov	r6, r0
 8004ba2:	b118      	cbz	r0, 8004bac <_putc_r+0x12>
 8004ba4:	6a03      	ldr	r3, [r0, #32]
 8004ba6:	b90b      	cbnz	r3, 8004bac <_putc_r+0x12>
 8004ba8:	f7ff f916 	bl	8003dd8 <__sinit>
 8004bac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004bae:	07d8      	lsls	r0, r3, #31
 8004bb0:	d405      	bmi.n	8004bbe <_putc_r+0x24>
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	0599      	lsls	r1, r3, #22
 8004bb6:	d402      	bmi.n	8004bbe <_putc_r+0x24>
 8004bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bba:	f7ff fb1c 	bl	80041f6 <__retarget_lock_acquire_recursive>
 8004bbe:	68a3      	ldr	r3, [r4, #8]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	60a3      	str	r3, [r4, #8]
 8004bc6:	da05      	bge.n	8004bd4 <_putc_r+0x3a>
 8004bc8:	69a2      	ldr	r2, [r4, #24]
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	db12      	blt.n	8004bf4 <_putc_r+0x5a>
 8004bce:	b2eb      	uxtb	r3, r5
 8004bd0:	2b0a      	cmp	r3, #10
 8004bd2:	d00f      	beq.n	8004bf4 <_putc_r+0x5a>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	6022      	str	r2, [r4, #0]
 8004bda:	701d      	strb	r5, [r3, #0]
 8004bdc:	b2ed      	uxtb	r5, r5
 8004bde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004be0:	07da      	lsls	r2, r3, #31
 8004be2:	d405      	bmi.n	8004bf0 <_putc_r+0x56>
 8004be4:	89a3      	ldrh	r3, [r4, #12]
 8004be6:	059b      	lsls	r3, r3, #22
 8004be8:	d402      	bmi.n	8004bf0 <_putc_r+0x56>
 8004bea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bec:	f7ff fb04 	bl	80041f8 <__retarget_lock_release_recursive>
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	bd70      	pop	{r4, r5, r6, pc}
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f7ff f9de 	bl	8003fba <__swbuf_r>
 8004bfe:	4605      	mov	r5, r0
 8004c00:	e7ed      	b.n	8004bde <_putc_r+0x44>
	...

08004c04 <_fstat_r>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	2300      	movs	r3, #0
 8004c08:	4d06      	ldr	r5, [pc, #24]	@ (8004c24 <_fstat_r+0x20>)
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	4608      	mov	r0, r1
 8004c0e:	4611      	mov	r1, r2
 8004c10:	602b      	str	r3, [r5, #0]
 8004c12:	f7fc f95f 	bl	8000ed4 <_fstat>
 8004c16:	1c43      	adds	r3, r0, #1
 8004c18:	d102      	bne.n	8004c20 <_fstat_r+0x1c>
 8004c1a:	682b      	ldr	r3, [r5, #0]
 8004c1c:	b103      	cbz	r3, 8004c20 <_fstat_r+0x1c>
 8004c1e:	6023      	str	r3, [r4, #0]
 8004c20:	bd38      	pop	{r3, r4, r5, pc}
 8004c22:	bf00      	nop
 8004c24:	20000268 	.word	0x20000268

08004c28 <_isatty_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	4d05      	ldr	r5, [pc, #20]	@ (8004c44 <_isatty_r+0x1c>)
 8004c2e:	4604      	mov	r4, r0
 8004c30:	4608      	mov	r0, r1
 8004c32:	602b      	str	r3, [r5, #0]
 8004c34:	f7fc f95d 	bl	8000ef2 <_isatty>
 8004c38:	1c43      	adds	r3, r0, #1
 8004c3a:	d102      	bne.n	8004c42 <_isatty_r+0x1a>
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	b103      	cbz	r3, 8004c42 <_isatty_r+0x1a>
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	bd38      	pop	{r3, r4, r5, pc}
 8004c44:	20000268 	.word	0x20000268

08004c48 <_sbrk_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	4d05      	ldr	r5, [pc, #20]	@ (8004c64 <_sbrk_r+0x1c>)
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	602b      	str	r3, [r5, #0]
 8004c54:	f7fc f964 	bl	8000f20 <_sbrk>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d102      	bne.n	8004c62 <_sbrk_r+0x1a>
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	b103      	cbz	r3, 8004c62 <_sbrk_r+0x1a>
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	20000268 	.word	0x20000268

08004c68 <memchr>:
 8004c68:	4603      	mov	r3, r0
 8004c6a:	b510      	push	{r4, lr}
 8004c6c:	b2c9      	uxtb	r1, r1
 8004c6e:	4402      	add	r2, r0
 8004c70:	4293      	cmp	r3, r2
 8004c72:	4618      	mov	r0, r3
 8004c74:	d101      	bne.n	8004c7a <memchr+0x12>
 8004c76:	2000      	movs	r0, #0
 8004c78:	e003      	b.n	8004c82 <memchr+0x1a>
 8004c7a:	7804      	ldrb	r4, [r0, #0]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	428c      	cmp	r4, r1
 8004c80:	d1f6      	bne.n	8004c70 <memchr+0x8>
 8004c82:	bd10      	pop	{r4, pc}

08004c84 <_init>:
 8004c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c86:	bf00      	nop
 8004c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8a:	bc08      	pop	{r3}
 8004c8c:	469e      	mov	lr, r3
 8004c8e:	4770      	bx	lr

08004c90 <_fini>:
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c92:	bf00      	nop
 8004c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c96:	bc08      	pop	{r3}
 8004c98:	469e      	mov	lr, r3
 8004c9a:	4770      	bx	lr
